

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof this.Module !== 'undefined' ? this.Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

// Attempt to auto-detect the environment
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

// Normally we don't log exceptions but instead let them bubble out the top
// level where the embedding environment (e.g. the browser) can handle
// them.
// However under v8 and node we sometimes exit the process direcly in which case
// its up to use us to log the exception before exiting.
// If we fix https://github.com/emscripten-core/emscripten/issues/15080
// this may no longer be needed under node.
function logExceptionOnExit(e) {
  if (e instanceof ExitStatus) return;
  var toLog = e;
  if (e && typeof e === 'object' && e.stack) {
    toLog = [e, e.stack];
  }
  err('exiting due to exception: ' + toLog);
}

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (!(typeof process === 'object' && typeof require === 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }

// include: node_shell_read.js


read_ = function shell_read(filename, binary) {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    return binary ? ret : ret.toString();
  }
  if (!nodeFS) nodeFS = require('fs');
  if (!nodePath) nodePath = require('path');
  filename = nodePath['normalize'](filename);
  return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
};

readBinary = function readBinary(filename) {
  var ret = read_(filename, true);
  if (!ret.buffer) {
    ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
};

readAsync = function readAsync(filename, onload, onerror) {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    onload(ret);
  }
  if (!nodeFS) nodeFS = require('fs');
  if (!nodePath) nodePath = require('path');
  filename = nodePath['normalize'](filename);
  nodeFS['readFile'](filename, function(err, data) {
    if (err) onerror(err);
    else onload(data.buffer);
  });
};

// end include: node_shell_read.js
  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  // Without this older versions of node (< v15) will log unhandled rejections
  // but return 0, which is not normally the desired behaviour.  This is
  // not be needed with node v15 and about because it is now the default
  // behaviour:
  // See https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode
  process['on']('unhandledRejection', function(reason) { throw reason; });

  quit_ = function(status, toThrow) {
    if (keepRuntimeAlive()) {
      process['exitCode'] = status;
      throw toThrow;
    }
    logExceptionOnExit(toThrow);
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };

} else
if (ENVIRONMENT_IS_SHELL) {

  if ((typeof process === 'object' && typeof require === 'function') || typeof window === 'object' || typeof importScripts === 'function') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  readAsync = function readAsync(f, onload, onerror) {
    setTimeout(function() { onload(readBinary(f)); }, 0);
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status, toThrow) {
      logExceptionOnExit(toThrow);
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = (self || this).location.href;
  } else if (typeof document !== 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
  // they are removed because they could contain a slash.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  if (!(typeof window === 'object' || typeof importScripts === 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {

// include: web_or_worker_shell_read.js


  read_ = function(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];
if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) {
  Object.defineProperty(Module, 'arguments', {
    configurable: true,
    get: function() {
      abort('Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (Module['thisProgram']) thisProgram = Module['thisProgram'];
if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) {
  Object.defineProperty(Module, 'thisProgram', {
    configurable: true,
    get: function() {
      abort('Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (Module['quit']) quit_ = Module['quit'];
if (!Object.getOwnPropertyDescriptor(Module, 'quit')) {
  Object.defineProperty(Module, 'quit', {
    configurable: true,
    get: function() {
      abort('Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');

if (!Object.getOwnPropertyDescriptor(Module, 'read')) {
  Object.defineProperty(Module, 'read', {
    configurable: true,
    get: function() {
      abort('Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) {
  Object.defineProperty(Module, 'readAsync', {
    configurable: true,
    get: function() {
      abort('Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) {
  Object.defineProperty(Module, 'readBinary', {
    configurable: true,
    get: function() {
      abort('Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) {
  Object.defineProperty(Module, 'setWindowTitle', {
    configurable: true,
    get: function() {
      abort('Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';


assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add 'shell' to `-s ENVIRONMENT` to enable.");




var STACK_ALIGN = 16;

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

// include: runtime_functions.js


// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

function getEmptyTableSlot() {
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    return freeTableIndexes.pop();
  }
  // Grow the table
  try {
    wasmTable.grow(1);
  } catch (err) {
    if (!(err instanceof RangeError)) {
      throw err;
    }
    throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
  }
  return wasmTable.length - 1;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < wasmTable.length; i++) {
      var item = wasmTable.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.

  var ret = getEmptyTableSlot();

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    wasmTable.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction: ' + func);
    var wrapped = convertJsFunctionToWasm(func, sig);
    wasmTable.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunction(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

// end include: runtime_functions.js
// include: runtime_debug.js


// end include: runtime_debug.js
var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) {
  Object.defineProperty(Module, 'wasmBinary', {
    configurable: true,
    get: function() {
      abort('Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var noExitRuntime = Module['noExitRuntime'] || true;
if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) {
  Object.defineProperty(Module, 'noExitRuntime', {
    configurable: true,
    get: function() {
      abort('Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

// include: wasm2js.js


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(asmLibraryArg) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "");
  base64DecodeToExistingUint8Array(bufferView, 14264, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjDoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAAAAAAAAAAAAtAQAAAAAAAAAAAAAAAAAAAAAAAC4BAAAAAAAALwEAAGhCAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAAAAAAAAAAAAwAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxAQAAMgEAAHhGAAAABAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAK/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoOQAAAAAAAAUAAAAAAAAAAAAAAC0BAAAAAAAAAAAAAAAAAAAAAAAAAAAAADEBAAAvAQAAgEoAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAP//////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOBQUAA=");
  base64DecodeToExistingUint8Array(bufferView
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(env) {
 var memory = env.memory;
 var buffer = memory.buffer;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 var fimport$0 = env.__cxa_atexit;
 var fimport$1 = env.abort;
 var fimport$2 = env.environ_sizes_get;
 var fimport$3 = env.environ_get;
 var fimport$4 = env.strftime_l;
 var fimport$5 = env.fd_write;
 var fimport$6 = env.fd_read;
 var fimport$7 = env.fd_close;
 var fimport$8 = env.emscripten_resize_heap;
 var fimport$9 = env.emscripten_memcpy_big;
 var fimport$10 = env.setTempRet0;
 var fimport$11 = env.fd_seek;
 var global$0 = 5263584;
 var global$1 = 0;
 var global$2 = 0;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  $1470();
  $143();
  $1364();
  $1365();
 }
 
 function $1() {
  $2(19248 | 0, 1648 | 0) | 0;
  return 0 | 0;
 }
 
 function $2($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $4(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $3(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $3($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $1466(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $4($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $21_1 = 0, $39_1 = 0, $45_1 = 0, $51_1 = 0, $59_1 = 0, $69_1 = 0, $20_1 = 0, $44_1 = 0, $50_1 = 0, $57_1 = 0, $79_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  $1265($5_1 + 24 | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!(($5($5_1 + 24 | 0 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   $6($5_1 + 8 | 0 | 0, HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) | 0;
   $20_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
   $21_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     if (!((($7($21_1 + (HEAP32[((HEAP32[$21_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 176 | 0 | 0) == (32 | 0) & 1 | 0)) {
      break label$3
     }
     $39_1 = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) + (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
     break label$2;
    }
    $39_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
   }
   $44_1 = (HEAP32[($5_1 + 40 | 0) >> 2] | 0) + (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
   $45_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   $50_1 = $45_1 + (HEAP32[((HEAP32[$45_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
   $51_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   $57_1 = $8($51_1 + (HEAP32[((HEAP32[$51_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
   $59_1 = 24;
   HEAP32[($5_1 + 16 | 0) >> 2] = $9(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, $20_1 | 0, $39_1 | 0, $44_1 | 0, $50_1 | 0, ($57_1 << $59_1 | 0) >> $59_1 | 0 | 0) | 0;
   label$4 : {
    if (!(($10($5_1 + 16 | 0 | 0) | 0) & 1 | 0)) {
     break label$4
    }
    $69_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
    $11($69_1 + (HEAP32[((HEAP32[$69_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 5 | 0);
   }
  }
  $1267($5_1 + 24 | 0 | 0) | 0;
  $79_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  global$0 = $5_1 + 48 | 0;
  return $79_1 | 0;
 }
 
 function $5($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $6($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $17($6_1 + (HEAP32[((HEAP32[$6_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $7($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $8($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $11_1 = 0, $15_1 = 0, $19_1 = 0, $21_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!(($19($18() | 0 | 0, HEAP32[($4_1 + 76 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   $11_1 = 24;
   $15_1 = 24;
   HEAP32[($4_1 + 76 | 0) >> 2] = (($20($4_1 | 0, (32 << $11_1 | 0) >> $11_1 | 0 | 0) | 0) << $15_1 | 0) >> $15_1 | 0;
  }
  $19_1 = 24;
  $21_1 = ((HEAP32[($4_1 + 76 | 0) >> 2] | 0) << $19_1 | 0) >> $19_1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $21_1 | 0;
 }
 
 function $9($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $79_1 = 0, $145_1 = 0;
  $8_1 = global$0 - 80 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 64 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 52 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 48 | 0) >> 2] = $4_1;
  HEAP8[($8_1 + 47 | 0) >> 0] = $5_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($8_1 + 40 | 0) >> 2] = (HEAP32[($8_1 + 52 | 0) >> 2] | 0) - (HEAP32[($8_1 + 60 | 0) >> 2] | 0) | 0;
   HEAP32[($8_1 + 36 | 0) >> 2] = $12(HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) > (HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($8_1 + 36 | 0) >> 2] = (HEAP32[($8_1 + 36 | 0) >> 2] | 0) - (HEAP32[($8_1 + 40 | 0) >> 2] | 0) | 0;
     break label$3;
    }
    HEAP32[($8_1 + 36 | 0) >> 2] = 0;
   }
   HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 56 | 0) >> 2] | 0) - (HEAP32[($8_1 + 60 | 0) >> 2] | 0) | 0;
   label$5 : {
    if (!((HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$5
    }
    label$6 : {
     if (!(($13(HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[($8_1 + 64 | 0) >> 2] = 0;
     HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
     break label$1;
    }
   }
   label$7 : {
    if (!((HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$7
    }
    $79_1 = 24;
    $14($8_1 + 16 | 0 | 0, HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0, ((HEAPU8[($8_1 + 47 | 0) >> 0] | 0) << $79_1 | 0) >> $79_1 | 0 | 0) | 0;
    label$8 : {
     label$9 : {
      if (!(($13(HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0, $15($8_1 + 16 | 0 | 0) | 0 | 0, HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      HEAP32[($8_1 + 64 | 0) >> 2] = 0;
      HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
      HEAP32[($8_1 + 12 | 0) >> 2] = 1;
      break label$8;
     }
     HEAP32[($8_1 + 12 | 0) >> 2] = 0;
    }
    $1371($8_1 + 16 | 0 | 0) | 0;
    label$10 : {
     switch (HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0) {
     case 1:
      break label$1;
     default:
      break label$10;
     };
    }
   }
   HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 52 | 0) >> 2] | 0) - (HEAP32[($8_1 + 56 | 0) >> 2] | 0) | 0;
   label$11 : {
    if (!((HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$11
    }
    label$12 : {
     if (!(($13(HEAP32[($8_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$12
     }
     HEAP32[($8_1 + 64 | 0) >> 2] = 0;
     HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
     break label$1;
    }
   }
   $16(HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
   HEAP32[($8_1 + 72 | 0) >> 2] = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
  }
  $145_1 = HEAP32[($8_1 + 72 | 0) >> 2] | 0;
  global$0 = $8_1 + 80 | 0;
  return $145_1 | 0;
 }
 
 function $10($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0 | 0;
 }
 
 function $11($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $21(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $12($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $13($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $11_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $14($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $15_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP8[($5_1 + 23 | 0) >> 0] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $22($6_1 | 0, $5_1 + 16 | 0 | 0, $5_1 + 8 | 0 | 0) | 0;
  $15_1 = 24;
  $1379($6_1 | 0, HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, ((HEAPU8[($5_1 + 23 | 0) >> 0] | 0) << $15_1 | 0) >> $15_1 | 0 | 0);
  global$0 = $5_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $15($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $24($23(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $16($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $17($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $36(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $18() {
  return -1 | 0;
 }
 
 function $19($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0 | 0;
 }
 
 function $20($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $15_1 = 0, $13_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  $42($4_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $10_1 = 24;
  $13_1 = $38($37($4_1 | 0) | 0 | 0, ((HEAPU8[($4_1 + 11 | 0) >> 0] | 0) << $10_1 | 0) >> $10_1 | 0 | 0) | 0;
  $203($4_1 | 0) | 0;
  $15_1 = 24;
  global$0 = $4_1 + 16 | 0;
  return ($13_1 << $15_1 | 0) >> $15_1 | 0 | 0;
 }
 
 function $21($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $44($5_1 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $22($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $25(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  $26($6_1 | 0) | 0;
  $25(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $27($6_1 | 0) | 0;
  global$0 = $5_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $23($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($29($4_1 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $9_1 = $30($4_1 | 0) | 0;
    break label$1;
   }
   $9_1 = $31($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $24($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $25($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $26($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $27($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $28($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $28($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $29($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $16_1 = (((HEAPU8[(($32(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0) & 255 | 0) & 128 | 0 | 0) != (0 | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $30($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($32(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $31($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $33($32(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $32($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $34(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $33($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $35(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $34($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $35($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $36($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0;
 }
 
 function $37($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $208(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 15252 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $38($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $9_1 = 24;
  $13_1 = 24;
  $15_1 = ((FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($5_1, ((HEAPU8[($4_1 + 11 | 0) >> 0] | 0) << $9_1 | 0) >> $9_1 | 0) | 0) << $13_1 | 0) >> $13_1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $39($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1() | 0 | 0;
 }
 
 function $40($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $22($0_1 | 0, $2_1 + 8 | 0 | 0, $2_1 | 0) | 0;
  $1374($0_1 | 0, $1_1 | 0, $3($1_1 | 0) | 0 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $41($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    return;
   }
   $2_1 = $2_1 + -1 | 0;
   $3_1 = $2_1 << 2 | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0 | 0]($1_1, $0_1, HEAP32[((HEAP32[($0_1 + 36 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0);
   continue label$1;
  };
 }
 
 function $42($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $811($0_1 | 0, $1_1 + 28 | 0 | 0) | 0;
 }
 
 function $43($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $45($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $44($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = !(HEAP32[($0_1 + 24 | 0) >> 2] | 0) | $1_1 | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $1_1 | 0)) {
    break label$1
   }
   $48(1262 | 0);
   abort();
  }
 }
 
 function $45($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $53($2_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $46($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 1672;
  $41($0_1 | 0, 0 | 0);
  $203($0_1 + 28 | 0 | 0) | 0;
  $1449(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0);
  $1449(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0);
  $1449(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0);
  $1449(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0);
  return $0_1 | 0;
 }
 
 function $47($0_1) {
  $0_1 = $0_1 | 0;
  $1303($46($0_1 | 0) | 0 | 0);
 }
 
 function $48($0_1) {
  $0_1 = $0_1 | 0;
  fimport$1();
  abort();
 }
 
 function $49($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 4098;
  HEAP32[($0_1 + 8 | 0) >> 2] = 6;
  HEAP32[($0_1 + 16 | 0) >> 2] = !$1_1;
  $1459($0_1 + 32 | 0 | 0, 0 | 0, 40 | 0) | 0;
  $813($0_1 + 28 | 0 | 0) | 0;
 }
 
 function $50($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $51($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($52($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($52($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($52($2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $52($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $53($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0) >>> 0 < (HEAP32[$2_1 >> 2] | 0) >>> 0 | 0;
 }
 
 function $54($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $55($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($54($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $56($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $57() {
  return 14944 | 0;
 }
 
 function $58($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $59($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $60($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $61($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $62() {
  return 14264 | 0;
 }
 
 function $63($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $64($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $63($0_1 | 0) | 0 | 0;
 }
 
 function $65($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     if (!$2_1) {
      break label$3
     }
     $4_1 = $1_1 & 255 | 0;
     label$4 : while (1) {
      if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
       break label$2
      }
      $2_1 = $2_1 + -1 | 0;
      $3_1 = ($2_1 | 0) != (0 | 0);
      $0_1 = $0_1 + 1 | 0;
      if (!($0_1 & 3 | 0)) {
       break label$3
      }
      if ($2_1) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$3_1) {
     break label$1
    }
   }
   label$5 : {
    if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
     break label$5
    }
    if ($2_1 >>> 0 < 4 >>> 0) {
     break label$5
    }
    $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
    label$6 : while (1) {
     $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $0_1 = $0_1 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3 >>> 0) {
      continue label$6
     }
     break label$6;
    };
   }
   if (!$2_1) {
    break label$1
   }
   $3_1 = $1_1 & 255 | 0;
   label$7 : while (1) {
    label$8 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($3_1 | 0)) {
      break label$8
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return 0 | 0;
 }
 
 function $66($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ($1_1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[(($62() | 0) + 168 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      HEAP32[($57() | 0) >> 2] = 25;
      break label$3;
     }
     label$5 : {
      if ($1_1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1_1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     HEAP32[($57() | 0) >> 2] = 25;
    }
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return 1 | 0;
 }
 
 function $67($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $66($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $68($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $10_1 = 0, $2$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $2_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3_1 = $10_1 & 2047 | 0;
   if (($3_1 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($3_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0_1 != 0.0) {
       break label$4
      }
      $3_1 = 0;
      break label$3;
     }
     $0_1 = +$68(+($0_1 * 18446744073709551615.0), $1_1 | 0);
     $3_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $3_1 + -1022 | 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $69($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2_1 = $18_1;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1_1 = $22_1;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $70($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $18_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $22_1;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $71($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $4$hi = 0, $5$hi = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0, $43_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $17_1 = 0, $17$hi = 0, $19$hi = 0, $34_1 = 0, $34$hi = 0, $37_1 = 0, $39_1 = 0, $44_1 = 0, $44$hi = 0, $46$hi = 0, $74_1 = 0, $74$hi = 0, $78$hi = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $100$hi = 0, $107_1 = 0, $107$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $43_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $43_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17_1 = $43_1;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $45_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $45_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $19$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17_1;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$1 = $45_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$5;
    label$3 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $34_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $34$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$3 = $34$hi;
    i64toi32_i32$2 = $34_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$1;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $37_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$2 = 0;
    $39_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0 ? $37_1 : $39_1) {
     break label$4
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $46_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
    }
    $44_1 = $46_1;
    $44$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $47_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $47_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $46$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $44$hi;
    i64toi32_i32$5 = $44_1;
    i64toi32_i32$2 = $46$hi;
    i64toi32_i32$4 = $47_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    i64toi32_i32$5 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $5_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 2146435072;
   $5_1 = 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$2 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$5 = 0;
   $5_1 = 0;
   $5$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $48_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    $48_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $3_1 = $48_1;
   if ($3_1 >>> 0 < 15249 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$0 = $4$hi;
   $69($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 + -15233 | 0 | 0);
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   $70($2_1 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0, 15361 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 60;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $49_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $49_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $74_1 = $49_1;
   $74$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 4;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $50_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $50_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $78$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $74$hi;
   i64toi32_i32$4 = $74_1;
   i64toi32_i32$0 = $78$hi;
   i64toi32_i32$2 = $50_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $5$hi = i64toi32_i32$0;
   label$5 : {
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$2 = -1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $81_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$5;
    i64toi32_i32$0 = (i64toi32_i32$0 + 16 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$5;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$0 = $83_1;
    i64toi32_i32$5 = $87$hi;
    i64toi32_i32$2 = $87_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$2 = $81_1;
    i64toi32_i32$5 = $90$hi;
    i64toi32_i32$0 = $89_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$2 = 134217728;
    i64toi32_i32$0 = 1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $5_1 = i64toi32_i32$3;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 134217728;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $100$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = $100$hi;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $5_1 = i64toi32_i32$5;
   $5$hi = i64toi32_i32$3;
  }
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $107_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
  $107$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = $107$hi;
  i64toi32_i32$4 = $107_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$4 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $72($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
  $2_1 = 0;
  $1459($5_1 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($73(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $1_1 = -1;
    break label$1;
   }
   label$3 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    $2_1 = $1464($0_1 | 0) | 0;
   }
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$4 : {
    if ((HEAP8[($0_1 + 74 | 0) >> 0] | 0 | 0) > (0 | 0)) {
     break label$4
    }
    HEAP32[$0_1 >> 2] = $6_1 & -33 | 0;
   }
   $6_1 = $6_1 & 32 | 0;
   label$5 : {
    label$6 : {
     if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
      break label$6
     }
     $1_1 = $73($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
     break label$5;
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = 80;
    HEAP32[($0_1 + 16 | 0) >> 2] = $5_1 + 80 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
    $7_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
    $1_1 = $73($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
    if (!$7_1) {
     break label$5
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $7_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    $1_1 = $3_1 ? $1_1 : -1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $3_1 | $6_1 | 0;
   $1_1 = $3_1 & 32 | 0 ? -1 : $1_1;
   if (!$2_1) {
    break label$1
   }
   $1465($0_1 | 0);
  }
  global$0 = $5_1 + 208 | 0;
  return $1_1 | 0;
 }
 
 function $73($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $13_1 = 0, $14_1 = 0, i64toi32_i32$1 = 0, $19_1 = 0, $15_1 = 0, $12_1 = 0, $20_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $17_1 = 0, $11_1 = 0, $18_1 = 0, $16_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $9_1 = 0, $22_1 = 0, $22$hi = 0, $10_1 = 0, $21_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $8_1 = 0, $274_1 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
  $8_1 = $7_1 + 55 | 0;
  $9_1 = $7_1 + 56 | 0;
  $10_1 = 0;
  $11_1 = 0;
  $1_1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($11_1 | 0) < (0 | 0)) {
      break label$3
     }
     label$4 : {
      if (($1_1 | 0) <= (2147483647 - $11_1 | 0 | 0)) {
       break label$4
      }
      HEAP32[($57() | 0) >> 2] = 61;
      $11_1 = -1;
      break label$3;
     }
     $11_1 = $1_1 + $11_1 | 0;
    }
    $12_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
    $1_1 = $12_1;
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         $13_1 = HEAPU8[$1_1 >> 0] | 0;
         if (!$13_1) {
          break label$9
         }
         label$10 : while (1) {
          label$11 : {
           label$12 : {
            label$13 : {
             $13_1 = $13_1 & 255 | 0;
             if ($13_1) {
              break label$13
             }
             $13_1 = $1_1;
             break label$12;
            }
            if (($13_1 | 0) != (37 | 0)) {
             break label$11
            }
            $13_1 = $1_1;
            label$14 : while (1) {
             if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (37 | 0)) {
              break label$12
             }
             $14_1 = $1_1 + 2 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
             $13_1 = $13_1 + 1 | 0;
             $15_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
             $1_1 = $14_1;
             if (($15_1 | 0) == (37 | 0)) {
              continue label$14
             }
             break label$14;
            };
           }
           $1_1 = $13_1 - $12_1 | 0;
           label$15 : {
            if (!$0_1) {
             break label$15
            }
            $74($0_1 | 0, $12_1 | 0, $1_1 | 0);
           }
           if ($1_1) {
            continue label$2
           }
           $16_1 = -1;
           $13_1 = 1;
           $14_1 = $63(HEAP8[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0 | 0) | 0;
           $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           label$16 : {
            if (!$14_1) {
             break label$16
            }
            if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
             break label$16
            }
            $16_1 = (HEAP8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0;
            $10_1 = 1;
            $13_1 = 3;
           }
           $1_1 = $1_1 + $13_1 | 0;
           HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
           $17_1 = 0;
           label$17 : {
            label$18 : {
             $15_1 = HEAP8[$1_1 >> 0] | 0;
             $14_1 = $15_1 + -32 | 0;
             if ($14_1 >>> 0 <= 31 >>> 0) {
              break label$18
             }
             $13_1 = $1_1;
             break label$17;
            }
            $17_1 = 0;
            $13_1 = $1_1;
            $14_1 = 1 << $14_1 | 0;
            if (!($14_1 & 75913 | 0)) {
             break label$17
            }
            label$19 : while (1) {
             $13_1 = $1_1 + 1 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $13_1;
             $17_1 = $14_1 | $17_1 | 0;
             $15_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
             $14_1 = $15_1 + -32 | 0;
             if ($14_1 >>> 0 >= 32 >>> 0) {
              break label$17
             }
             $1_1 = $13_1;
             $14_1 = 1 << $14_1 | 0;
             if ($14_1 & 75913 | 0) {
              continue label$19
             }
             break label$19;
            };
           }
           label$20 : {
            label$21 : {
             if (($15_1 | 0) != (42 | 0)) {
              break label$21
             }
             label$22 : {
              label$23 : {
               if (!($63(HEAP8[($13_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                break label$23
               }
               $13_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
               if ((HEAPU8[($13_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                break label$23
               }
               HEAP32[((((HEAP8[($13_1 + 1 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
               $1_1 = $13_1 + 3 | 0;
               $18_1 = HEAP32[((((HEAP8[($13_1 + 1 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
               $10_1 = 1;
               break label$22;
              }
              if ($10_1) {
               break label$8
              }
              $10_1 = 0;
              $18_1 = 0;
              label$24 : {
               if (!$0_1) {
                break label$24
               }
               $1_1 = HEAP32[$2_1 >> 2] | 0;
               HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
               $18_1 = HEAP32[$1_1 >> 2] | 0;
              }
              $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0;
             }
             HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
             if (($18_1 | 0) > (-1 | 0)) {
              break label$20
             }
             $18_1 = 0 - $18_1 | 0;
             $17_1 = $17_1 | 8192 | 0;
             break label$20;
            }
            $18_1 = $75($7_1 + 76 | 0 | 0) | 0;
            if (($18_1 | 0) < (0 | 0)) {
             break label$8
            }
            $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           }
           $19_1 = -1;
           label$25 : {
            if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (46 | 0)) {
             break label$25
            }
            label$26 : {
             if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
              break label$26
             }
             label$27 : {
              if (!($63(HEAP8[($1_1 + 2 | 0) >> 0] | 0 | 0) | 0)) {
               break label$27
              }
              $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
              if ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
               break label$27
              }
              HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
              $19_1 = HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
              $1_1 = $1_1 + 4 | 0;
              HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
              break label$25;
             }
             if ($10_1) {
              break label$8
             }
             label$28 : {
              label$29 : {
               if ($0_1) {
                break label$29
               }
               $19_1 = 0;
               break label$28;
              }
              $1_1 = HEAP32[$2_1 >> 2] | 0;
              HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
              $19_1 = HEAP32[$1_1 >> 2] | 0;
             }
             $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 2 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
             break label$25;
            }
            HEAP32[($7_1 + 76 | 0) >> 2] = $1_1 + 1 | 0;
            $19_1 = $75($7_1 + 76 | 0 | 0) | 0;
            $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           }
           $13_1 = 0;
           label$30 : while (1) {
            $14_1 = $13_1;
            $20_1 = -1;
            if (((HEAP8[$1_1 >> 0] | 0) + -65 | 0) >>> 0 > 57 >>> 0) {
             break label$1
            }
            $15_1 = $1_1 + 1 | 0;
            HEAP32[($7_1 + 76 | 0) >> 2] = $15_1;
            $13_1 = HEAP8[$1_1 >> 0] | 0;
            $1_1 = $15_1;
            $13_1 = HEAPU8[(($13_1 + Math_imul($14_1, 58) | 0) + 1647 | 0) >> 0] | 0;
            if (($13_1 + -1 | 0) >>> 0 < 8 >>> 0) {
             continue label$30
            }
            break label$30;
           };
           label$31 : {
            label$32 : {
             label$33 : {
              if (($13_1 | 0) == (19 | 0)) {
               break label$33
              }
              if (!$13_1) {
               break label$1
              }
              label$34 : {
               if (($16_1 | 0) < (0 | 0)) {
                break label$34
               }
               HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $13_1;
               i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
               i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
               i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
               $274_1 = i64toi32_i32$0;
               i64toi32_i32$0 = $7_1;
               HEAP32[($7_1 + 64 | 0) >> 2] = $274_1;
               HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$1;
               break label$32;
              }
              if (!$0_1) {
               break label$5
              }
              $76($7_1 + 64 | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
              $15_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
              break label$31;
             }
             $20_1 = -1;
             if (($16_1 | 0) > (-1 | 0)) {
              break label$1
             }
            }
            $1_1 = 0;
            if (!$0_1) {
             continue label$2
            }
           }
           $21_1 = $17_1 & -65537 | 0;
           $13_1 = $17_1 & 8192 | 0 ? $21_1 : $17_1;
           $20_1 = 0;
           $16_1 = 1125;
           $17_1 = $9_1;
           label$35 : {
            label$36 : {
             label$37 : {
              label$38 : {
               label$39 : {
                label$40 : {
                 label$41 : {
                  label$42 : {
                   label$43 : {
                    label$44 : {
                     label$45 : {
                      label$46 : {
                       label$47 : {
                        label$48 : {
                         label$49 : {
                          label$50 : {
                           $1_1 = HEAP8[($15_1 + -1 | 0) >> 0] | 0;
                           $1_1 = $14_1 ? (($1_1 & 15 | 0 | 0) == (3 | 0) ? $1_1 & -33 | 0 : $1_1) : $1_1;
                           switch ($1_1 + -88 | 0 | 0) {
                           case 11:
                            break label$35;
                           case 9:
                           case 13:
                           case 14:
                           case 15:
                            break label$36;
                           case 27:
                            break label$41;
                           case 12:
                           case 17:
                            break label$44;
                           case 23:
                            break label$45;
                           case 0:
                           case 32:
                            break label$46;
                           case 24:
                            break label$47;
                           case 22:
                            break label$48;
                           case 29:
                            break label$49;
                           case 1:
                           case 2:
                           case 3:
                           case 4:
                           case 5:
                           case 6:
                           case 7:
                           case 8:
                           case 10:
                           case 16:
                           case 18:
                           case 19:
                           case 20:
                           case 21:
                           case 25:
                           case 26:
                           case 28:
                           case 30:
                           case 31:
                            break label$6;
                           default:
                            break label$50;
                           };
                          }
                          $17_1 = $9_1;
                          label$51 : {
                           switch ($1_1 + -65 | 0 | 0) {
                           case 0:
                           case 4:
                           case 5:
                           case 6:
                            break label$36;
                           case 2:
                            break label$39;
                           case 1:
                           case 3:
                            break label$6;
                           default:
                            break label$51;
                           };
                          }
                          if (($1_1 | 0) == (83 | 0)) {
                           break label$40
                          }
                          break label$7;
                         }
                         $20_1 = 0;
                         $16_1 = 1125;
                         i64toi32_i32$2 = $7_1;
                         i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                         $22_1 = i64toi32_i32$1;
                         $22$hi = i64toi32_i32$0;
                         break label$43;
                        }
                        $1_1 = 0;
                        label$52 : {
                         switch ($14_1 & 255 | 0 | 0) {
                         case 0:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$2;
                         case 1:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$2;
                         case 2:
                          i64toi32_i32$1 = $11_1;
                          i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                          i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                          HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                          continue label$2;
                         case 3:
                          HEAP16[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 1] = $11_1;
                          continue label$2;
                         case 4:
                          HEAP8[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 0] = $11_1;
                          continue label$2;
                         case 6:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$2;
                         case 7:
                          break label$52;
                         default:
                          continue label$2;
                         };
                        }
                        i64toi32_i32$1 = $11_1;
                        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                        i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                        HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                        continue label$2;
                       }
                       $19_1 = $19_1 >>> 0 > 8 >>> 0 ? $19_1 : 8;
                       $13_1 = $13_1 | 8 | 0;
                       $1_1 = 120;
                      }
                      i64toi32_i32$2 = $7_1;
                      i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                      $12_1 = $77(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0, $1_1 & 32 | 0 | 0) | 0;
                      $20_1 = 0;
                      $16_1 = 1125;
                      i64toi32_i32$2 = $7_1;
                      i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                      if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                       break label$42
                      }
                      if (!($13_1 & 8 | 0)) {
                       break label$42
                      }
                      $16_1 = ($1_1 >>> 4 | 0) + 1125 | 0;
                      $20_1 = 2;
                      break label$42;
                     }
                     $20_1 = 0;
                     $16_1 = 1125;
                     i64toi32_i32$2 = $7_1;
                     i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                     $12_1 = $78(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0) | 0;
                     if (!($13_1 & 8 | 0)) {
                      break label$42
                     }
                     $1_1 = $9_1 - $12_1 | 0;
                     $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1 + 1 | 0;
                     break label$42;
                    }
                    label$59 : {
                     i64toi32_i32$2 = $7_1;
                     i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                     $22_1 = i64toi32_i32$1;
                     $22$hi = i64toi32_i32$0;
                     i64toi32_i32$2 = i64toi32_i32$1;
                     i64toi32_i32$1 = -1;
                     i64toi32_i32$3 = -1;
                     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                      $30_1 = 1
                     } else {
                      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                        $31_1 = 0
                       } else {
                        $31_1 = 1
                       }
                       $32_1 = $31_1;
                      } else {
                       $32_1 = 0
                      }
                      $30_1 = $32_1;
                     }
                     if ($30_1) {
                      break label$59
                     }
                     i64toi32_i32$2 = $22$hi;
                     i64toi32_i32$2 = 0;
                     i64toi32_i32$3 = 0;
                     i64toi32_i32$0 = $22$hi;
                     i64toi32_i32$1 = $22_1;
                     i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
                     i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                     $22_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                     $22$hi = i64toi32_i32$5;
                     i64toi32_i32$3 = $7_1;
                     HEAP32[($7_1 + 64 | 0) >> 2] = $22_1;
                     HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$5;
                     $20_1 = 1;
                     $16_1 = 1125;
                     break label$43;
                    }
                    label$60 : {
                     if (!($13_1 & 2048 | 0)) {
                      break label$60
                     }
                     $20_1 = 1;
                     $16_1 = 1126;
                     break label$43;
                    }
                    $20_1 = $13_1 & 1 | 0;
                    $16_1 = $20_1 ? 1127 : 1125;
                   }
                   i64toi32_i32$5 = $22$hi;
                   $12_1 = $79($22_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
                  }
                  $13_1 = ($19_1 | 0) > (-1 | 0) ? $13_1 & -65537 | 0 : $13_1;
                  label$61 : {
                   i64toi32_i32$2 = $7_1;
                   i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                   i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                   $22_1 = i64toi32_i32$5;
                   $22$hi = i64toi32_i32$3;
                   i64toi32_i32$2 = i64toi32_i32$5;
                   i64toi32_i32$5 = 0;
                   i64toi32_i32$1 = 0;
                   if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
                    break label$61
                   }
                   if ($19_1) {
                    break label$61
                   }
                   $19_1 = 0;
                   $12_1 = $9_1;
                   break label$7;
                  }
                  i64toi32_i32$2 = $22$hi;
                  $1_1 = ($9_1 - $12_1 | 0) + !($22_1 | i64toi32_i32$2 | 0) | 0;
                  $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1;
                  break label$7;
                 }
                 $20_1 = 0;
                 $1_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 $12_1 = $1_1 ? $1_1 : 1611;
                 $1_1 = $65($12_1 | 0, 0 | 0, $19_1 | 0) | 0;
                 $17_1 = $1_1 ? $1_1 : $12_1 + $19_1 | 0;
                 $13_1 = $21_1;
                 $19_1 = $1_1 ? $1_1 - $12_1 | 0 : $19_1;
                 break label$6;
                }
                label$62 : {
                 if (!$19_1) {
                  break label$62
                 }
                 $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 break label$38;
                }
                $1_1 = 0;
                $80($0_1 | 0, 32 | 0, $18_1 | 0, 0 | 0, $13_1 | 0);
                break label$37;
               }
               HEAP32[($7_1 + 12 | 0) >> 2] = 0;
               i64toi32_i32$1 = $7_1;
               i64toi32_i32$2 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
               i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
               HEAP32[($7_1 + 8 | 0) >> 2] = i64toi32_i32$2;
               HEAP32[($7_1 + 64 | 0) >> 2] = $7_1 + 8 | 0;
               $19_1 = -1;
               $14_1 = $7_1 + 8 | 0;
              }
              $1_1 = 0;
              label$63 : {
               label$64 : while (1) {
                $15_1 = HEAP32[$14_1 >> 2] | 0;
                if (!$15_1) {
                 break label$63
                }
                label$65 : {
                 $15_1 = $67($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
                 $12_1 = ($15_1 | 0) < (0 | 0);
                 if ($12_1) {
                  break label$65
                 }
                 if ($15_1 >>> 0 > ($19_1 - $1_1 | 0) >>> 0) {
                  break label$65
                 }
                 $14_1 = $14_1 + 4 | 0;
                 $1_1 = $15_1 + $1_1 | 0;
                 if ($19_1 >>> 0 > $1_1 >>> 0) {
                  continue label$64
                 }
                 break label$63;
                }
                break label$64;
               };
               $20_1 = -1;
               if ($12_1) {
                break label$1
               }
              }
              $80($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 | 0);
              label$66 : {
               if ($1_1) {
                break label$66
               }
               $1_1 = 0;
               break label$37;
              }
              $14_1 = 0;
              $15_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
              label$67 : while (1) {
               $12_1 = HEAP32[$15_1 >> 2] | 0;
               if (!$12_1) {
                break label$37
               }
               $12_1 = $67($7_1 + 4 | 0 | 0, $12_1 | 0) | 0;
               $14_1 = $12_1 + $14_1 | 0;
               if (($14_1 | 0) > ($1_1 | 0)) {
                break label$37
               }
               $74($0_1 | 0, $7_1 + 4 | 0 | 0, $12_1 | 0);
               $15_1 = $15_1 + 4 | 0;
               if ($14_1 >>> 0 < $1_1 >>> 0) {
                continue label$67
               }
               break label$67;
              };
             }
             $80($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 ^ 8192 | 0 | 0);
             $1_1 = ($18_1 | 0) > ($1_1 | 0) ? $18_1 : $1_1;
             continue label$2;
            }
            $1_1 = FUNCTION_TABLE[$5_1 | 0]($0_1, +HEAPF64[($7_1 + 64 | 0) >> 3], $18_1, $19_1, $13_1, $1_1) | 0;
            continue label$2;
           }
           i64toi32_i32$1 = $7_1;
           i64toi32_i32$3 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
           i64toi32_i32$2 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
           HEAP8[($7_1 + 55 | 0) >> 0] = i64toi32_i32$3;
           $19_1 = 1;
           $12_1 = $8_1;
           $17_1 = $9_1;
           $13_1 = $21_1;
           break label$6;
          }
          $14_1 = $1_1 + 1 | 0;
          HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
          $13_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
          $1_1 = $14_1;
          continue label$10;
         };
        }
        $20_1 = $11_1;
        if ($0_1) {
         break label$1
        }
        if (!$10_1) {
         break label$5
        }
        $1_1 = 1;
        label$68 : {
         label$69 : while (1) {
          $13_1 = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
          if (!$13_1) {
           break label$68
          }
          $76($3_1 + ($1_1 << 3 | 0) | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
          $20_1 = 1;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (10 | 0)) {
           continue label$69
          }
          break label$1;
         };
        }
        $20_1 = 1;
        if ($1_1 >>> 0 >= 10 >>> 0) {
         break label$1
        }
        label$70 : while (1) {
         if (HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0) {
          break label$8
         }
         $20_1 = 1;
         $1_1 = $1_1 + 1 | 0;
         if (($1_1 | 0) == (10 | 0)) {
          break label$1
         }
         continue label$70;
        };
       }
       $20_1 = -1;
       break label$1;
      }
      $17_1 = $9_1;
     }
     $15_1 = $17_1 - $12_1 | 0;
     $17_1 = ($19_1 | 0) < ($15_1 | 0) ? $15_1 : $19_1;
     $14_1 = $20_1 + $17_1 | 0;
     $1_1 = ($18_1 | 0) < ($14_1 | 0) ? $14_1 : $18_1;
     $80($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 | 0);
     $74($0_1 | 0, $16_1 | 0, $20_1 | 0);
     $80($0_1 | 0, 48 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 65536 | 0 | 0);
     $80($0_1 | 0, 48 | 0, $17_1 | 0, $15_1 | 0, 0 | 0);
     $74($0_1 | 0, $12_1 | 0, $15_1 | 0);
     $80($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 8192 | 0 | 0);
     continue label$2;
    }
    break label$2;
   };
   $20_1 = 0;
  }
  global$0 = $7_1 + 80 | 0;
  return $20_1 | 0;
 }
 
 function $74($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   $1462($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  }
 }
 
 function $75($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = 0;
  label$1 : {
   if (!($63(HEAP8[(HEAP32[$0_1 >> 2] | 0) >> 0] | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = HEAP8[$2_1 >> 0] | 0;
    HEAP32[$0_1 >> 2] = $2_1 + 1 | 0;
    $1_1 = ($3_1 + Math_imul($1_1, 10) | 0) + -48 | 0;
    if ($63(HEAP8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $76($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $23_1 = 0, $31_1 = 0, $41_1 = 0, $49_1 = 0, $57_1 = 0, $65_1 = 0, $73_1 = 0;
  label$1 : {
   if ($1_1 >>> 0 > 20 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + -9 | 0 | 0) {
    case 0:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     return;
    case 1:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $23_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $23_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 2:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = 0;
     $31_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $31_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 3:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $41_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $41_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 4:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $49_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $49_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 5:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
     i64toi32_i32$1 = 0;
     $57_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $57_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 6:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $65_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $65_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 7:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
     i64toi32_i32$1 = 0;
     $73_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $73_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 8:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     HEAPF64[$0_1 >> 3] = +HEAPF64[$1_1 >> 3];
     return;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   FUNCTION_TABLE[$3_1 | 0]($0_1, $2_1);
  }
 }
 
 function $77($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $10_1 = 0, $3_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 2176 | 0) >> 0] | 0 | $2_1 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 15;
    $3_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $10_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $10_1;
    $0$hi = i64toi32_i32$0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $78($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $9_1 = 0, $2_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 7;
    $2_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 3;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $9_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $9_1;
    $0$hi = i64toi32_i32$0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $79($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$5 = 0, $2$hi = 0, $4_1 = 0, $16_1 = 0, $16$hi = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $2_1 = $0_1;
    $2$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $3_1 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $2$hi;
    $0_1 = $2_1;
    $0$hi = i64toi32_i32$2;
    if ($3_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $2$hi;
   $3_1 = $2_1;
   if (!$3_1) {
    break label$4
   }
   label$5 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $4_1 = ($3_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1_1 >> 0] = $3_1 - Math_imul($4_1, 10) | 0 | 48 | 0;
    $5_1 = $3_1 >>> 0 > 9 >>> 0;
    $3_1 = $4_1;
    if ($5_1) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1_1 | 0;
 }
 
 function $80($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  label$1 : {
   if ($4_1 & 73728 | 0) {
    break label$1
   }
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$1
   }
   $2_1 = $2_1 - $3_1 | 0;
   $3_1 = $2_1 >>> 0 < 256 >>> 0;
   $1459($5_1 | 0, $1_1 & 255 | 0 | 0, ($3_1 ? $2_1 : 256) | 0) | 0;
   label$2 : {
    if ($3_1) {
     break label$2
    }
    label$3 : while (1) {
     $74($0_1 | 0, $5_1 | 0, 256 | 0);
     $2_1 = $2_1 + -256 | 0;
     if ($2_1 >>> 0 > 255 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   $74($0_1 | 0, $5_1 | 0, $2_1 | 0);
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $81($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $72($0_1 | 0, $1_1 | 0, $2_1 | 0, 3 | 0, 4 | 0) | 0 | 0;
 }
 
 function $82($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $11_1 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $23_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $21_1 = 0, i64toi32_i32$2 = 0, $22_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $16_1 = 0, $12_1 = 0, $26_1 = 0.0, $8_1 = 0, $24_1 = 0, $19_1 = 0, $24$hi = 0, $13_1 = 0, $15_1 = 0, $9_1 = 0, $20_1 = 0, $7_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $25$hi = 0, $48_1 = 0, $25_1 = 0, $162_1 = 0, $164$hi = 0, $166$hi = 0, $168_1 = 0, $168$hi = 0, $170$hi = 0, $174_1 = 0, $174$hi = 0, $372_1 = 0.0, $817_1 = 0;
  $6_1 = global$0 - 560 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $84(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $45_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $46_1 = 0
      } else {
       $46_1 = 1
      }
      $47_1 = $46_1;
     } else {
      $47_1 = 0
     }
     $45_1 = $47_1;
    }
    if ($45_1) {
     break label$2
    }
    $8_1 = 1;
    $9_1 = 1135;
    $1_1 = -$1_1;
    i64toi32_i32$2 = $84(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$2;
    $24$hi = i64toi32_i32$1;
    break label$1;
   }
   label$3 : {
    if (!($4_1 & 2048 | 0)) {
     break label$3
    }
    $8_1 = 1;
    $9_1 = 1138;
    break label$1;
   }
   $8_1 = $4_1 & 1 | 0;
   $9_1 = $8_1 ? 1141 : 1136;
   $7_1 = !$8_1;
  }
  label$4 : {
   label$5 : {
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $24_1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    $10_1 = $8_1 + 3 | 0;
    $80($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 & -65537 | 0 | 0);
    $74($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $11_1 = $5_1 & 32 | 0;
    $74($0_1 | 0, ($1_1 != $1_1 ? ($11_1 ? 1364 : 1562) : $11_1 ? 1412 : 1584) | 0, 3 | 0);
    $80($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$4;
   }
   $12_1 = $6_1 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $1_1 = +$68(+$1_1, $6_1 + 44 | 0 | 0);
       $1_1 = $1_1 + $1_1;
       if ($1_1 == 0.0) {
        break label$9
       }
       $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $11_1 + -1 | 0;
       $13_1 = $5_1 | 32 | 0;
       if (($13_1 | 0) != (97 | 0)) {
        break label$8
       }
       break label$6;
      }
      $13_1 = $5_1 | 32 | 0;
      if (($13_1 | 0) == (97 | 0)) {
       break label$6
      }
      $14_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
      $15_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      break label$7;
     }
     $15_1 = $11_1 + -29 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $15_1;
     $14_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
     $1_1 = $1_1 * 268435456.0;
    }
    $16_1 = ($15_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 : $6_1 + 336 | 0;
    $17_1 = $16_1;
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       if (!($1_1 < 4294967296.0 & $1_1 >= 0.0 | 0)) {
        break label$12
       }
       $11_1 = ~~$1_1 >>> 0;
       break label$11;
      }
      $11_1 = 0;
     }
     HEAP32[$17_1 >> 2] = $11_1;
     $17_1 = $17_1 + 4 | 0;
     $1_1 = ($1_1 - +($11_1 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue label$10
     }
     break label$10;
    };
    label$13 : {
     label$14 : {
      if (($15_1 | 0) >= (1 | 0)) {
       break label$14
      }
      $3_1 = $15_1;
      $11_1 = $17_1;
      $18_1 = $16_1;
      break label$13;
     }
     $18_1 = $16_1;
     $3_1 = $15_1;
     label$15 : while (1) {
      $3_1 = ($3_1 | 0) < (29 | 0) ? $3_1 : 29;
      label$16 : {
       $11_1 = $17_1 + -4 | 0;
       if ($11_1 >>> 0 < $18_1 >>> 0) {
        break label$16
       }
       i64toi32_i32$1 = 0;
       $25_1 = $3_1;
       $25$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $24_1 = 0;
       $24$hi = i64toi32_i32$1;
       label$17 : while (1) {
        $162_1 = $11_1;
        i64toi32_i32$0 = $11_1;
        i64toi32_i32$1 = HEAP32[$11_1 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $164$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $25$hi;
        i64toi32_i32$2 = $164$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $25$hi;
        i64toi32_i32$3 = $25_1;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $166$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $24$hi;
        i64toi32_i32$2 = $24_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $168_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $168$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $166$hi;
        i64toi32_i32$1 = $48_1;
        i64toi32_i32$2 = $168$hi;
        i64toi32_i32$3 = $168_1;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $24_1 = i64toi32_i32$4;
        $24$hi = i64toi32_i32$5;
        $170$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $24_1 = i64toi32_i32$1;
        $24$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $174_1 = i64toi32_i32$1;
        $174$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $170$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$1 = $174$hi;
        i64toi32_i32$3 = $174_1;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        HEAP32[$162_1 >> 2] = i64toi32_i32$2;
        $11_1 = $11_1 + -4 | 0;
        if ($11_1 >>> 0 >= $18_1 >>> 0) {
         continue label$17
        }
        break label$17;
       };
       i64toi32_i32$4 = $24$hi;
       $11_1 = $24_1;
       if (!$11_1) {
        break label$16
       }
       $18_1 = $18_1 + -4 | 0;
       HEAP32[$18_1 >> 2] = $11_1;
      }
      label$18 : {
       label$19 : while (1) {
        $11_1 = $17_1;
        if ($11_1 >>> 0 <= $18_1 >>> 0) {
         break label$18
        }
        $17_1 = $11_1 + -4 | 0;
        if (!(HEAP32[$17_1 >> 2] | 0)) {
         continue label$19
        }
        break label$19;
       };
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $3_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $17_1 = $11_1;
      if (($3_1 | 0) > (0 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    $17_1 = ($14_1 + 25 | 0 | 0) / (9 | 0) | 0;
    label$20 : {
     if (($3_1 | 0) > (-1 | 0)) {
      break label$20
     }
     $19_1 = $17_1 + 1 | 0;
     $20_1 = ($13_1 | 0) == (102 | 0);
     label$21 : while (1) {
      $17_1 = 0 - $3_1 | 0;
      $10_1 = ($17_1 | 0) < (9 | 0) ? $17_1 : 9;
      label$22 : {
       label$23 : {
        if ($18_1 >>> 0 >= $11_1 >>> 0) {
         break label$23
        }
        $21_1 = 1e9 >>> $10_1 | 0;
        $22_1 = (-1 << $10_1 | 0) ^ -1 | 0;
        $3_1 = 0;
        $17_1 = $18_1;
        label$24 : while (1) {
         $23_1 = HEAP32[$17_1 >> 2] | 0;
         HEAP32[$17_1 >> 2] = ($23_1 >>> $10_1 | 0) + $3_1 | 0;
         $3_1 = Math_imul($23_1 & $22_1 | 0, $21_1);
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 < $11_1 >>> 0) {
          continue label$24
         }
         break label$24;
        };
        $17_1 = HEAP32[$18_1 >> 2] | 0;
        if (!$3_1) {
         break label$22
        }
        HEAP32[$11_1 >> 2] = $3_1;
        $11_1 = $11_1 + 4 | 0;
        break label$22;
       }
       $17_1 = HEAP32[$18_1 >> 2] | 0;
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $10_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $18_1 = $18_1 + (!$17_1 << 2 | 0) | 0;
      $17_1 = $20_1 ? $16_1 : $18_1;
      $11_1 = (($11_1 - $17_1 | 0) >> 2 | 0 | 0) > ($19_1 | 0) ? $17_1 + ($19_1 << 2 | 0) | 0 : $11_1;
      if (($3_1 | 0) < (0 | 0)) {
       continue label$21
      }
      break label$21;
     };
    }
    $17_1 = 0;
    label$25 : {
     if ($18_1 >>> 0 >= $11_1 >>> 0) {
      break label$25
     }
     $17_1 = Math_imul(($16_1 - $18_1 | 0) >> 2 | 0, 9);
     $3_1 = 10;
     $23_1 = HEAP32[$18_1 >> 2] | 0;
     if ($23_1 >>> 0 < 10 >>> 0) {
      break label$25
     }
     label$26 : while (1) {
      $17_1 = $17_1 + 1 | 0;
      $3_1 = Math_imul($3_1, 10);
      if ($23_1 >>> 0 >= $3_1 >>> 0) {
       continue label$26
      }
      break label$26;
     };
    }
    label$27 : {
     $3_1 = ($14_1 - (($13_1 | 0) == (102 | 0) ? 0 : $17_1) | 0) - (($13_1 | 0) == (103 | 0) & ($14_1 | 0) != (0 | 0) | 0) | 0;
     if (($3_1 | 0) >= (Math_imul(($11_1 - $16_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$27
     }
     $23_1 = $3_1 + 9216 | 0;
     $21_1 = ($23_1 | 0) / (9 | 0) | 0;
     $10_1 = (($21_1 << 2 | 0) + (($6_1 + 48 | 0) + (($15_1 | 0) < (0 | 0) ? 4 : 292) | 0) | 0) + -4096 | 0;
     $3_1 = 10;
     label$28 : {
      $23_1 = $23_1 - Math_imul($21_1, 9) | 0;
      if (($23_1 | 0) > (7 | 0)) {
       break label$28
      }
      label$29 : while (1) {
       $3_1 = Math_imul($3_1, 10);
       $23_1 = $23_1 + 1 | 0;
       if (($23_1 | 0) != (8 | 0)) {
        continue label$29
       }
       break label$29;
      };
     }
     $22_1 = $10_1 + 4 | 0;
     label$30 : {
      label$31 : {
       $23_1 = HEAP32[$10_1 >> 2] | 0;
       $19_1 = ($23_1 >>> 0) / ($3_1 >>> 0) | 0;
       $21_1 = $23_1 - Math_imul($19_1, $3_1) | 0;
       if ($21_1) {
        break label$31
       }
       if (($22_1 | 0) == ($11_1 | 0)) {
        break label$30
       }
      }
      $372_1 = ($22_1 | 0) == ($11_1 | 0) ? 1.0 : 1.5;
      $22_1 = $3_1 >>> 1 | 0;
      $26_1 = $21_1 >>> 0 < $22_1 >>> 0 ? .5 : ($21_1 | 0) == ($22_1 | 0) ? $372_1 : 1.5;
      $1_1 = $19_1 & 1 | 0 ? 9007199254740994.0 : 9007199254740992.0;
      label$32 : {
       if ($7_1) {
        break label$32
       }
       if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (45 | 0)) {
        break label$32
       }
       $26_1 = -$26_1;
       $1_1 = -$1_1;
      }
      $23_1 = $23_1 - $21_1 | 0;
      HEAP32[$10_1 >> 2] = $23_1;
      if ($1_1 + $26_1 == $1_1) {
       break label$30
      }
      $17_1 = $23_1 + $3_1 | 0;
      HEAP32[$10_1 >> 2] = $17_1;
      label$33 : {
       if ($17_1 >>> 0 < 1e9 >>> 0) {
        break label$33
       }
       label$34 : while (1) {
        HEAP32[$10_1 >> 2] = 0;
        label$35 : {
         $10_1 = $10_1 + -4 | 0;
         if ($10_1 >>> 0 >= $18_1 >>> 0) {
          break label$35
         }
         $18_1 = $18_1 + -4 | 0;
         HEAP32[$18_1 >> 2] = 0;
        }
        $17_1 = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
        HEAP32[$10_1 >> 2] = $17_1;
        if ($17_1 >>> 0 > 999999999 >>> 0) {
         continue label$34
        }
        break label$34;
       };
      }
      $17_1 = Math_imul(($16_1 - $18_1 | 0) >> 2 | 0, 9);
      $3_1 = 10;
      $23_1 = HEAP32[$18_1 >> 2] | 0;
      if ($23_1 >>> 0 < 10 >>> 0) {
       break label$30
      }
      label$36 : while (1) {
       $17_1 = $17_1 + 1 | 0;
       $3_1 = Math_imul($3_1, 10);
       if ($23_1 >>> 0 >= $3_1 >>> 0) {
        continue label$36
       }
       break label$36;
      };
     }
     $3_1 = $10_1 + 4 | 0;
     $11_1 = $11_1 >>> 0 > $3_1 >>> 0 ? $3_1 : $11_1;
    }
    label$37 : {
     label$38 : while (1) {
      $23_1 = $11_1;
      $3_1 = $11_1 >>> 0 <= $18_1 >>> 0;
      if ($3_1) {
       break label$37
      }
      $11_1 = $23_1 + -4 | 0;
      if (!(HEAP32[$11_1 >> 2] | 0)) {
       continue label$38
      }
      break label$38;
     };
    }
    label$39 : {
     label$40 : {
      if (($13_1 | 0) == (103 | 0)) {
       break label$40
      }
      $22_1 = $4_1 & 8 | 0;
      break label$39;
     }
     $11_1 = $14_1 ? $14_1 : 1;
     $10_1 = ($11_1 | 0) > ($17_1 | 0) & ($17_1 | 0) > (-5 | 0) | 0;
     $14_1 = ($10_1 ? $17_1 ^ -1 | 0 : -1) + $11_1 | 0;
     $5_1 = ($10_1 ? -1 : -2) + $5_1 | 0;
     $22_1 = $4_1 & 8 | 0;
     if ($22_1) {
      break label$39
     }
     $11_1 = -9;
     label$41 : {
      if ($3_1) {
       break label$41
      }
      $10_1 = HEAP32[($23_1 + -4 | 0) >> 2] | 0;
      if (!$10_1) {
       break label$41
      }
      $3_1 = 10;
      $11_1 = 0;
      if (($10_1 >>> 0) % (10 >>> 0) | 0) {
       break label$41
      }
      label$42 : while (1) {
       $21_1 = $11_1;
       $11_1 = $11_1 + 1 | 0;
       $3_1 = Math_imul($3_1, 10);
       if (!(($10_1 >>> 0) % ($3_1 >>> 0) | 0)) {
        continue label$42
       }
       break label$42;
      };
      $11_1 = $21_1 ^ -1 | 0;
     }
     $3_1 = Math_imul(($23_1 - $16_1 | 0) >> 2 | 0, 9);
     label$43 : {
      if (($5_1 & -33 | 0 | 0) != (70 | 0)) {
       break label$43
      }
      $22_1 = 0;
      $11_1 = ($3_1 + $11_1 | 0) + -9 | 0;
      $11_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
      $14_1 = ($14_1 | 0) < ($11_1 | 0) ? $14_1 : $11_1;
      break label$39;
     }
     $22_1 = 0;
     $11_1 = (($17_1 + $3_1 | 0) + $11_1 | 0) + -9 | 0;
     $11_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
     $14_1 = ($14_1 | 0) < ($11_1 | 0) ? $14_1 : $11_1;
    }
    $19_1 = ($14_1 | $22_1 | 0 | 0) != (0 | 0);
    label$44 : {
     label$45 : {
      $3_1 = $5_1 & -33 | 0;
      if (($3_1 | 0) != (70 | 0)) {
       break label$45
      }
      $11_1 = ($17_1 | 0) > (0 | 0) ? $17_1 : 0;
      break label$44;
     }
     label$46 : {
      $11_1 = $17_1 >> 31 | 0;
      i64toi32_i32$4 = 0;
      $11_1 = $79(($17_1 + $11_1 | 0) ^ $11_1 | 0 | 0, i64toi32_i32$4 | 0, $12_1 | 0) | 0;
      if (($12_1 - $11_1 | 0 | 0) > (1 | 0)) {
       break label$46
      }
      label$47 : while (1) {
       $11_1 = $11_1 + -1 | 0;
       HEAP8[$11_1 >> 0] = 48;
       if (($12_1 - $11_1 | 0 | 0) < (2 | 0)) {
        continue label$47
       }
       break label$47;
      };
     }
     $20_1 = $11_1 + -2 | 0;
     HEAP8[$20_1 >> 0] = $5_1;
     HEAP8[($11_1 + -1 | 0) >> 0] = ($17_1 | 0) < (0 | 0) ? 45 : 43;
     $11_1 = $12_1 - $20_1 | 0;
    }
    $10_1 = ((($8_1 + $14_1 | 0) + $19_1 | 0) + $11_1 | 0) + 1 | 0;
    $80($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
    $74($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $80($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
    label$48 : {
     label$49 : {
      label$50 : {
       label$51 : {
        if (($3_1 | 0) != (70 | 0)) {
         break label$51
        }
        $21_1 = $6_1 + 16 | 0 | 8 | 0;
        $3_1 = $6_1 + 16 | 0 | 9 | 0;
        $18_1 = $18_1 >>> 0 > $16_1 >>> 0 ? $16_1 : $18_1;
        $17_1 = $18_1;
        label$52 : while (1) {
         i64toi32_i32$5 = $17_1;
         i64toi32_i32$4 = HEAP32[$17_1 >> 2] | 0;
         i64toi32_i32$0 = 0;
         $11_1 = $79(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0) | 0;
         label$53 : {
          label$54 : {
           if (($17_1 | 0) == ($18_1 | 0)) {
            break label$54
           }
           if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$53
           }
           label$55 : while (1) {
            $11_1 = $11_1 + -1 | 0;
            HEAP8[$11_1 >> 0] = 48;
            if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$55
            }
            break label$53;
           };
          }
          if (($11_1 | 0) != ($3_1 | 0)) {
           break label$53
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $11_1 = $21_1;
         }
         $74($0_1 | 0, $11_1 | 0, $3_1 - $11_1 | 0 | 0);
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 <= $16_1 >>> 0) {
          continue label$52
         }
         break label$52;
        };
        $11_1 = 0;
        if (!$19_1) {
         break label$49
        }
        $74($0_1 | 0, 1609 | 0, 1 | 0);
        if ($17_1 >>> 0 >= $23_1 >>> 0) {
         break label$50
        }
        if (($14_1 | 0) < (1 | 0)) {
         break label$50
        }
        label$56 : while (1) {
         label$57 : {
          i64toi32_i32$5 = $17_1;
          i64toi32_i32$0 = HEAP32[$17_1 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $11_1 = $79(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $3_1 | 0) | 0;
          if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
           break label$57
          }
          label$58 : while (1) {
           $11_1 = $11_1 + -1 | 0;
           HEAP8[$11_1 >> 0] = 48;
           if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
            continue label$58
           }
           break label$58;
          };
         }
         $74($0_1 | 0, $11_1 | 0, (($14_1 | 0) < (9 | 0) ? $14_1 : 9) | 0);
         $11_1 = $14_1 + -9 | 0;
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 >= $23_1 >>> 0) {
          break label$49
         }
         $18_1 = ($14_1 | 0) > (9 | 0);
         $14_1 = $11_1;
         if ($18_1) {
          continue label$56
         }
         break label$49;
        };
       }
       label$59 : {
        if (($14_1 | 0) < (0 | 0)) {
         break label$59
        }
        $21_1 = $23_1 >>> 0 > $18_1 >>> 0 ? $23_1 : $18_1 + 4 | 0;
        $3_1 = $6_1 + 16 | 0 | 9 | 0;
        $16_1 = $6_1 + 16 | 0 | 8 | 0;
        $17_1 = $18_1;
        label$60 : while (1) {
         label$61 : {
          i64toi32_i32$5 = $17_1;
          i64toi32_i32$4 = HEAP32[$17_1 >> 2] | 0;
          i64toi32_i32$0 = 0;
          $11_1 = $79(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0) | 0;
          if (($11_1 | 0) != ($3_1 | 0)) {
           break label$61
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $11_1 = $16_1;
         }
         label$62 : {
          label$63 : {
           if (($17_1 | 0) == ($18_1 | 0)) {
            break label$63
           }
           if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$62
           }
           label$64 : while (1) {
            $11_1 = $11_1 + -1 | 0;
            HEAP8[$11_1 >> 0] = 48;
            if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$64
            }
            break label$62;
           };
          }
          $74($0_1 | 0, $11_1 | 0, 1 | 0);
          $11_1 = $11_1 + 1 | 0;
          label$65 : {
           if (($14_1 | 0) > (0 | 0)) {
            break label$65
           }
           if (!$22_1) {
            break label$62
           }
          }
          $74($0_1 | 0, 1609 | 0, 1 | 0);
         }
         $23_1 = $3_1 - $11_1 | 0;
         $74($0_1 | 0, $11_1 | 0, (($14_1 | 0) > ($23_1 | 0) ? $23_1 : $14_1) | 0);
         $14_1 = $14_1 - $23_1 | 0;
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 >= $21_1 >>> 0) {
          break label$59
         }
         if (($14_1 | 0) > (-1 | 0)) {
          continue label$60
         }
         break label$60;
        };
       }
       $80($0_1 | 0, 48 | 0, $14_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
       $74($0_1 | 0, $20_1 | 0, $12_1 - $20_1 | 0 | 0);
       break label$48;
      }
      $11_1 = $14_1;
     }
     $80($0_1 | 0, 48 | 0, $11_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    $80($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$4;
   }
   $14_1 = $9_1 + ((($5_1 << 26 | 0) >> 31 | 0) & 9 | 0) | 0;
   label$66 : {
    if ($3_1 >>> 0 > 11 >>> 0) {
     break label$66
    }
    $11_1 = 12 - $3_1 | 0;
    if (!$11_1) {
     break label$66
    }
    $26_1 = 8.0;
    label$67 : while (1) {
     $26_1 = $26_1 * 16.0;
     $11_1 = $11_1 + -1 | 0;
     if ($11_1) {
      continue label$67
     }
     break label$67;
    };
    label$68 : {
     if ((HEAPU8[$14_1 >> 0] | 0 | 0) != (45 | 0)) {
      break label$68
     }
     $1_1 = -($26_1 + (-$1_1 - $26_1));
     break label$66;
    }
    $1_1 = $1_1 + $26_1 - $26_1;
   }
   label$69 : {
    $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $817_1 = $11_1;
    $11_1 = $11_1 >> 31 | 0;
    i64toi32_i32$0 = 0;
    $11_1 = $79(($817_1 + $11_1 | 0) ^ $11_1 | 0 | 0, i64toi32_i32$0 | 0, $12_1 | 0) | 0;
    if (($11_1 | 0) != ($12_1 | 0)) {
     break label$69
    }
    HEAP8[($6_1 + 15 | 0) >> 0] = 48;
    $11_1 = $6_1 + 15 | 0;
   }
   $22_1 = $8_1 | 2 | 0;
   $18_1 = $5_1 & 32 | 0;
   $17_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
   $21_1 = $11_1 + -2 | 0;
   HEAP8[$21_1 >> 0] = $5_1 + 15 | 0;
   HEAP8[($11_1 + -1 | 0) >> 0] = ($17_1 | 0) < (0 | 0) ? 45 : 43;
   $23_1 = $4_1 & 8 | 0;
   $17_1 = $6_1 + 16 | 0;
   label$70 : while (1) {
    $11_1 = $17_1;
    label$71 : {
     label$72 : {
      if (!(Math_abs($1_1) < 2147483648.0)) {
       break label$72
      }
      $17_1 = ~~$1_1;
      break label$71;
     }
     $17_1 = -2147483648;
    }
    HEAP8[$11_1 >> 0] = HEAPU8[($17_1 + 2176 | 0) >> 0] | 0 | $18_1 | 0;
    $1_1 = ($1_1 - +($17_1 | 0)) * 16.0;
    label$73 : {
     $17_1 = $11_1 + 1 | 0;
     if (($17_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$73
     }
     label$74 : {
      if ($1_1 != 0.0) {
       break label$74
      }
      if (($3_1 | 0) > (0 | 0)) {
       break label$74
      }
      if (!$23_1) {
       break label$73
      }
     }
     HEAP8[($11_1 + 1 | 0) >> 0] = 46;
     $17_1 = $11_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue label$70
    }
    break label$70;
   };
   label$75 : {
    label$76 : {
     if (!$3_1) {
      break label$76
     }
     if ((($17_1 - ($6_1 + 16 | 0) | 0) + -2 | 0 | 0) >= ($3_1 | 0)) {
      break label$76
     }
     $11_1 = (($3_1 + $12_1 | 0) - $21_1 | 0) + 2 | 0;
     break label$75;
    }
    $11_1 = ($12_1 - (($6_1 + 16 | 0) + $21_1 | 0) | 0) + $17_1 | 0;
   }
   $10_1 = $11_1 + $22_1 | 0;
   $80($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
   $74($0_1 | 0, $14_1 | 0, $22_1 | 0);
   $80($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
   $17_1 = $17_1 - ($6_1 + 16 | 0) | 0;
   $74($0_1 | 0, $6_1 + 16 | 0 | 0, $17_1 | 0);
   $18_1 = $12_1 - $21_1 | 0;
   $80($0_1 | 0, 48 | 0, $11_1 - ($17_1 + $18_1 | 0) | 0 | 0, 0 | 0, 0 | 0);
   $74($0_1 | 0, $21_1 | 0, $18_1 | 0);
   $80($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
  }
  global$0 = $6_1 + 560 | 0;
  return (($10_1 | 0) < ($2_1 | 0) ? $2_1 : $10_1) | 0;
 }
 
 function $83($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $12_1 = 0, $12$hi = 0, $15_1 = 0, $15$hi = 0;
  $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 7 | 0) & -8 | 0;
  HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $15$hi;
  HEAPF64[$0_1 >> 3] = +$71($12_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$1 | 0);
 }
 
 function $84($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $85($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $1458($4_1 + 8 | 0 | 0, 2192 | 0, 144 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 | 0) > (0 | 0)) {
      break label$3
     }
     if ($1_1) {
      break label$2
     }
     $0_1 = $4_1 + 159 | 0;
     $1_1 = 1;
    }
    HEAP32[($4_1 + 52 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
    $5_1 = -2 - $0_1 | 0;
    $1_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $1_1;
    HEAP32[($4_1 + 56 | 0) >> 2] = $1_1;
    $0_1 = $0_1 + $1_1 | 0;
    HEAP32[($4_1 + 36 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
    $0_1 = $81($4_1 + 8 | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $1_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    HEAP8[($1_1 - (($1_1 | 0) == (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0)) | 0) >> 0] = 0;
    break label$1;
   }
   HEAP32[($57() | 0) >> 2] = 61;
   $0_1 = -1;
  }
  global$0 = $4_1 + 160 | 0;
  return $0_1 | 0;
 }
 
 function $86($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $6_1 = $3_1;
  $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) - $3_1 | 0;
  $3_1 = $3_1 >>> 0 > $2_1 >>> 0 ? $2_1 : $3_1;
  $1458($6_1 | 0, $1_1 | 0, $3_1 | 0) | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + $3_1 | 0;
  return $2_1 | 0;
 }
 
 function $87($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $85($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $88($0_1) {
  $0_1 = $0_1 | 0;
  return !($89($0_1 | 0) | 0) | 0;
 }
 
 function $89($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($29($0_1 | 0) | 0)) {
    break label$1
   }
   return $96($0_1 | 0) | 0 | 0;
  }
  return $100($0_1 | 0) | 0 | 0;
 }
 
 function $90($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $95($0_1 | 0) | 0;
  $0_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($0_1 | 0) != (3 | 0)) {
     break label$2
    }
    return;
   }
   HEAP32[($1_1 + ($0_1 << 2 | 0) | 0) >> 2] = 0;
   $0_1 = $0_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $91($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $93($92($1_1 | 0) | 0 | 0);
  $3_1 = $94($0_1 | 0, $2_1 + 8 | 0 | 0, $2_1 | 0) | 0;
  label$1 : {
   label$2 : {
    if ($29($1_1 | 0) | 0) {
     break label$2
    }
    $1_1 = $32($1_1 | 0) | 0;
    $3_1 = $95($3_1 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    break label$1;
   }
   $1375($0_1 | 0, $24($30($1_1 | 0) | 0 | 0) | 0 | 0, $96($1_1 | 0) | 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $92($0_1) {
  $0_1 = $0_1 | 0;
  return $98($0_1 | 0) | 0 | 0;
 }
 
 function $93($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $94($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $25($1_1 | 0) | 0;
  $26($0_1 | 0) | 0;
  $102($0_1 | 0, $101($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $95($0_1) {
  $0_1 = $0_1 | 0;
  return $97($0_1 | 0) | 0 | 0;
 }
 
 function $96($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[(($32($0_1 | 0) | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $97($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $98($0_1) {
  $0_1 = $0_1 | 0;
  return $99($0_1 | 0) | 0 | 0;
 }
 
 function $99($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $100($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[(($32($0_1 | 0) | 0) + 11 | 0) >> 0] | 0 | 0;
 }
 
 function $101($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $102($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $101($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $103($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $104($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $105($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $106() {
  $104(15012 | 0);
  return 15020 | 0;
 }
 
 function $107() {
  $105(15012 | 0);
 }
 
 function $108($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  return ($1_1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function $109($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = -1;
  label$1 : {
   if ($108($0_1 | 0) | 0) {
    break label$1
   }
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $2_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $110($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $4$hi = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $21_1 = 0, $22_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $1$hi;
  $2_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  $3_1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = $2_1 - $3_1 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $4_1 = i64toi32_i32$1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  $17_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $1$hi;
  $21_1 = $3_1 + $1_1 | 0;
  $22_1 = $2_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$3 = $1_1;
  if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
   $14_1 = 1
  } else {
   if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
    if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
     $15_1 = 0
    } else {
     $15_1 = 1
    }
    $16_1 = $15_1;
   } else {
    $16_1 = 0
   }
   $14_1 = $16_1;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = 0;
  HEAP32[($17_1 + 104 | 0) >> 2] = ($1_1 | 0) != (i64toi32_i32$1 | 0) | ($1$hi | 0) != (i64toi32_i32$0 | 0) | 0 ? ($14_1 ? $21_1 : $22_1) : $2_1;
 }
 
 function $111($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $1$hi = 0, i64toi32_i32$4 = 0, $4_1 = 0, $1_1 = 0, $3_1 = 0, $2_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $5_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $11$hi = 0, $30_1 = 0, $30$hi = 0, $38_1 = 0, $38$hi = 0, $50_1 = 0, $52_1 = 0, $52$hi = 0, $57_1 = 0, $57$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$0;
     $1$hi = i64toi32_i32$1;
     if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$3 = $1_1;
     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
      $23_1 = 1
     } else {
      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        $24_1 = 0
       } else {
        $24_1 = 1
       }
       $25_1 = $24_1;
      } else {
       $25_1 = 0
      }
      $23_1 = $25_1;
     }
     if ($23_1) {
      break label$2
     }
    }
    $2_1 = $109($0_1 | 0) | 0;
    if (($2_1 | 0) > (-1 | 0)) {
     break label$1
    }
   }
   HEAP32[($0_1 + 104 | 0) >> 2] = 0;
   return -1 | 0;
  }
  $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $4_1 = $3_1;
  label$4 : {
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$2 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$0;
   if (!(i64toi32_i32$2 | i64toi32_i32$0 | 0)) {
    break label$4
   }
   $4_1 = $3_1;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$0 = -1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
   $30_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $30$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$3 = $30$hi;
   i64toi32_i32$1 = $30_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $1_1 = i64toi32_i32$4;
   $1$hi = i64toi32_i32$5;
   $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = $3_1 - $5_1 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
   $38_1 = i64toi32_i32$2;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = $38$hi;
   i64toi32_i32$1 = $38_1;
   if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
    $26_1 = 1
   } else {
    if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      $27_1 = 0
     } else {
      $27_1 = 1
     }
     $28_1 = $27_1;
    } else {
     $28_1 = 0
    }
    $26_1 = $28_1;
   }
   if ($26_1) {
    break label$4
   }
   i64toi32_i32$0 = $1$hi;
   $4_1 = $5_1 + $1_1 | 0;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $4_1;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$5 : {
   if (!$3_1) {
    break label$5
   }
   $50_1 = $0_1;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
   $52_1 = i64toi32_i32$0;
   $52$hi = i64toi32_i32$5;
   i64toi32_i32$0 = ($3_1 - $4_1 | 0) + 1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
   $57_1 = i64toi32_i32$0;
   $57$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $52$hi;
   i64toi32_i32$1 = $52_1;
   i64toi32_i32$0 = $57$hi;
   i64toi32_i32$2 = $57_1;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$1 = $50_1;
   HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = i64toi32_i32$3;
   HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$4;
  }
  label$6 : {
   $0_1 = $4_1 + -1 | 0;
   if (($2_1 | 0) == (HEAPU8[$0_1 >> 0] | 0 | 0)) {
    break label$6
   }
   HEAP8[$0_1 >> 0] = $2_1;
  }
  return $2_1 | 0;
 }
 
 function $112($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $3_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $30_1 = 0, $38_1 = 0, $38$hi = 0, $42$hi = 0, $48_1 = 0, $49_1 = 0, $49$hi = 0, $53$hi = 0, $54_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
    $4_1 = $3_1 & 2147483647 | 0;
    if (($4_1 + -8388608 | 0) >>> 0 > 2130706431 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $24_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $24_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$0 = $24_1;
    i64toi32_i32$2 = 1065353216;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$5;
    break label$1;
   }
   label$3 : {
    if ($4_1 >>> 0 < 2139095040 >>> 0) {
     break label$3
    }
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $25_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $25_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    i64toi32_i32$5 = $25_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    break label$1;
   }
   label$4 : {
    if ($4_1) {
     break label$4
    }
    i64toi32_i32$1 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = 0;
   $30_1 = $4_1;
   $4_1 = Math_clz32($4_1);
   i64toi32_i32$5 = 0;
   $69($2_1 | 0, $30_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 + 81 | 0 | 0);
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
   $38_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 16265 - $4_1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $26_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $26_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $42$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $38$hi;
   i64toi32_i32$5 = $38_1;
   i64toi32_i32$1 = $42$hi;
   i64toi32_i32$3 = $26_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  $48_1 = i64toi32_i32$1;
  i64toi32_i32$5 = $5$hi;
  $49_1 = $5_1;
  $49$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = $3_1 & -2147483648 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $27_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $27_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $53$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $49$hi;
  i64toi32_i32$5 = $49_1;
  i64toi32_i32$0 = $53$hi;
  i64toi32_i32$3 = $27_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $54_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$5 = $48_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $54_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $113($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $5_1 = 0, $5$hi = 0, $21_1 = 0, $22_1 = 0, $19_1 = 0, $27_1 = 0, $27$hi = 0, $31$hi = 0, $32_1 = 0, $32$hi = 0, $36$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   $3_1 = $1_1 >> 31 | 0;
   $3_1 = ($1_1 + $3_1 | 0) ^ $3_1 | 0;
   i64toi32_i32$0 = 0;
   $19_1 = $3_1;
   $3_1 = Math_clz32($3_1);
   i64toi32_i32$1 = 0;
   $69($2_1 | 0, $19_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $3_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $27_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $27$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $3_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $31$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $27$hi;
   i64toi32_i32$1 = $27_1;
   i64toi32_i32$0 = $31$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $32_1 = i64toi32_i32$4;
   $32$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1_1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $22_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $32$hi;
   i64toi32_i32$5 = $32_1;
   i64toi32_i32$2 = $36$hi;
   i64toi32_i32$3 = $22_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $114($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $14$hi = 0, $14_1 = 0, $12$hi = 0, $11$hi = 0, $10$hi = 0, $15$hi = 0, $12_1 = 0, $6_1 = 0, $15_1 = 0, $11_1 = 0, $10_1 = 0, $18$hi = 0, $8_1 = 0, $18_1 = 0, $13$hi = 0, $16$hi = 0, $17$hi = 0, $7_1 = 0, $13_1 = 0, $16_1 = 0, $17_1 = 0, $19$hi = 0, $22$hi = 0, $19_1 = 0, $9_1 = 0, $20$hi = 0, $21$hi = 0, $23$hi = 0, $24$hi = 0, $228_1 = 0, $229_1 = 0, $230_1 = 0, $231_1 = 0, $232_1 = 0, $233_1 = 0, $234_1 = 0, $235_1 = 0, $237_1 = 0, $238_1 = 0, $239_1 = 0, $240_1 = 0, $241_1 = 0, $242_1 = 0, $244_1 = 0, $246_1 = 0, $248_1 = 0, $249_1 = 0, $251_1 = 0, $252_1 = 0, $254_1 = 0, $256_1 = 0, $20_1 = 0, $257_1 = 0, $258_1 = 0, $21_1 = 0, $22_1 = 0, $259_1 = 0, $24_1 = 0, $260_1 = 0, $261_1 = 0, $262_1 = 0, $263_1 = 0, $265_1 = 0, $266_1 = 0, $267_1 = 0, $268_1 = 0, $270_1 = 0, $271_1 = 0, $272_1 = 0, $273_1 = 0, $274_1 = 0, $275_1 = 0, $276_1 = 0, $278_1 = 0, $29_1 = 0, $29$hi = 0, $31$hi = 0, $34_1 = 0, $34$hi = 0, $36$hi = 0, $39_1 = 0, $39$hi = 0, $43$hi = 0, $70_1 = 0, $74_1 = 0, $81_1 = 0, $85_1 = 0, $94_1 = 0, $94$hi = 0, $106_1 = 0, $106$hi = 0, $128_1 = 0, $129_1 = 0, $129$hi = 0, $130_1 = 0, $130$hi = 0, $137$hi = 0, $140$hi = 0, $150_1 = 0, $150$hi = 0, $155$hi = 0, $162_1 = 0, $163_1 = 0, $163$hi = 0, $164_1 = 0, $164$hi = 0, $171$hi = 0, $174$hi = 0, $186_1 = 0, $186$hi = 0, $191$hi = 0, $194_1 = 0, $194$hi = 0, $196$hi = 0, $207_1 = 0, $207$hi = 0, $215_1 = 0, $215$hi = 0, $222_1 = 0, $222$hi = 0, $227_1 = 0, $227$hi = 0, $236_1 = 0, $236$hi = 0, $243_1 = 0, $243$hi = 0, $245_1 = 0, $245$hi = 0, $247_1 = 0, $247$hi = 0, $250_1 = 0, $252$hi = 0, $253_1 = 0, $253$hi = 0, $255_1 = 0, $255$hi = 0, $264_1 = 0, $264$hi = 0, $269_1 = 0, $269$hi = 0, $277_1 = 0, $277$hi = 0, $280$hi = 0, $23_1 = 0, $296_1 = 0, $296$hi = 0, $300_1 = 0, $301_1 = 0, $301$hi = 0, $305_1 = 0, $305$hi = 0, $309_1 = 0, $310$hi = 0, $311_1 = 0, $311$hi = 0, $312_1 = 0, $312$hi = 0, $315_1 = 0, $316$hi = 0, $319_1 = 0, $320$hi = 0, $321$hi = 0, $325_1 = 0, $326$hi = 0, $327$hi = 0, $330_1 = 0, $330$hi = 0, $331_1 = 0, $331$hi = 0, $338_1 = 0, $338$hi = 0, $344_1 = 0, $344$hi = 0, $346$hi = 0, $347_1 = 0, $347$hi = 0, $348_1 = 0, $348$hi = 0, $349_1 = 0, $349$hi = 0, $351$hi = 0, $355_1 = 0, $356$hi = 0, $357_1 = 0, $357$hi = 0, $358_1 = 0, $358$hi = 0, $360_1 = 0, $360$hi = 0, $363_1 = 0, $364$hi = 0, $367_1 = 0, $368$hi = 0, $369$hi = 0, $372_1 = 0, $373$hi = 0, $375$hi = 0, $376_1 = 0, $376$hi = 0, $380_1 = 0, $381$hi = 0, $382_1 = 0, $382$hi = 0, $383_1 = 0, $383$hi = 0, $386_1 = 0, $387$hi = 0, $390_1 = 0, $391$hi = 0, $392$hi = 0, $396_1 = 0, $397$hi = 0, $407_1 = 0, $407$hi = 0, $409$hi = 0, $412_1 = 0, $412$hi = 0, $414$hi = 0, $418_1 = 0, $418$hi = 0, $420$hi = 0, $454_1 = 0, $454$hi = 0, $456_1 = 0, $456$hi = 0, $457_1 = 0, $457$hi = 0, $459_1 = 0, $459$hi = 0, $463_1 = 0, $463$hi = 0, $465_1 = 0, $466$hi = 0, $471_1 = 0, $471$hi = 0, $475_1 = 0, $475$hi = 0, $484$hi = 0, $486_1 = 0, $486$hi = 0, $492_1 = 0, $498_1 = 0, $498$hi = 0, $503_1 = 0, $504$hi = 0, $508_1 = 0, $508$hi = 0, $512_1 = 0, $512$hi = 0, $515_1 = 0, $515$hi = 0, $519_1 = 0, $520$hi = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $228_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $228_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $228_1;
  $29$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $229_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $229_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $31$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $29$hi;
  i64toi32_i32$1 = $29_1;
  i64toi32_i32$0 = $31$hi;
  i64toi32_i32$3 = $229_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $10_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $230_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $230_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $34_1 = $230_1;
  $34$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 47;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $231_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $231_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $36$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $34$hi;
  i64toi32_i32$1 = $34_1;
  i64toi32_i32$0 = $36$hi;
  i64toi32_i32$3 = $231_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $11_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 49;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $232_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $232_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $39_1 = $232_1;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $12_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$2;
  i64toi32_i32$1 = $12_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 15;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $233_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $233_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $43$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $39$hi;
  i64toi32_i32$2 = $39_1;
  i64toi32_i32$1 = $43$hi;
  i64toi32_i32$3 = $233_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $13_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $13$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $14_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $15_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $15_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $234_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $234_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $16_1 = $234_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$1 = $12_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $235_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $235_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $17_1 = $235_1;
  $17$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $237_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $237_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $237_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $238_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $238_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $238_1 & 32767 | 0;
     if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$2 = $1$hi;
     $70_1 = !($1_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $18_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     $74_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = $18_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $70_1 : $74_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $14$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $81_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     $85_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) | 0 ? $81_1 : $85_1) {
      break label$5
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $14$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     $94_1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
     $94$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $94$hi;
     i64toi32_i32$1 = $94_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      if (!!(i64toi32_i32$1 | i64toi32_i32$2 | 0 | i64toi32_i32$0 | 0)) {
       break label$7
      }
      i64toi32_i32$0 = 2147450880;
      $14_1 = 0;
      $14$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $14$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $106_1 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
     $106$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$0 = $106$hi;
     i64toi32_i32$2 = $106_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     label$9 : {
      i64toi32_i32$0 = $2$hi;
      if (!!($2_1 | i64toi32_i32$0 | 0)) {
       break label$9
      }
      i64toi32_i32$0 = 2147450880;
      $14_1 = 0;
      $14$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $14$hi = i64toi32_i32$2;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$11 : {
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$11
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    $8_1 = 0;
    label$12 : {
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$12
     }
     $128_1 = $5_1 + 80 | 0;
     i64toi32_i32$0 = $1$hi;
     $129_1 = $1_1;
     $129$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $15$hi;
     $130_1 = $15_1;
     $130$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $15$hi;
     $8_1 = !($15_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$4 = $8_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1_1 : $15_1;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$2;
     i64toi32_i32$0 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$0 | 0) == (32 | 0)) {
      $239_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $239_1 = i64toi32_i32$0
     }
     $137$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $140$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $137$hi;
     i64toi32_i32$3 = $239_1;
     i64toi32_i32$1 = $140$hi;
     i64toi32_i32$0 = $8_1 << 6 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$2;
     i64toi32_i32$5 = $129$hi;
     i64toi32_i32$3 = $130$hi;
     $69($128_1 | 0, $129_1 | 0, i64toi32_i32$5 | 0, $130_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$2 | 0;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $240_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $240_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $150_1 = $240_1;
     $150$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5_1 + 88 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $241_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
      $241_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $155$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $150$hi;
     i64toi32_i32$4 = $150_1;
     i64toi32_i32$5 = $155$hi;
     i64toi32_i32$0 = $241_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $10_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$3 = $15_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $242_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $242_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $16_1 = $242_1;
     $16$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$2
    }
    $162_1 = $5_1 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $163_1 = $3_1;
    $163$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $12$hi;
    $164_1 = $12_1;
    $164$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $12$hi;
    $9_1 = !($12_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $3_1 : $12_1;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $244_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $244_1 = i64toi32_i32$5
    }
    $171$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $174$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $171$hi;
    i64toi32_i32$3 = $244_1;
    i64toi32_i32$0 = $174$hi;
    i64toi32_i32$5 = $9_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    i64toi32_i32$2 = $163$hi;
    i64toi32_i32$3 = $164$hi;
    $69($162_1 | 0, $163_1 | 0, i64toi32_i32$2 | 0, $164_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $8_1 = ($8_1 - i64toi32_i32$4 | 0) + 16 | 0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 49;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $246_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $246_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $186_1 = $246_1;
    $186$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 15;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $248_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $248_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $191$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $186$hi;
    i64toi32_i32$1 = $186_1;
    i64toi32_i32$2 = $191$hi;
    i64toi32_i32$5 = $248_1;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $13_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $13$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $249_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $249_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $194_1 = $249_1;
    $194$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 47;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $251_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $251_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $196$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $194$hi;
    i64toi32_i32$1 = $194_1;
    i64toi32_i32$2 = $196$hi;
    i64toi32_i32$5 = $251_1;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $11_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $11$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $252_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $252_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17_1 = $252_1;
    $17$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $2_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $19_1 = i64toi32_i32$1;
   $19$hi = i64toi32_i32$2;
   $207_1 = i64toi32_i32$1;
   $207$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 15;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $254_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $254_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   i64toi32_i32$2 = $254_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -32768;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $1_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $10$hi;
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $215_1 = i64toi32_i32$1;
   $215$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $207$hi;
   i64toi32_i32$3 = $207_1;
   i64toi32_i32$1 = $215$hi;
   i64toi32_i32$5 = $215_1;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $10_1 = i64toi32_i32$0;
   $10$hi = i64toi32_i32$4;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $256_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $256_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $12_1 = $256_1;
   $12$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $222_1 = i64toi32_i32$2;
   $222$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$4 = $12_1;
   i64toi32_i32$2 = $222$hi;
   i64toi32_i32$5 = $222_1;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$3 = 0;
   $227_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   $227$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $20_1 = i64toi32_i32$0;
   $20$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$5 = $15_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $12_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
   $12$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$5 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $12_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $236_1 = i64toi32_i32$5;
   $236$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$3 = $20_1;
   i64toi32_i32$5 = $236$hi;
   i64toi32_i32$4 = $236_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $18_1 = i64toi32_i32$2;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $13$hi;
   i64toi32_i32$0 = $13_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $15_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $15$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $243_1 = i64toi32_i32$0;
   $243$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $18$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$0 = $243$hi;
   i64toi32_i32$4 = $243_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $13_1 = i64toi32_i32$5;
   $13$hi = i64toi32_i32$2;
   $245_1 = i64toi32_i32$5;
   $245$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $257_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    $257_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
   }
   $247_1 = $257_1;
   $247$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$4 = $19_1;
   $250_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $250_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
    $258_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $258_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
   }
   $252$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $247$hi;
   i64toi32_i32$2 = $247_1;
   i64toi32_i32$4 = $252$hi;
   i64toi32_i32$3 = $258_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $253_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $253$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $245$hi;
   i64toi32_i32$1 = $245_1;
   i64toi32_i32$2 = $253$hi;
   i64toi32_i32$3 = $253_1;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $19_1 = i64toi32_i32$0;
   $19$hi = i64toi32_i32$5;
   $255_1 = i64toi32_i32$0;
   $255$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $21_1 = i64toi32_i32$1;
   $21$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = $16$hi;
   i64toi32_i32$4 = $16_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 65536;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $10_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $10$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$4 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $264_1 = i64toi32_i32$4;
   $264$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $21$hi;
   i64toi32_i32$5 = $21_1;
   i64toi32_i32$4 = $264$hi;
   i64toi32_i32$3 = $264_1;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $16_1 = i64toi32_i32$2;
   $16$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $269_1 = i64toi32_i32$5;
   $269$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$5 = $269$hi;
   i64toi32_i32$3 = $269_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $22_1 = i64toi32_i32$4;
   $22$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $17$hi;
   i64toi32_i32$0 = $17_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 2147483647;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $277_1 = i64toi32_i32$2;
   $277$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $22$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$2 = $277$hi;
   i64toi32_i32$3 = $277_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $17_1 = i64toi32_i32$5;
   $17$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    $259_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
    $259_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   }
   $280$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $255$hi;
   i64toi32_i32$4 = $255_1;
   i64toi32_i32$0 = $280$hi;
   i64toi32_i32$3 = $259_1;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $23_1 = i64toi32_i32$2;
   $23$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $227$hi;
   i64toi32_i32$1 = $227_1;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $4_1 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$2;
   $6_1 = (($7_1 + $6_1 | 0) + $8_1 | 0) + -16383 | 0;
   label$13 : {
    label$14 : {
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$2 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $24_1 = i64toi32_i32$1;
     $24$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $296_1 = i64toi32_i32$1;
     $296$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$5 = $24_1;
     i64toi32_i32$1 = $296$hi;
     i64toi32_i32$3 = $296_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2_1 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$3 = $24_1;
     $300_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $301_1 = $300_1;
     $301$hi = i64toi32_i32$2;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $305_1 = i64toi32_i32$0;
     $305$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$0 = $305$hi;
     i64toi32_i32$5 = $305_1;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = $2_1;
     $309_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $310$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $301$hi;
     i64toi32_i32$5 = $301_1;
     i64toi32_i32$4 = $310$hi;
     i64toi32_i32$3 = $309_1;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $311_1 = i64toi32_i32$0;
     $311$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $312_1 = $3_1;
     $312$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$3 = $20_1;
     $315_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $316$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$5 = $18_1;
     $319_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $320$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $316$hi;
     i64toi32_i32$5 = $315_1;
     i64toi32_i32$2 = $320$hi;
     i64toi32_i32$1 = $319_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $321$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $312$hi;
     i64toi32_i32$3 = $312_1;
     i64toi32_i32$5 = $321$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $325_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $326$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $311$hi;
     i64toi32_i32$1 = $311_1;
     i64toi32_i32$4 = $326$hi;
     i64toi32_i32$3 = $325_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $327$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $330_1 = i64toi32_i32$1;
     $330$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $327$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $330$hi;
     i64toi32_i32$3 = $330_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $331_1 = i64toi32_i32$4;
     $331$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$5 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $338_1 = i64toi32_i32$0;
     $338$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = $338$hi;
     i64toi32_i32$3 = $338_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1_1 = i64toi32_i32$1;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $260_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $260_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $344_1 = $260_1;
     $344$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $261_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $261_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
     }
     $346$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $344$hi;
     i64toi32_i32$4 = $344_1;
     i64toi32_i32$5 = $346$hi;
     i64toi32_i32$2 = $261_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $347_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $347$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $331$hi;
     i64toi32_i32$3 = $331_1;
     i64toi32_i32$4 = $347$hi;
     i64toi32_i32$2 = $347_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $348_1 = i64toi32_i32$0;
     $348$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     $349_1 = $2_1;
     $349$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      $262_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $262_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     }
     $351$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $349$hi;
     i64toi32_i32$1 = $349_1;
     i64toi32_i32$5 = $351$hi;
     i64toi32_i32$2 = $262_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$2 = $2_1;
     $355_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $356$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $348$hi;
     i64toi32_i32$2 = $348_1;
     i64toi32_i32$0 = $356$hi;
     i64toi32_i32$1 = $355_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $357_1 = i64toi32_i32$5;
     $357$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     $358_1 = $1_1;
     $358$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$3 = $17_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $263_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $263_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $360_1 = $263_1;
     $360$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$1 = $21_1;
     $363_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $364$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$1 = $22_1;
     i64toi32_i32$3 = $16_1;
     $367_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $368$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $364$hi;
     i64toi32_i32$3 = $363_1;
     i64toi32_i32$4 = $368$hi;
     i64toi32_i32$2 = $367_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $369$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$1 = $17_1;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$2 = $22_1;
     $372_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $373$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $369$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $373$hi;
     i64toi32_i32$3 = $372_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      $265_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $265_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     }
     $375$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $360$hi;
     i64toi32_i32$0 = $360_1;
     i64toi32_i32$1 = $375$hi;
     i64toi32_i32$3 = $265_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $376_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $376$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $358$hi;
     i64toi32_i32$2 = $358_1;
     i64toi32_i32$0 = $376$hi;
     i64toi32_i32$3 = $376_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1_1;
     $380_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $381$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $357$hi;
     i64toi32_i32$3 = $357_1;
     i64toi32_i32$4 = $381$hi;
     i64toi32_i32$2 = $380_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $382_1 = i64toi32_i32$0;
     $382$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     $383_1 = $3_1;
     $383$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$1 = $19_1;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$2 = $13_1;
     $386_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $387$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$2 = $23_1;
     i64toi32_i32$3 = $19_1;
     $390_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $391$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $387$hi;
     i64toi32_i32$3 = $386_1;
     i64toi32_i32$1 = $391$hi;
     i64toi32_i32$5 = $390_1;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $392$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $383$hi;
     i64toi32_i32$2 = $383_1;
     i64toi32_i32$3 = $392$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2_1 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     $396_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $397$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $382$hi;
     i64toi32_i32$5 = $382_1;
     i64toi32_i32$4 = $397$hi;
     i64toi32_i32$2 = $396_1;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$5 = 65536;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     if (!(i64toi32_i32$0 & i64toi32_i32$2 | 0 | i64toi32_i32$5 | 0)) {
      break label$14
     }
     $6_1 = $6_1 + 1 | 0;
     break label$13;
    }
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$1 = $11_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $266_1 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
     $266_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $266_1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $267_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $267_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $407_1 = $267_1;
    $407$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $268_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $268_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $409$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $407$hi;
    i64toi32_i32$1 = $407_1;
    i64toi32_i32$0 = $409$hi;
    i64toi32_i32$2 = $268_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $1_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $270_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $270_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $412_1 = $270_1;
    $412$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $271_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $271_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $414$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $412$hi;
    i64toi32_i32$1 = $412_1;
    i64toi32_i32$0 = $414$hi;
    i64toi32_i32$2 = $271_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$5 = $11_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $272_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $272_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $11_1 = $272_1;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    $418_1 = $3_1;
    $418$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $273_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $273_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $420$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $418$hi;
    i64toi32_i32$1 = $418_1;
    i64toi32_i32$0 = $420$hi;
    i64toi32_i32$2 = $273_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$0;
   }
   label$15 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$5 = $14_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $14_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $14$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   label$16 : {
    label$17 : {
     if (($6_1 | 0) > (0 | 0)) {
      break label$17
     }
     label$18 : {
      $7_1 = 1 - $6_1 | 0;
      if ($7_1 >>> 0 < 128 >>> 0) {
       break label$18
      }
      i64toi32_i32$1 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $4$hi;
     $6_1 = $6_1 + 127 | 0;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$5 = $4$hi;
     $69($5_1 + 48 | 0 | 0, $11_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $6_1 | 0);
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$1 = $1$hi;
     $69($5_1 + 32 | 0 | 0, $2_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $6_1 | 0);
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$5 = $4$hi;
     $70($5_1 + 16 | 0 | 0, $11_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $7_1 | 0);
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$1 = $1$hi;
     $70($5_1 | 0, $2_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $454_1 = i64toi32_i32$1;
     $454$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
     $456_1 = i64toi32_i32$5;
     $456$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $454$hi;
     i64toi32_i32$0 = $454_1;
     i64toi32_i32$5 = $456$hi;
     i64toi32_i32$2 = $456_1;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
     $457_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $457$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
     $459_1 = i64toi32_i32$5;
     $459$hi = i64toi32_i32$0;
     i64toi32_i32$1 = (i64toi32_i32$1 + 48 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $463_1 = i64toi32_i32$0;
     $463$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $459$hi;
     i64toi32_i32$1 = $459_1;
     i64toi32_i32$0 = $463$hi;
     i64toi32_i32$2 = $463_1;
     i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     $465_1 = (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$5 = 0;
     $466$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $457$hi;
     i64toi32_i32$2 = $457_1;
     i64toi32_i32$0 = $466$hi;
     i64toi32_i32$1 = $465_1;
     i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     $11_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$5 = ($5_1 + 32 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $471_1 = i64toi32_i32$0;
     $471$hi = i64toi32_i32$2;
     i64toi32_i32$5 = ($5_1 + 16 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $475_1 = i64toi32_i32$2;
     $475$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $471$hi;
     i64toi32_i32$5 = $471_1;
     i64toi32_i32$2 = $475$hi;
     i64toi32_i32$1 = $475_1;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $5_1 + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$2;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$5;
     $2$hi = i64toi32_i32$2;
     break label$16;
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $274_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $274_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $484$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    $486_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $486$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $484$hi;
    i64toi32_i32$5 = $274_1;
    i64toi32_i32$2 = $486$hi;
    i64toi32_i32$1 = $486_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $1_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $1$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$1 = $14_1;
   i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $14_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $14$hi = i64toi32_i32$5;
   label$19 : {
    i64toi32_i32$5 = $11$hi;
    $492_1 = !($11_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = -1;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $275_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $276_1 = 0
      } else {
       $276_1 = 1
      }
      $278_1 = $276_1;
     } else {
      $278_1 = 0
     }
     $275_1 = $278_1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $492_1 : $275_1) {
     break label$19
    }
    i64toi32_i32$1 = $14$hi;
    $498_1 = $14_1;
    $498$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $1_1 = i64toi32_i32$4;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$5 = $2_1;
    $503_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$1 = 0;
    $504$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $498$hi;
    i64toi32_i32$5 = $498_1;
    i64toi32_i32$3 = $504$hi;
    i64toi32_i32$0 = $503_1;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14_1 = i64toi32_i32$2;
    $14$hi = i64toi32_i32$4;
    break label$1;
   }
   label$20 : {
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    $508_1 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
    $508$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$1 = $508$hi;
    i64toi32_i32$0 = $508_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) | 0) {
     break label$20
    }
    i64toi32_i32$5 = $2$hi;
    $1_1 = $2_1;
    $1$hi = i64toi32_i32$5;
    break label$1;
   }
   i64toi32_i32$5 = $14$hi;
   $512_1 = $14_1;
   $512$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $515_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $515$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = $515$hi;
   i64toi32_i32$4 = $515_1;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$3;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$4 = $2_1;
   $519_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $520$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $512$hi;
   i64toi32_i32$4 = $512_1;
   i64toi32_i32$2 = $520$hi;
   i64toi32_i32$5 = $519_1;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $14_1 = i64toi32_i32$0;
   $14$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$4 = $0_1;
  HEAP32[i64toi32_i32$4 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $14$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $14_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $5_1 + 96 | 0;
 }
 
 function $115() {
  return 0 | 0;
 }
 
 function $116() {
  return 0 | 0;
 }
 
 function $117($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $7_1 = 0, $5_1 = 0, $9$hi = 0, $9_1 = 0, $10$hi = 0, $11$hi = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$6 = 0, $12$hi = 0, $8_1 = 0, $136_1 = 0, $137_1 = 0, $138_1 = 0, $139_1 = 0, $140_1 = 0, $141_1 = 0, $142_1 = 0, $143_1 = 0, $144_1 = 0, $12_1 = 0, $145_1 = 0, $146_1 = 0, $147_1 = 0, $148_1 = 0, $149_1 = 0, $150_1 = 0, $154_1 = 0, $155_1 = 0, $156_1 = 0, $157_1 = 0, $158_1 = 0, $159_1 = 0, $21_1 = 0, $27_1 = 0, $28$hi = 0, $32_1 = 0, $39_1 = 0, $43_1 = 0, $44$hi = 0, $48_1 = 0, $53_1 = 0, $55_1 = 0, $63_1 = 0, $65_1 = 0, $73_1 = 0, $73$hi = 0, $79_1 = 0, $79$hi = 0, $83_1 = 0, $83$hi = 0, $93_1 = 0, $93$hi = 0, $121_1 = 0, $124_1 = 0, $151_1 = 0, $152_1 = 0, $152$hi = 0, $153_1 = 0, $153$hi = 0, $160$hi = 0, $163$hi = 0, $183_1 = 0, $184_1 = 0, $184$hi = 0, $185_1 = 0, $185$hi = 0, $192$hi = 0, $195$hi = 0, $208_1 = 0, $208$hi = 0, $210$hi = 0, $214_1 = 0, $214$hi = 0, $216$hi = 0, $242_1 = 0, $242$hi = 0, $244_1 = 0, $244$hi = 0, $248_1 = 0, $248$hi = 0, $250_1 = 0, $251$hi = 0, $269$hi = 0, $272_1 = 0, $273$hi = 0, $282_1 = 0, $283_1 = 0, $283$hi = 0, $284_1 = 0, $284$hi = 0, $291$hi = 0, $294$hi = 0, $309_1 = 0, $309$hi = 0, $315_1 = 0, $316$hi = 0, $322_1 = 0, $322$hi = 0, $324$hi = 0, $325_1 = 0, $325$hi = 0, $327_1 = 0, $327$hi = 0, $354_1 = 0, $354$hi = 0, $356_1 = 0, $356$hi = 0, $360_1 = 0, $360$hi = 0, $362_1 = 0, $363$hi = 0, $369_1 = 0, $369$hi = 0, $371$hi = 0, $375_1 = 0, $375$hi = 0, $378_1 = 0, $378$hi = 0, $379$hi = 0, $386_1 = 0, $386$hi = 0, $390$hi = 0, $394_1 = 0, $395$hi = 0, $400_1 = 0, $400$hi = 0, $408_1 = 0, $409$hi = 0, $411_1 = 0, $411$hi = 0, $417_1 = 0, $418$hi = 0, $422_1 = 0, $423$hi = 0, $426_1 = 0, $426$hi = 0, $432_1 = 0, $433$hi = 0, $437_1 = 0, $438$hi = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $9_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $9$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$4;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     $21_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$5 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $11_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     $27_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $28$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$5 = $28$hi;
     i64toi32_i32$3 = $27_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $10_1 = i64toi32_i32$5;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$1 = 2147418111;
     i64toi32_i32$3 = -1;
     $32_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$1 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $21_1 : $32_1) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$0;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     $39_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $43_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $44$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$3 = $44$hi;
     i64toi32_i32$5 = $43_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $10_1 = i64toi32_i32$3;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$2 = 2147418111;
     i64toi32_i32$5 = -1;
     $48_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$4 = 2147418111;
     i64toi32_i32$2 = -1;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $39_1 : $48_1) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$5 = $1$hi;
     $53_1 = !($1_1 | i64toi32_i32$5 | 0);
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     $55_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $53_1 : $55_1) {
      break label$4
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $63_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$4 = $9_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$5 = 0;
     $65_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) | 0 ? $63_1 : $65_1) {
      break label$5
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4$hi = i64toi32_i32$4;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
     $73_1 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     $73$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = $73$hi;
     i64toi32_i32$2 = $73_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$6
     }
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $79_1 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $79$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$0 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $83_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $83$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $79$hi;
     i64toi32_i32$2 = $79_1;
     i64toi32_i32$5 = $83$hi;
     i64toi32_i32$4 = $83_1;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $6_1 = !(i64toi32_i32$2 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $2_1;
     i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$2;
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1 ? 0 : $1_1;
     i64toi32_i32$1 = i64toi32_i32$1 ? i64toi32_i32$0 : i64toi32_i32$4;
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$2 = $9_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
    $93_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $93$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = $93$hi;
    i64toi32_i32$0 = $93_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$1
    }
    label$7 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$7
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $3_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $4_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $4$hi = i64toi32_i32$5;
     break label$1;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$0 = $9_1;
    i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = $1$hi;
    $3_1 = $1_1;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    $4_1 = $2_1;
    $4$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   $121_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$5 = $11$hi;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$0 = $9_1;
   i64toi32_i32$2 = $11$hi;
   i64toi32_i32$1 = $11_1;
   $124_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = $9_1;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = $11_1;
   $7_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) | 0 ? $121_1 : $124_1;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $1_1;
   i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$0;
   $9_1 = i64toi32_i32$5;
   $9$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$4 ? $4_1 : $2_1;
   i64toi32_i32$4 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$5;
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $10_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $10$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = i64toi32_i32$5 ? $2_1 : $4_1;
   i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$1 : i64toi32_i32$0;
   $2_1 = i64toi32_i32$2;
   $2$hi = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $136_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $136_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
   }
   $8_1 = $136_1 & 32767 | 0;
   label$8 : {
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $137_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $137_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
    }
    $6_1 = $137_1 & 32767 | 0;
    if ($6_1) {
     break label$8
    }
    $151_1 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $9$hi;
    $152_1 = $9_1;
    $152$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $153_1 = $10_1;
    $153$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $10$hi;
    $6_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$1 = i64toi32_i32$0 ? $9_1 : $10_1;
    i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $138_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $138_1 = i64toi32_i32$5
    }
    $160$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $163$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $160$hi;
    i64toi32_i32$1 = $138_1;
    i64toi32_i32$2 = $163$hi;
    i64toi32_i32$5 = $6_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $6_1 = i64toi32_i32$4;
    i64toi32_i32$3 = $152$hi;
    i64toi32_i32$1 = $153$hi;
    $69($151_1 | 0, $152_1 | 0, i64toi32_i32$3 | 0, $153_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $6_1 = 16 - i64toi32_i32$4 | 0;
    i64toi32_i32$0 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$3;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$3;
    $9$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$5 = i64toi32_i32$2 ? $1_1 : $3_1;
   i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$1 : i64toi32_i32$3;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   $4$hi = i64toi32_i32$5;
   label$9 : {
    if ($8_1) {
     break label$9
    }
    $183_1 = $5_1 + 80 | 0;
    i64toi32_i32$5 = $3$hi;
    $184_1 = $3_1;
    $184$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    $185_1 = $4_1;
    $185$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $4$hi;
    $7_1 = !($4_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = i64toi32_i32$3 ? $3_1 : $4_1;
    i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$2;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $139_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $139_1 = i64toi32_i32$5
    }
    $192$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $195$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $192$hi;
    i64toi32_i32$1 = $139_1;
    i64toi32_i32$0 = $195$hi;
    i64toi32_i32$5 = $7_1 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $7_1 = i64toi32_i32$2;
    i64toi32_i32$4 = $184$hi;
    i64toi32_i32$1 = $185$hi;
    $69($183_1 | 0, $184_1 | 0, i64toi32_i32$4 | 0, $185_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $8_1 = 16 - i64toi32_i32$2 | 0;
    i64toi32_i32$3 = $5_1 + 88 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $140_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $140_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   $208_1 = $140_1;
   $208$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $141_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $141_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
   }
   $210$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $208$hi;
   i64toi32_i32$4 = $208_1;
   i64toi32_i32$1 = $210$hi;
   i64toi32_i32$5 = $141_1;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = 524288;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $4_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $142_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $142_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $214_1 = $142_1;
   $214$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $9$hi;
   i64toi32_i32$4 = $9_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $143_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $143_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $216$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $214$hi;
   i64toi32_i32$3 = $214_1;
   i64toi32_i32$4 = $216$hi;
   i64toi32_i32$5 = $143_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $1_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    $144_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
    $144_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
   }
   $3_1 = $144_1;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$4 = $11_1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $10_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $10$hi = i64toi32_i32$1;
   label$10 : {
    $7_1 = $6_1 - $8_1 | 0;
    if (!$7_1) {
     break label$10
    }
    label$11 : {
     if ($7_1 >>> 0 <= 127 >>> 0) {
      break label$11
     }
     i64toi32_i32$1 = 0;
     $4_1 = 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $3_1 = 1;
     $3$hi = i64toi32_i32$1;
     break label$10;
    }
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$4 = $4$hi;
    $69($5_1 + 64 | 0 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 128 - $7_1 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    $70($5_1 + 48 | 0 | 0, $3_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
    $242_1 = i64toi32_i32$1;
    $242$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $244_1 = i64toi32_i32$4;
    $244$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 64 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $248_1 = i64toi32_i32$1;
    $248$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $244$hi;
    i64toi32_i32$3 = $244_1;
    i64toi32_i32$1 = $248$hi;
    i64toi32_i32$5 = $248_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $250_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $251$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $242$hi;
    i64toi32_i32$5 = $242_1;
    i64toi32_i32$1 = $251$hi;
    i64toi32_i32$3 = $250_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $3_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$4 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$1 = 524288;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $12_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$5 = $9_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 3;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    $145_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $145_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
   }
   $2_1 = $145_1;
   $2$hi = i64toi32_i32$4;
   label$12 : {
    label$13 : {
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
      $146_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $147_1 = 0
       } else {
        $147_1 = 1
       }
       $148_1 = $147_1;
      } else {
       $148_1 = 0
      }
      $146_1 = $148_1;
     }
     if ($146_1) {
      break label$13
     }
     label$14 : {
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$1 = $2$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$4 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
      $1_1 = i64toi32_i32$0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$2 = $4$hi;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$1 = $12_1;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$5 = $4_1;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
      $269$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$5 = $3_1;
      $272_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
      i64toi32_i32$2 = 0;
      $273$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $269$hi;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$0 = $273$hi;
      i64toi32_i32$1 = $272_1;
      i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
      i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
      $4_1 = i64toi32_i32$3;
      $4$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $1$hi;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$5 = $4$hi;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      if (!!(i64toi32_i32$2 | i64toi32_i32$1 | 0 | i64toi32_i32$5 | 0)) {
       break label$14
      }
      i64toi32_i32$5 = 0;
      $3_1 = 0;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      $4_1 = 0;
      $4$hi = i64toi32_i32$5;
      break label$1;
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$4 = $4_1;
     i64toi32_i32$2 = 524287;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$12
     }
     $282_1 = $5_1 + 32 | 0;
     i64toi32_i32$4 = $1$hi;
     $283_1 = $1_1;
     $283$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     $284_1 = $4_1;
     $284$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $4$hi;
     $7_1 = !($4_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$2 = i64toi32_i32$0 ? $1_1 : $4_1;
     i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$4 : i64toi32_i32$5;
     i64toi32_i32$4 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) == (32 | 0)) {
      $149_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $149_1 = i64toi32_i32$4
     }
     $291$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $294$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $291$hi;
     i64toi32_i32$2 = $149_1;
     i64toi32_i32$1 = $294$hi;
     i64toi32_i32$4 = $7_1 << 6 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $7_1 = i64toi32_i32$5 + -12 | 0;
     i64toi32_i32$3 = $283$hi;
     i64toi32_i32$2 = $284$hi;
     $69($282_1 | 0, $283_1 | 0, i64toi32_i32$3 | 0, $284_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0);
     $6_1 = $6_1 - $7_1 | 0;
     i64toi32_i32$0 = $5_1 + 40 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$2;
     break label$12;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $12$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$4 = $12_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $309_1 = i64toi32_i32$1;
    $309$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $1_1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $3_1;
    $315_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$5 = 0;
    $316$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $309$hi;
    i64toi32_i32$4 = $309_1;
    i64toi32_i32$1 = $316$hi;
    i64toi32_i32$2 = $315_1;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$4 = 1048576;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    if (!(i64toi32_i32$5 & i64toi32_i32$2 | 0 | i64toi32_i32$4 | 0)) {
     break label$12
    }
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $150_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $150_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    $322_1 = $150_1;
    $322$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     $154_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
     $154_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    }
    $324$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $322$hi;
    i64toi32_i32$5 = $322_1;
    i64toi32_i32$4 = $324$hi;
    i64toi32_i32$2 = $154_1;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $325_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $325$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
    $327_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $327$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $325$hi;
    i64toi32_i32$4 = $325_1;
    i64toi32_i32$3 = $327$hi;
    i64toi32_i32$2 = $327_1;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $1_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$3;
    $6_1 = $6_1 + 1 | 0;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $155_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
     $155_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
    }
    $4_1 = $155_1;
    $4$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$3 = $11_1;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
   $2_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $2$hi = i64toi32_i32$5;
   label$15 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$3;
    break label$1;
   }
   $7_1 = 0;
   label$16 : {
    label$17 : {
     if (($6_1 | 0) <= (0 | 0)) {
      break label$17
     }
     $7_1 = $6_1;
     break label$16;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$4 = $4$hi;
    $69($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$4 | 0, $6_1 + 127 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    $70($5_1 | 0, $1_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $354_1 = i64toi32_i32$3;
    $354$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
    $356_1 = i64toi32_i32$4;
    $356$hi = i64toi32_i32$3;
    i64toi32_i32$5 = (i64toi32_i32$5 + 16 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $360_1 = i64toi32_i32$3;
    $360$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $356$hi;
    i64toi32_i32$5 = $356_1;
    i64toi32_i32$3 = $360$hi;
    i64toi32_i32$2 = $360_1;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 0;
    $362_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$4 = 0;
    $363$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $354$hi;
    i64toi32_i32$2 = $354_1;
    i64toi32_i32$3 = $363$hi;
    i64toi32_i32$5 = $362_1;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    $1_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$4 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $156_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $156_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $369_1 = $156_1;
   $369$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $157_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
    $157_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $371$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $369$hi;
   i64toi32_i32$3 = $369_1;
   i64toi32_i32$2 = $371$hi;
   i64toi32_i32$5 = $157_1;
   i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    $158_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
    $158_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
   }
   $375_1 = $158_1;
   $375$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $159_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $159_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$3 = $159_1;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
   $378_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $378$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $375$hi;
   i64toi32_i32$4 = $375_1;
   i64toi32_i32$3 = $378$hi;
   i64toi32_i32$5 = $378_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $379$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $379$hi;
   i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $4_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $1$hi;
   $6_1 = $1_1 & 7 | 0;
   label$18 : {
    label$19 : {
     label$20 : {
      switch ($115() | 0 | 0) {
      case 0:
       i64toi32_i32$4 = $4$hi;
       $386_1 = $4_1;
       $386$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = 0;
       $390$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$2 = $390$hi;
       i64toi32_i32$5 = $6_1 >>> 0 > 4 >>> 0;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $1_1 = i64toi32_i32$1;
       $1$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$0 = $1$hi;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$5 = $3_1;
       $394_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $395$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $386$hi;
       i64toi32_i32$5 = $386_1;
       i64toi32_i32$0 = $395$hi;
       i64toi32_i32$3 = $394_1;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $4_1 = i64toi32_i32$2;
       $4$hi = i64toi32_i32$1;
       label$23 : {
        if (($6_1 | 0) == (4 | 0)) {
         break label$23
        }
        i64toi32_i32$1 = $1$hi;
        $3_1 = $1_1;
        $3$hi = i64toi32_i32$1;
        break label$19;
       }
       i64toi32_i32$1 = $4$hi;
       $400_1 = $4_1;
       $400$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $1$hi;
       i64toi32_i32$4 = $1_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$3 = 1;
       i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
       $2_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
       $2$hi = i64toi32_i32$5;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$5 = $2$hi;
       i64toi32_i32$1 = $2_1;
       i64toi32_i32$4 = $1$hi;
       i64toi32_i32$3 = $1_1;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $3_1 = i64toi32_i32$0;
       $3$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $2$hi;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$1 = $2$hi;
       i64toi32_i32$3 = $2_1;
       $408_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $409$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $400$hi;
       i64toi32_i32$3 = $400_1;
       i64toi32_i32$2 = $409$hi;
       i64toi32_i32$1 = $408_1;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $4_1 = i64toi32_i32$4;
       $4$hi = i64toi32_i32$0;
       break label$18;
      case 1:
       i64toi32_i32$0 = $4$hi;
       $411_1 = $4_1;
       $411$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$0 = $2$hi;
       i64toi32_i32$5 = $2_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 0;
       $417_1 = ((i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) & ($6_1 | 0) != (0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $418$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$1 = $3_1;
       i64toi32_i32$0 = $418$hi;
       i64toi32_i32$3 = $417_1;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $1_1 = i64toi32_i32$2;
       $1$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = $1$hi;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       $422_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $423$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $411$hi;
       i64toi32_i32$3 = $411_1;
       i64toi32_i32$4 = $423$hi;
       i64toi32_i32$1 = $422_1;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $4_1 = i64toi32_i32$0;
       $4$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1$hi;
       $3_1 = $1_1;
       $3$hi = i64toi32_i32$2;
       break label$19;
      case 2:
       break label$20;
      default:
       break label$19;
      };
     }
     i64toi32_i32$2 = $4$hi;
     $426_1 = $4_1;
     $426$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     $432_1 = !($2_1 | i64toi32_i32$2 | 0) & ($6_1 | 0) != (0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $433$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$3 = $433$hi;
     i64toi32_i32$1 = $432_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $437_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $438$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $426$hi;
     i64toi32_i32$1 = $426_1;
     i64toi32_i32$0 = $438$hi;
     i64toi32_i32$5 = $437_1;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$4;
    }
    if (!$6_1) {
     break label$1
    }
   }
   $116() | 0;
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$4;
  global$0 = $5_1 + 112 | 0;
 }
 
 function $118($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $5$hi = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $6_1 = 0, $6$hi = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $3_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $33$hi = 0, $37_1 = 0, $50_1 = 0, $50$hi = 0, $54$hi = 0, $63_1 = 0, $63$hi = 0, $64_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$1_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1048576;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = 2145386495;
    i64toi32_i32$3 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 60;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $26_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $26_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $6_1 = $26_1;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 4;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $27_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $27_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    i64toi32_i32$5 = $27_1;
    i64toi32_i32$1 = 1006632960;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$2;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2146435072;
    i64toi32_i32$0 = 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 60;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $28_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $28_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $6_1 = $28_1;
    $6$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 4;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $29_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $29_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    i64toi32_i32$4 = $29_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $5_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $5$hi;
    if (!!($5_1 | i64toi32_i32$3 | 0)) {
     break label$4
    }
    i64toi32_i32$3 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   $32_1 = $2_1;
   i64toi32_i32$3 = $5$hi;
   $33_1 = $5_1;
   $33$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   $37_1 = Math_clz32($4_1) + 32 | 0;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $30_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $30_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$0 = 1;
   i64toi32_i32$5 = 0;
   $3_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0 ? $37_1 : Math_clz32($30_1);
   i64toi32_i32$3 = $33$hi;
   i64toi32_i32$4 = 0;
   $69($32_1 | 0, $33_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, $3_1 + 49 | 0 | 0);
   i64toi32_i32$5 = $2_1 + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $50_1 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
   $50$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 15372 - $3_1 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $31_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $31_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $54$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $50$hi;
   i64toi32_i32$4 = $50_1;
   i64toi32_i32$3 = $54$hi;
   i64toi32_i32$0 = $31_1;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$3;
   $6$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$5 = $4_1;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $63_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  $63$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = $63$hi;
  i64toi32_i32$0 = $63_1;
  i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
  $64_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
  i64toi32_i32$4 = $0_1;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $64_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $119($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    $4_1 = -1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   $4_1 = -1;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $120($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = -1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$3
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $121($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $7_1 = 0, $11_1 = 0, $18$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11_1 = $22_1 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $23_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $11_1 | ($23_1 & 32767 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $20_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$0 = $24_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $122($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $3_1 = 0, $3$hi = 0, $4_1 = 0, $4$hi = 0, $17_1 = 0, $11_1 = 0, $19_1 = 0, $19$hi = 0, $23$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $11_1 = $1_1;
   $1_1 = Math_clz32($1_1);
   i64toi32_i32$1 = 0;
   $69($2_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $1_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $19_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $1_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $17_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19_1;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$3 = $17_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4_1 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $123($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $14_1 = 0, $14$hi = 0, $20_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $14_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $14$hi;
  $117($5_1 | 0, $1_1 | 0, $1$hi | 0, $2_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1_1 = i64toi32_i32$3;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $20_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $1$hi;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $124($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $20_1 = 0, $70_1 = 0, $71_1 = 0, $71$hi = 0, $72_1 = 0, $72$hi = 0, $76$hi = 0, $80_1 = 0, $83_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if (($3_1 | 0) < (16384 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    $114($4_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($4_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    label$3 : {
     if (($3_1 | 0) >= (32767 | 0)) {
      break label$3
     }
     $3_1 = $3_1 + -16383 | 0;
     break label$1;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    $114($4_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3_1 = (($3_1 | 0) < (49149 | 0) ? $3_1 : 49149) + -32766 | 0;
    i64toi32_i32$2 = ($4_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   if (($3_1 | 0) > (-16383 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 65536;
   $114($4_1 + 64 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($4_1 + 64 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   label$4 : {
    if (($3_1 | 0) <= (-32765 | 0)) {
     break label$4
    }
    $3_1 = $3_1 + 16382 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 65536;
   $114($4_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3_1 = (($3_1 | 0) > (-49146 | 0) ? $3_1 : -49146) + 32764 | 0;
   i64toi32_i32$2 = ($4_1 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $70_1 = $4_1;
  i64toi32_i32$0 = $1$hi;
  $71_1 = $1_1;
  $71$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $72_1 = $2_1;
  $72$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $76$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $71$hi;
  i64toi32_i32$2 = $72$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $76$hi;
  $114($70_1 | 0, $71_1 | 0, i64toi32_i32$1 | 0, $72_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $80_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $80_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $83_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $83_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 80 | 0;
 }
 
 function $125($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $53_1 = 0, $54_1 = 0, $6_1 = 0, $9_1 = 0, $9$hi = 0, $12_1 = 0, $12$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $16$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $5_1 = 0, $5$hi = 0, $30$hi = 0, $33_1 = 0, $33$hi = 0, $36$hi = 0, $37_1 = 0, $37$hi = 0, $39_1 = 0, $39$hi = 0, $42_1 = 0, $42$hi = 0, $45$hi = 0, $47_1 = 0, $49$hi = 0, $51_1 = 0, $51$hi = 0, $52_1 = 0;
  $6_1 = $0_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12_1 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13_1 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4_1 = $46_1;
  $4$hi = i64toi32_i32$2;
  $16_1 = $4_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2_1 = $48_1;
  $2$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $2$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20_1 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21_1 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $2$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $2_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33_1 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49_1;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33_1;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21_1;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37_1 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42_1 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39_1;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42_1;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $3_1 = i64toi32_i32$4;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37_1;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53_1;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47_1 = $0_1;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54_1;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51_1;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47_1;
  HEAP32[i64toi32_i32$2 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function $126($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $5_1 = 0, i64toi32_i32$6 = 0, $13$hi = 0, $10$hi = 0, $13_1 = 0, $10_1 = 0, $16$hi = 0, $15$hi = 0, $12$hi = 0, $20$hi = 0, $15_1 = 0, $11$hi = 0, $12_1 = 0, $6_1 = 0, $16_1 = 0, $17$hi = 0, $11_1 = 0, $14$hi = 0, $8_1 = 0, $18$hi = 0, $20_1 = 0, $14_1 = 0, $17_1 = 0, $23$hi = 0, $18_1 = 0, $23_1 = 0, $19_1 = 0, $19$hi = 0, $9_1 = 0, $22_1 = 0, $22$hi = 0, $324_1 = 0, $325_1 = 0, $7_1 = 0, $326_1 = 0, $327_1 = 0, $329_1 = 0, $330_1 = 0, $331_1 = 0, $333_1 = 0, $334_1 = 0, $335_1 = 0, $336_1 = 0, $338_1 = 0, $339_1 = 0, $341_1 = 0, $342_1 = 0, $343_1 = 0, $344_1 = 0, $345_1 = 0, $347_1 = 0, $348_1 = 0, $349_1 = 0, $350_1 = 0, $352_1 = 0, $353_1 = 0, $354_1 = 0, $355_1 = 0, $21_1 = 0, $21$hi = 0, $356_1 = 0, $357_1 = 0, $359_1 = 0, $360_1 = 0, $361_1 = 0, $362_1 = 0, $365_1 = 0, $366_1 = 0, $368_1 = 0, $369_1 = 0, $371_1 = 0, $372_1 = 0, $373_1 = 0, $374_1 = 0, $375_1 = 0, $377_1 = 0, $378_1 = 0, $379_1 = 0, $381_1 = 0, $382_1 = 0, $383_1 = 0, $384_1 = 0, $387_1 = 0, $50_1 = 0, $54_1 = 0, $61_1 = 0, $65_1 = 0, $74_1 = 0, $74$hi = 0, $79_1 = 0, $79$hi = 0, $87_1 = 0, $87$hi = 0, $109_1 = 0, $110_1 = 0, $110$hi = 0, $111_1 = 0, $111$hi = 0, $118$hi = 0, $121$hi = 0, $136_1 = 0, $137_1 = 0, $137$hi = 0, $138_1 = 0, $138$hi = 0, $145$hi = 0, $148$hi = 0, $163_1 = 0, $165_1 = 0, $165$hi = 0, $169$hi = 0, $180_1 = 0, $180$hi = 0, $181$hi = 0, $184_1 = 0, $187_1 = 0, $187$hi = 0, $192$hi = 0, $202_1 = 0, $202$hi = 0, $203$hi = 0, $205_1 = 0, $208_1 = 0, $208$hi = 0, $213$hi = 0, $223_1 = 0, $223$hi = 0, $224$hi = 0, $226_1 = 0, $229_1 = 0, $229$hi = 0, $234$hi = 0, $244_1 = 0, $244$hi = 0, $245$hi = 0, $247_1 = 0, $248_1 = 0, $248$hi = 0, $251_1 = 0, $251$hi = 0, $256$hi = 0, $261_1 = 0, $263$hi = 0, $266_1 = 0, $267_1 = 0, $267$hi = 0, $271_1 = 0, $271$hi = 0, $278_1 = 0, $278$hi = 0, $282_1 = 0, $283$hi = 0, $284$hi = 0, $286_1 = 0, $287$hi = 0, $288$hi = 0, $289$hi = 0, $293$hi = 0, $304_1 = 0, $304$hi = 0, $307_1 = 0, $307$hi = 0, $313$hi = 0, $314_1 = 0, $314$hi = 0, $320_1 = 0, $320$hi = 0, $328_1 = 0, $328$hi = 0, $332_1 = 0, $332$hi = 0, $337_1 = 0, $337$hi = 0, $339$hi = 0, $340_1 = 0, $340$hi = 0, $342$hi = 0, $343$hi = 0, $346_1 = 0, $347$hi = 0, $348$hi = 0, $351_1 = 0, $352$hi = 0, $358_1 = 0, $358$hi = 0, $363_1 = 0, $363$hi = 0, $364_1 = 0, $364$hi = 0, $367_1 = 0, $367$hi = 0, $370_1 = 0, $370$hi = 0, $372$hi = 0, $376_1 = 0, $376$hi = 0, $380_1 = 0, $381$hi = 0, $382$hi = 0, $385_1 = 0, $385$hi = 0, $386_1 = 0, $386$hi = 0, $393_1 = 0, $393$hi = 0, $397_1 = 0, $399_1 = 0, $399$hi = 0, $401$hi = 0, $402_1 = 0, $402$hi = 0, $403_1 = 0, $403$hi = 0, $404_1 = 0, $404$hi = 0, $406$hi = 0, $410_1 = 0, $411$hi = 0, $412_1 = 0, $412$hi = 0, $413_1 = 0, $413$hi = 0, $414_1 = 0, $414$hi = 0, $426_1 = 0, $426$hi = 0, $430_1 = 0, $431_1 = 0, $431$hi = 0, $435_1 = 0, $435$hi = 0, $439_1 = 0, $440$hi = 0, $441$hi = 0, $445_1 = 0, $446$hi = 0, $447_1 = 0, $447$hi = 0, $448_1 = 0, $448$hi = 0, $455_1 = 0, $455$hi = 0, $460_1 = 0, $460$hi = 0, $465_1 = 0, $465$hi = 0, $468_1 = 0, $468$hi = 0, $471_1 = 0, $472$hi = 0, $475_1 = 0, $476$hi = 0, $477$hi = 0, $480_1 = 0, $481$hi = 0, $483$hi = 0, $484_1 = 0, $484$hi = 0, $488_1 = 0, $489$hi = 0, $490_1 = 0, $490$hi = 0, $491_1 = 0, $491$hi = 0, $492_1 = 0, $492$hi = 0, $499_1 = 0, $499$hi = 0, $502_1 = 0, $502$hi = 0, $505_1 = 0, $507$hi = 0, $508_1 = 0, $508$hi = 0, $513_1 = 0, $513$hi = 0, $514_1 = 0, $514$hi = 0, $516$hi = 0, $517$hi = 0, $519_1 = 0, $520$hi = 0, $521$hi = 0, $525_1 = 0, $526$hi = 0, $531$hi = 0, $541$hi = 0, $545_1 = 0, $545$hi = 0, $546$hi = 0, $550_1 = 0, $551$hi = 0, $558_1 = 0, $560_1 = 0, $560$hi = 0, $562$hi = 0, $564_1 = 0, $564$hi = 0, $571$hi = 0, $575_1 = 0, $575$hi = 0, $576$hi = 0, $580_1 = 0, $581$hi = 0, $595_1 = 0, $595$hi = 0, $597$hi = 0, $601$hi = 0, $603_1 = 0, $603$hi = 0, $636_1 = 0, $636$hi = 0, $641_1 = 0, $641$hi = 0, $645$hi = 0, $646_1 = 0, $646$hi = 0, $647_1 = 0, $647$hi = 0, $650_1 = 0, $650$hi = 0, $654_1 = 0, $655$hi = 0, $667_1 = 0, $667$hi = 0, $668_1 = 0, $668$hi = 0, $676_1 = 0, $680_1 = 0, $681$hi = 0, $685_1 = 0, $689_1 = 0, $690$hi = 0, $694_1 = 0, $695$hi = 0, $697_1 = 0, $697$hi = 0, $700_1 = 0, $703_1 = 0, $703$hi = 0, $704_1 = 0, $711_1 = 0, $716_1 = 0, $717$hi = 0, $721_1 = 0, $722$hi = 0, $724_1 = 0, $724$hi = 0, $727_1 = 0, $730_1 = 0, $730$hi = 0, $731_1 = 0, $737_1 = 0, $742_1 = 0, $743$hi = 0, $747_1 = 0, $748$hi = 0, $749$hi = 0;
  $5_1 = global$0 - 336 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $11_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $324_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $324_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $324_1 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $325_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $325_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $325_1 & 32767 | 0;
     if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$0 = $1$hi;
     $50_1 = !($1_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $13$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $13_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     $54_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $50_1 : $54_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $12$hi = i64toi32_i32$0;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$0 = $3$hi;
     $61_1 = !($3_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     $65_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $61_1 : $65_1) {
      break label$5
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $74_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
     $74$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = $74$hi;
     i64toi32_i32$2 = $74_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $79_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $79$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $79$hi;
      i64toi32_i32$0 = $79_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
       break label$7
      }
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 2147450880;
      $12_1 = 0;
      $12$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$3;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
     $87_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $87$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $87$hi;
     i64toi32_i32$0 = $87_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$9 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$9
     }
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = !(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = 2147450880;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$0 = i64toi32_i32$4 ? 0 : $12_1;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
     $12_1 = i64toi32_i32$0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    $8_1 = 0;
    label$11 : {
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$2 = 65535;
     i64toi32_i32$4 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$11
     }
     $109_1 = $5_1 + 320 | 0;
     i64toi32_i32$1 = $1$hi;
     $110_1 = $1_1;
     $110$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     $111_1 = $11_1;
     $111$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $11$hi;
     $8_1 = !($11_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$3 = $8_1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$2 = i64toi32_i32$3 ? $1_1 : $11_1;
     i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$0;
     i64toi32_i32$1 = Math_clz32(i64toi32_i32$4);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (32 | 0)) {
      $326_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $326_1 = i64toi32_i32$1
     }
     $118$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $121$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $118$hi;
     i64toi32_i32$2 = $326_1;
     i64toi32_i32$4 = $121$hi;
     i64toi32_i32$1 = $8_1 << 6 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$0;
     i64toi32_i32$5 = $110$hi;
     i64toi32_i32$2 = $111$hi;
     $69($109_1 | 0, $110_1 | 0, i64toi32_i32$5 | 0, $111_1 | 0, i64toi32_i32$2 | 0, i64toi32_i32$0 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$0 | 0;
     i64toi32_i32$3 = $5_1 + 328 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$2;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$5;
     $1$hi = i64toi32_i32$2;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$5 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$2
    }
    $136_1 = $5_1 + 304 | 0;
    i64toi32_i32$3 = $3$hi;
    $137_1 = $3_1;
    $137$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $10$hi;
    $138_1 = $10_1;
    $138$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    $9_1 = !($10_1 | i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $9_1;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $10_1;
    i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$2;
    i64toi32_i32$3 = Math_clz32(i64toi32_i32$1);
    i64toi32_i32$4 = 0;
    if ((i64toi32_i32$3 | 0) == (32 | 0)) {
     $327_1 = Math_clz32(i64toi32_i32$5) + 32 | 0
    } else {
     $327_1 = i64toi32_i32$3
    }
    $145$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $148$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $145$hi;
    i64toi32_i32$5 = $327_1;
    i64toi32_i32$1 = $148$hi;
    i64toi32_i32$3 = $9_1 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $9_1 = i64toi32_i32$2;
    i64toi32_i32$0 = $137$hi;
    i64toi32_i32$5 = $138$hi;
    $69($136_1 | 0, $137_1 | 0, i64toi32_i32$0 | 0, $138_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $8_1 = (i64toi32_i32$2 + $8_1 | 0) + -16 | 0;
    i64toi32_i32$4 = $5_1 + 312 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$5;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$5;
   }
   $163_1 = $5_1 + 288 | 0;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 49;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $329_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    $329_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $165_1 = $329_1;
   $165$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$5 = $10_1;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $14_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $14$hi = i64toi32_i32$4;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 15;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    $330_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $330_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
   }
   $169$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $165$hi;
   i64toi32_i32$4 = $165_1;
   i64toi32_i32$0 = $169$hi;
   i64toi32_i32$3 = $330_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $2_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 1963258675;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = 0;
   $125($163_1 | 0, $2_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$5 = ($5_1 + 288 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $180_1 = i64toi32_i32$3;
   $180$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $180$hi;
   i64toi32_i32$2 = $180_1;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
   $181$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $181$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = 0;
   $125($5_1 + 272 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $184_1 = $5_1 + 256 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $331_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $331_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $187_1 = $331_1;
   $187$hi = i64toi32_i32$2;
   i64toi32_i32$0 = ($5_1 + 272 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $333_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $333_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $192$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $187$hi;
   i64toi32_i32$5 = $187_1;
   i64toi32_i32$0 = $192$hi;
   i64toi32_i32$1 = $333_1;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   $125($184_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = ($5_1 + 256 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $202_1 = i64toi32_i32$1;
   $202$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $202$hi;
   i64toi32_i32$0 = $202_1;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
   $203$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $203$hi;
   i64toi32_i32$0 = 0;
   $125($5_1 + 240 | 0 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $205_1 = $5_1 + 224 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 63;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $334_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $334_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
   }
   $208_1 = $334_1;
   $208$hi = i64toi32_i32$0;
   i64toi32_i32$2 = ($5_1 + 240 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $335_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
    $335_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $213$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $208$hi;
   i64toi32_i32$5 = $208_1;
   i64toi32_i32$2 = $213$hi;
   i64toi32_i32$4 = $335_1;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$4 = 0;
   $125($205_1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$5 = ($5_1 + 224 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $223_1 = i64toi32_i32$4;
   $223$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $223$hi;
   i64toi32_i32$2 = $223_1;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
   $224$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $224$hi;
   i64toi32_i32$2 = 0;
   $125($5_1 + 208 | 0 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $226_1 = $5_1 + 192 | 0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 208 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 212 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 63;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $336_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $336_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
   }
   $229_1 = $336_1;
   $229$hi = i64toi32_i32$2;
   i64toi32_i32$0 = ($5_1 + 208 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $338_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $338_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $234$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $229$hi;
   i64toi32_i32$5 = $229_1;
   i64toi32_i32$0 = $234$hi;
   i64toi32_i32$3 = $338_1;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $4_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = 0;
   $125($226_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$5 = ($5_1 + 192 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $244_1 = i64toi32_i32$3;
   $244$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $244$hi;
   i64toi32_i32$0 = $244_1;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
   $245$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $245$hi;
   i64toi32_i32$0 = 0;
   $125($5_1 + 176 | 0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $247_1 = $5_1 + 160 | 0;
   i64toi32_i32$0 = $2$hi;
   $248_1 = $2_1;
   $248$hi = i64toi32_i32$0;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $339_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $339_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $251_1 = $339_1;
   $251$hi = i64toi32_i32$0;
   i64toi32_i32$2 = ($5_1 + 176 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $341_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $341_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $256$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $251$hi;
   i64toi32_i32$5 = $251_1;
   i64toi32_i32$2 = $256$hi;
   i64toi32_i32$1 = $341_1;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4_1 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $248$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$1 = 0;
   $125($247_1 | 0, $248_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   $261_1 = $5_1 + 144 | 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    $342_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
    $342_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
   }
   $263$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $263$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = 0;
   $125($261_1 | 0, $342_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
   $266_1 = $5_1 + 112 | 0;
   i64toi32_i32$4 = i64toi32_i32$1;
   $267_1 = $4_1;
   $267$hi = i64toi32_i32$4;
   i64toi32_i32$0 = ($5_1 + 160 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $271_1 = i64toi32_i32$4;
   $271$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$1;
   $10$hi = i64toi32_i32$4;
   i64toi32_i32$0 = (i64toi32_i32$0 + 144 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $278_1 = i64toi32_i32$4;
   $278$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$0 = $10_1;
   i64toi32_i32$4 = $278$hi;
   i64toi32_i32$2 = $278_1;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2_1 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $10$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$2 = $10_1;
   $282_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $283$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $271$hi;
   i64toi32_i32$2 = $271_1;
   i64toi32_i32$3 = $283$hi;
   i64toi32_i32$0 = $282_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $284$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 1;
   $286_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $287$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $284$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$5 = $287$hi;
   i64toi32_i32$2 = $286_1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $288$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = $288$hi;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
   $289$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $267$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = $289$hi;
   i64toi32_i32$2 = 0;
   $125($266_1 | 0, $267_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0);
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $293$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $293$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = 0;
   $125($5_1 + 128 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   $6_1 = $8_1 + ($7_1 - $6_1 | 0) | 0;
   label$12 : {
    label$13 : {
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $343_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $343_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $16_1 = $343_1;
     $16$hi = i64toi32_i32$3;
     $304_1 = $16_1;
     $304$hi = i64toi32_i32$3;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 128 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 132 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $344_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $344_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $307_1 = $344_1;
     $307$hi = i64toi32_i32$3;
     i64toi32_i32$1 = ($5_1 + 128 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$3;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $345_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $345_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $313$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $307$hi;
     i64toi32_i32$2 = $307_1;
     i64toi32_i32$1 = $313$hi;
     i64toi32_i32$5 = $345_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $314_1 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $314$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $304$hi;
     i64toi32_i32$3 = $304_1;
     i64toi32_i32$2 = $314$hi;
     i64toi32_i32$5 = $314_1;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $13_1 = i64toi32_i32$4;
     $13$hi = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = -13927;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $18_1 = i64toi32_i32$2;
     $18$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $347_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $347_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $2_1 = $347_1;
     $2$hi = i64toi32_i32$1;
     $320_1 = $2_1;
     $320$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$0 = 65536;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $19_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $19_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 31;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $348_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $348_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     i64toi32_i32$0 = $348_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
     $4_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $320$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = __wasm_i64_mul($320_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $20_1 = i64toi32_i32$0;
     $20$hi = i64toi32_i32$1;
     $328_1 = i64toi32_i32$0;
     $328$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 31;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $349_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      $349_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
     }
     i64toi32_i32$1 = $349_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = -1;
     i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
     $10_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     $10$hi = i64toi32_i32$4;
     $332_1 = $10_1;
     $332$hi = i64toi32_i32$4;
     i64toi32_i32$0 = ($5_1 + 112 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $350_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $350_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
     }
     $337_1 = $350_1;
     $337$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$1 = $15_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $352_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $352_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $339$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $337$hi;
     i64toi32_i32$4 = $337_1;
     i64toi32_i32$1 = $339$hi;
     i64toi32_i32$5 = $352_1;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $340_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $340$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$0 = $17_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $353_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      $353_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $342$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $340$hi;
     i64toi32_i32$1 = $340_1;
     i64toi32_i32$0 = $342$hi;
     i64toi32_i32$5 = $353_1;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $343$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$4 = $13_1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$5 = $16_1;
     $346_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $347$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $343$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$2 = $347$hi;
     i64toi32_i32$1 = $346_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $348$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$4 = $18_1;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$1 = $13_1;
     $351_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $352$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $348$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$3 = $352$hi;
     i64toi32_i32$5 = $351_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$1 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $354_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      $354_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
     }
     $13_1 = $354_1;
     $13$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $332$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = __wasm_i64_mul($332_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $358_1 = i64toi32_i32$0;
     $358$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $328$hi;
     i64toi32_i32$2 = $328_1;
     i64toi32_i32$0 = $358$hi;
     i64toi32_i32$5 = $358_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$5 = $20_1;
     i64toi32_i32$4 = 0;
     $363_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     $363$hi = i64toi32_i32$4;
     i64toi32_i32$4 = i64toi32_i32$3;
     $364_1 = i64toi32_i32$1;
     $364$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $15_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $15_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
     $15$hi = i64toi32_i32$3;
     $367_1 = $15_1;
     $367$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $355_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
      $355_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $21_1 = $355_1;
     $21$hi = i64toi32_i32$5;
     $370_1 = $21_1;
     $370$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $356_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $356_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $372$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $370$hi;
     i64toi32_i32$5 = $370_1;
     i64toi32_i32$3 = $372$hi;
     i64toi32_i32$2 = $356_1;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
     $11_1 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $367$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = __wasm_i64_mul($367_1 | 0, i64toi32_i32$5 | 0, $11_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $376_1 = i64toi32_i32$4;
     $376$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $364$hi;
     i64toi32_i32$3 = $364_1;
     i64toi32_i32$4 = $376$hi;
     i64toi32_i32$2 = $376_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $17_1 = i64toi32_i32$0;
     $17$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$2 = $16_1;
     $380_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $381$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $363$hi;
     i64toi32_i32$2 = $363_1;
     i64toi32_i32$1 = $381$hi;
     i64toi32_i32$3 = $380_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $382$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $385_1 = i64toi32_i32$2;
     $385$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $382$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $385$hi;
     i64toi32_i32$3 = $385_1;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $386_1 = i64toi32_i32$1;
     $386$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $20_1 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$4 | 0, $13_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $393_1 = i64toi32_i32$5;
     $393$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $20$hi;
     i64toi32_i32$0 = $20_1;
     i64toi32_i32$5 = $393$hi;
     i64toi32_i32$3 = $393_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $16_1 = i64toi32_i32$2;
     $16$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$3 = $20_1;
     $397_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = $397_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $357_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
      $357_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $399_1 = $357_1;
     $399$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $359_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      $359_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
     }
     $401$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $399$hi;
     i64toi32_i32$1 = $399_1;
     i64toi32_i32$4 = $401$hi;
     i64toi32_i32$0 = $359_1;
     i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
     $402_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $402$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $386$hi;
     i64toi32_i32$3 = $386_1;
     i64toi32_i32$1 = $402$hi;
     i64toi32_i32$0 = $402_1;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $403_1 = i64toi32_i32$5;
     $403$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $17$hi;
     $404_1 = $17_1;
     $404$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      $360_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
      $360_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     }
     $406$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $404$hi;
     i64toi32_i32$2 = $404_1;
     i64toi32_i32$4 = $406$hi;
     i64toi32_i32$0 = $360_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$0 = $17_1;
     $410_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $411$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $403$hi;
     i64toi32_i32$0 = $403_1;
     i64toi32_i32$5 = $411$hi;
     i64toi32_i32$2 = $410_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $412_1 = i64toi32_i32$4;
     $412$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $16$hi;
     $413_1 = $16_1;
     $413$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $15$hi;
     $414_1 = $15_1;
     $414$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $361_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
      $361_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $22_1 = $361_1;
     $22$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $22_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = -2;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $17_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $17$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $414$hi;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$1 = __wasm_i64_mul($414_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $23_1 = i64toi32_i32$1;
     $23$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $18_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     $18$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $11_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $426_1 = i64toi32_i32$0;
     $426$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$3 = $23_1;
     i64toi32_i32$0 = $426$hi;
     i64toi32_i32$2 = $426_1;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $20_1 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $23$hi;
     i64toi32_i32$4 = $20$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$3 = $23$hi;
     i64toi32_i32$2 = $23_1;
     $430_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $431_1 = $430_1;
     $431$hi = i64toi32_i32$1;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $435_1 = i64toi32_i32$4;
     $435$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = $435$hi;
     i64toi32_i32$3 = $435_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $23_1 = i64toi32_i32$0;
     $23$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$5 = $23$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$3 = $20_1;
     $439_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $440$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $431$hi;
     i64toi32_i32$3 = $431_1;
     i64toi32_i32$5 = $440$hi;
     i64toi32_i32$2 = $439_1;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $441$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $413$hi;
     i64toi32_i32$1 = $413_1;
     i64toi32_i32$3 = $441$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $20_1 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$4 = $20$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$2 = $16_1;
     $445_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $446$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $412$hi;
     i64toi32_i32$2 = $412_1;
     i64toi32_i32$4 = $446$hi;
     i64toi32_i32$1 = $445_1;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $447_1 = i64toi32_i32$3;
     $447$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $20$hi;
     $448_1 = $20_1;
     $448$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $16_1 = i64toi32_i32$2;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $455_1 = i64toi32_i32$2;
     $455$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$0 = $16_1;
     i64toi32_i32$2 = $455$hi;
     i64toi32_i32$1 = $455_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $460_1 = i64toi32_i32$0;
     $460$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$0 = $460$hi;
     i64toi32_i32$1 = $460_1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $13_1 = i64toi32_i32$2;
     $13$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$4 | 0, $11_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $465_1 = i64toi32_i32$5;
     $465$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$5 = $465$hi;
     i64toi32_i32$1 = $465_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $15_1 = i64toi32_i32$0;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $362_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      $362_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
     }
     $468_1 = $362_1;
     $468$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$1 = $16_1;
     $471_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $472$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$4 = $4_1;
     $475_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $476$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $472$hi;
     i64toi32_i32$4 = $471_1;
     i64toi32_i32$2 = $476$hi;
     i64toi32_i32$3 = $475_1;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $477$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$1 = $15_1;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$3 = $13_1;
     $480_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $481$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $477$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$0 = $481$hi;
     i64toi32_i32$4 = $480_1;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $365_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $365_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     }
     $483$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $468$hi;
     i64toi32_i32$5 = $468_1;
     i64toi32_i32$1 = $483$hi;
     i64toi32_i32$4 = $365_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $484_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $484$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $448$hi;
     i64toi32_i32$3 = $448_1;
     i64toi32_i32$5 = $484$hi;
     i64toi32_i32$4 = $484_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$4 = $20_1;
     $488_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $489$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $447$hi;
     i64toi32_i32$4 = $447_1;
     i64toi32_i32$2 = $489$hi;
     i64toi32_i32$3 = $488_1;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $490_1 = i64toi32_i32$5;
     $490$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     $491_1 = $4_1;
     $491$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $23$hi;
     $492_1 = $23_1;
     $492$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $2_1 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$4 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $499_1 = i64toi32_i32$4;
     $499$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$4 = $499$hi;
     i64toi32_i32$3 = $499_1;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $10_1 = i64toi32_i32$2;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $366_1 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
      $366_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $502_1 = $366_1;
     $502$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$3 = $2_1;
     $505_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = $505_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $368_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
      $368_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $507$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $502$hi;
     i64toi32_i32$5 = $502_1;
     i64toi32_i32$3 = $507$hi;
     i64toi32_i32$0 = $368_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $508_1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     $508$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $492$hi;
     i64toi32_i32$1 = $492_1;
     i64toi32_i32$5 = $508$hi;
     i64toi32_i32$0 = $508_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $2_1 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$0 = $23_1;
     i64toi32_i32$3 = 0;
     $513_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     $513$hi = i64toi32_i32$3;
     i64toi32_i32$3 = i64toi32_i32$2;
     $514_1 = i64toi32_i32$4;
     $514$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$0 = $15_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
      $369_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
      $369_1 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
     }
     $516$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $514$hi;
     i64toi32_i32$3 = $514_1;
     i64toi32_i32$0 = $516$hi;
     i64toi32_i32$1 = $369_1;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $517$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $517$hi;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2_1;
     $519_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $520$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $513$hi;
     i64toi32_i32$1 = $513_1;
     i64toi32_i32$4 = $520$hi;
     i64toi32_i32$3 = $519_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $521$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $491$hi;
     i64toi32_i32$2 = $491_1;
     i64toi32_i32$1 = $521$hi;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2_1 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     $525_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $526$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $490$hi;
     i64toi32_i32$3 = $490_1;
     i64toi32_i32$0 = $526$hi;
     i64toi32_i32$2 = $525_1;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $4_1 = i64toi32_i32$1;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$3 = 131071;
     i64toi32_i32$2 = -1;
     if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
      break label$13
     }
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$2 = $19_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      $371_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $371_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     }
     $531$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$4 = $531$hi;
     i64toi32_i32$5 = $371_1;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$3 = $21_1;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $19_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $19$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$3 = $14$hi;
     $125($5_1 + 80 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $3_1 | 0, i64toi32_i32$4 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 49;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
      $372_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $372_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     }
     $541$hi = i64toi32_i32$4;
     i64toi32_i32$3 = ($5_1 + 80 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $545_1 = i64toi32_i32$4;
     $545$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $541$hi;
     i64toi32_i32$3 = $372_1;
     i64toi32_i32$4 = $545$hi;
     i64toi32_i32$2 = $545_1;
     i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
     $546$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $5_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 80 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$1;
     $1$hi = i64toi32_i32$3;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     $550_1 = (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$5 = 0;
     $551$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $546$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = $551$hi;
     i64toi32_i32$1 = $550_1;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
     $13_1 = i64toi32_i32$4;
     $13$hi = i64toi32_i32$0;
     $6_1 = $6_1 + 16382 | 0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
     $10_1 = i64toi32_i32$3;
     $10$hi = i64toi32_i32$4;
     break label$12;
    }
    $558_1 = $5_1 + 96 | 0;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $373_1 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
     $373_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
    }
    $560_1 = $373_1;
    $560$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
     $374_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $374_1 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
    }
    $562$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $560$hi;
    i64toi32_i32$5 = $560_1;
    i64toi32_i32$4 = $562$hi;
    i64toi32_i32$1 = $374_1;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    $2_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $2$hi = i64toi32_i32$4;
    $564_1 = $2_1;
    $564$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $375_1 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
     $375_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
    }
    $4_1 = $375_1;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$5 = $564$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$1 = $14$hi;
    $125($558_1 | 0, $564_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$4 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 48;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
     $377_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $377_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    }
    $571$hi = i64toi32_i32$4;
    i64toi32_i32$1 = ($5_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $575_1 = i64toi32_i32$4;
    $575$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $571$hi;
    i64toi32_i32$1 = $377_1;
    i64toi32_i32$4 = $575$hi;
    i64toi32_i32$5 = $575_1;
    i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
    $576$hi = i64toi32_i32$3;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$3;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $580_1 = (i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$0 = 0;
    $581$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $576$hi;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$1 = $581$hi;
    i64toi32_i32$3 = $580_1;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
    $13_1 = i64toi32_i32$4;
    $13$hi = i64toi32_i32$2;
    $6_1 = $6_1 + 16383 | 0;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
    $10_1 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    $22_1 = $1_1;
    $22$hi = i64toi32_i32$4;
   }
   label$14 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$14
    }
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$2 = $12_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $12_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $12$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   label$15 : {
    label$16 : {
     if (($6_1 | 0) < (1 | 0)) {
      break label$16
     }
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$4 = $13_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
      $378_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $378_1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
     }
     $595_1 = $378_1;
     $595$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$0 = $10_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 63;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $379_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      $379_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
     }
     $597$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $595$hi;
     i64toi32_i32$2 = $595_1;
     i64toi32_i32$0 = $597$hi;
     i64toi32_i32$3 = $379_1;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $13_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $13$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = $6_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
      $381_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $381_1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
     }
     $601$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$4 = 65535;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
     $603_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $603$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $601$hi;
     i64toi32_i32$2 = $381_1;
     i64toi32_i32$0 = $603$hi;
     i64toi32_i32$3 = $603_1;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $15_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $15$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$4 = $10_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
      $382_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $382_1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
     }
     $4_1 = $382_1;
     $4$hi = i64toi32_i32$2;
     break label$15;
    }
    label$17 : {
     if (($6_1 | 0) > (-113 | 0)) {
      break label$17
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$4 = $4$hi;
    $70($5_1 + 64 | 0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$2 = $19$hi;
    $69($5_1 + 48 | 0 | 0, $22_1 | 0, i64toi32_i32$4 | 0, $19_1 | 0, i64toi32_i32$2 | 0, $6_1 + 112 | 0 | 0);
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$4;
    i64toi32_i32$0 = (i64toi32_i32$0 + 64 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $15_1 = i64toi32_i32$4;
    $15$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $15$hi;
    $125($5_1 + 32 | 0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $14_1 | 0, i64toi32_i32$4 | 0, $2_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = ($5_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $636_1 = i64toi32_i32$3;
    $636$hi = i64toi32_i32$0;
    i64toi32_i32$4 = ($5_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
     $383_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
     $383_1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
    }
    $641_1 = $383_1;
    $641$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $384_1 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
     $384_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
    }
    $645$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $641$hi;
    i64toi32_i32$4 = $641_1;
    i64toi32_i32$3 = $645$hi;
    i64toi32_i32$2 = $384_1;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $646_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $646$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $636$hi;
    i64toi32_i32$0 = $636_1;
    i64toi32_i32$4 = $646$hi;
    i64toi32_i32$2 = $646_1;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $647_1 = i64toi32_i32$5;
    $647$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
    $650_1 = i64toi32_i32$1;
    $650$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $387_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $387_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $1_1 = $387_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $650$hi;
    i64toi32_i32$0 = $650_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $1_1;
    $654_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$0 = 0;
    $655$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $647$hi;
    i64toi32_i32$2 = $647_1;
    i64toi32_i32$1 = $655$hi;
    i64toi32_i32$3 = $654_1;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    $13_1 = i64toi32_i32$4;
    $13$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$4 = $14$hi;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$0 = $14$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 0;
   $125($5_1 + 16 | 0 | 0, $3_1 | 0, i64toi32_i32$4 | 0, $14_1 | 0, i64toi32_i32$0 | 0, 3 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 0;
   $125($5_1 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $14_1 | 0, i64toi32_i32$5 | 0, 5 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$4 = $15$hi;
   $667_1 = $15_1;
   $667$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   $668_1 = $2_1;
   $668$hi = i64toi32_i32$4;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
   $1_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$3 = $3_1;
   $676_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$0 = $13$hi;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $1_1;
   $680_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$3 = 0;
   $681$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$4 = $13_1;
   i64toi32_i32$0 = $681$hi;
   i64toi32_i32$1 = $680_1;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$5;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$4 = $14$hi;
   i64toi32_i32$1 = $14_1;
   $685_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$4 = $14_1;
   $689_1 = (i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) | 0 ? $676_1 : $685_1;
   i64toi32_i32$1 = 0;
   $690$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $668$hi;
   i64toi32_i32$4 = $668_1;
   i64toi32_i32$3 = $690$hi;
   i64toi32_i32$2 = $689_1;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $3_1 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$2 = $2_1;
   $694_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $695$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $667$hi;
   i64toi32_i32$2 = $667_1;
   i64toi32_i32$5 = $695$hi;
   i64toi32_i32$4 = $694_1;
   i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $2_1 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$0;
   $697_1 = i64toi32_i32$3;
   $697$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$2 = 2147418112;
   i64toi32_i32$4 = 0;
   $700_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
   $703_1 = i64toi32_i32$1;
   $703$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$1 = $703$hi;
   i64toi32_i32$2 = $703_1;
   $704_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$2 = ($5_1 + 16 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$4;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$1 = $2_1;
   $711_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$4 = $2_1;
   $716_1 = $700_1 & ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $704_1 : $711_1) | 0;
   i64toi32_i32$1 = 0;
   $717$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$2 = $717$hi;
   i64toi32_i32$0 = $716_1;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2_1 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$0 = $3_1;
   $721_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $722$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $697$hi;
   i64toi32_i32$0 = $697_1;
   i64toi32_i32$3 = $722$hi;
   i64toi32_i32$4 = $721_1;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $3_1 = i64toi32_i32$2;
   $3$hi = i64toi32_i32$5;
   $724_1 = i64toi32_i32$2;
   $724$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$4 = 0;
   $727_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $730_1 = i64toi32_i32$1;
   $730$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$1 = $730$hi;
   i64toi32_i32$0 = $730_1;
   $731_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$0 = $5_1 + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$1 = $4_1;
   $737_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$4 = $4_1;
   $742_1 = $727_1 & ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) | 0 ? $731_1 : $737_1) | 0;
   i64toi32_i32$1 = 0;
   $743$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$0 = $743$hi;
   i64toi32_i32$5 = $742_1;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$3;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$5 = $2_1;
   $747_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $748$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $724$hi;
   i64toi32_i32$5 = $724_1;
   i64toi32_i32$2 = $748$hi;
   i64toi32_i32$4 = $747_1;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $749$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$3 = $749$hi;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$4 = $12_1;
   i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $12_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $12$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $12$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $12_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $5_1 + 336 | 0;
 }
 
 function $127($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5_1 = i64toi32_i32$2 & -1 | 0;
  i64toi32_i32$2 = $0_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  HEAP32[i64toi32_i32$2 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $128($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $9_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $8_1 = 0, $11_1 = 0, $11$hi = 0, $10_1 = 0, $10$hi = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  i64toi32_i32$0 = 0;
  $10_1 = 0;
  $10$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if ($2_1 >>> 0 > 2 >>> 0) {
     break label$2
    }
    $5_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 << 2 | 0;
    $6_1 = HEAP32[($2_1 + 2396 | 0) >> 2] | 0;
    $7_1 = HEAP32[($2_1 + 2384 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$4;
      }
      $2_1 = $111($1_1 | 0) | 0;
     }
     if ($103($2_1 | 0) | 0) {
      continue label$3
     }
     break label$3;
    };
    $8_1 = 1;
    label$6 : {
     label$7 : {
      switch ($2_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       break label$7;
      default:
       break label$6;
      };
     }
     $8_1 = ($2_1 | 0) == (45 | 0) ? -1 : 1;
     label$8 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$6;
     }
     $2_1 = $111($1_1 | 0) | 0;
    }
    $9_1 = 0;
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 1024 | 0) >> 0] | 0 | 0)) {
         break label$11
        }
        label$13 : {
         if ($9_1 >>> 0 > 6 >>> 0) {
          break label$13
         }
         label$14 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$14
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$13;
         }
         $2_1 = $111($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (8 | 0)) {
         continue label$12
        }
        break label$10;
       };
      }
      label$15 : {
       if (($9_1 | 0) == (3 | 0)) {
        break label$15
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$10
       }
       if ($9_1 >>> 0 < 4 >>> 0) {
        break label$9
       }
       if (!$3_1) {
        break label$9
       }
       if (($9_1 | 0) == (8 | 0)) {
        break label$10
       }
      }
      label$16 : {
       $1_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
       if (!$1_1) {
        break label$16
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      if (!$3_1) {
       break label$10
      }
      if ($9_1 >>> 0 < 4 >>> 0) {
       break label$10
      }
      label$17 : while (1) {
       label$18 : {
        if (!$1_1) {
         break label$18
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       $9_1 = $9_1 + -1 | 0;
       if ($9_1 >>> 0 > 3 >>> 0) {
        continue label$17
       }
       break label$17;
      };
     }
     $112($4_1 | 0, Math_fround(Math_fround(Math_fround($8_1 | 0) * Math_fround(infinity))));
     i64toi32_i32$2 = $4_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$0;
     break label$1;
    }
    label$19 : {
     label$20 : {
      label$21 : {
       if ($9_1) {
        break label$21
       }
       $9_1 = 0;
       label$22 : while (1) {
        if (($2_1 | 32 | 0 | 0) != (HEAP8[($9_1 + 1364 | 0) >> 0] | 0 | 0)) {
         break label$21
        }
        label$23 : {
         if ($9_1 >>> 0 > 1 >>> 0) {
          break label$23
         }
         label$24 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$24
          }
          HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break label$23;
         }
         $2_1 = $111($1_1 | 0) | 0;
        }
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) != (3 | 0)) {
         continue label$22
        }
        break label$20;
       };
      }
      label$25 : {
       switch ($9_1 | 0) {
       case 0:
        label$27 : {
         if (($2_1 | 0) != (48 | 0)) {
          break label$27
         }
         label$28 : {
          label$29 : {
           $9_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if ($9_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$29
           }
           HEAP32[$5_1 >> 2] = $9_1 + 1 | 0;
           $9_1 = HEAPU8[$9_1 >> 0] | 0;
           break label$28;
          }
          $9_1 = $111($1_1 | 0) | 0;
         }
         label$30 : {
          if (($9_1 & -33 | 0 | 0) != (88 | 0)) {
           break label$30
          }
          $129($4_1 + 16 | 0 | 0, $1_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
          i64toi32_i32$2 = $4_1 + 24 | 0;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $11_1 = i64toi32_i32$0;
          $11$hi = i64toi32_i32$1;
          i64toi32_i32$2 = $4_1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
          $10_1 = i64toi32_i32$1;
          $10$hi = i64toi32_i32$0;
          break label$1;
         }
         if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
          break label$27
         }
         HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
        }
        $130($4_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, $7_1 | 0, $6_1 | 0, $8_1 | 0, $3_1 | 0);
        i64toi32_i32$2 = $4_1 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $11_1 = i64toi32_i32$0;
        $11$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
        $10_1 = i64toi32_i32$1;
        $10$hi = i64toi32_i32$0;
        break label$1;
       case 3:
        break label$20;
       default:
        break label$25;
       };
      }
      label$31 : {
       if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
        break label$31
       }
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      }
      HEAP32[($57() | 0) >> 2] = 28;
      break label$19;
     }
     label$32 : {
      label$33 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$33
       }
       HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$32;
      }
      $2_1 = $111($1_1 | 0) | 0;
     }
     label$34 : {
      label$35 : {
       if (($2_1 | 0) != (40 | 0)) {
        break label$35
       }
       $9_1 = 1;
       break label$34;
      }
      i64toi32_i32$0 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$0;
      if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
       break label$1
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
      break label$1;
     }
     label$36 : while (1) {
      label$37 : {
       label$38 : {
        $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$38
        }
        HEAP32[$5_1 >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$37;
       }
       $2_1 = $111($1_1 | 0) | 0;
      }
      $8_1 = $2_1 + -65 | 0;
      label$39 : {
       label$40 : {
        if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
         break label$40
        }
        if ($8_1 >>> 0 < 26 >>> 0) {
         break label$40
        }
        $8_1 = $2_1 + -97 | 0;
        if (($2_1 | 0) == (95 | 0)) {
         break label$40
        }
        if ($8_1 >>> 0 >= 26 >>> 0) {
         break label$39
        }
       }
       $9_1 = $9_1 + 1 | 0;
       continue label$36;
      }
      break label$36;
     };
     i64toi32_i32$0 = 2147450880;
     $11_1 = 0;
     $11$hi = i64toi32_i32$0;
     if (($2_1 | 0) == (41 | 0)) {
      break label$1
     }
     label$41 : {
      $2_1 = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$41
      }
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
     }
     label$42 : {
      if (!$3_1) {
       break label$42
      }
      if (!$9_1) {
       break label$1
      }
      label$43 : while (1) {
       $9_1 = $9_1 + -1 | 0;
       label$44 : {
        if (!$2_1) {
         break label$44
        }
        HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + -1 | 0;
       }
       if ($9_1) {
        continue label$43
       }
       break label$1;
      };
     }
     HEAP32[($57() | 0) >> 2] = 28;
    }
    i64toi32_i32$0 = 0;
    $10_1 = 0;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $110($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   }
   i64toi32_i32$0 = 0;
   $11_1 = 0;
   $11$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $10_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 48 | 0;
 }
 
 function $129($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $6_1 = 0, i64toi32_i32$4 = 0, $7_1 = 0, $16$hi = 0, $19$hi = 0, $16_1 = 0, $19_1 = 0, $15$hi = 0, $17$hi = 0, $14$hi = 0, $15_1 = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $10_1 = 0, $18_1 = 0, $8_1 = 0, $9_1 = 0, $20$hi = 0, $20_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $106_1 = 0, $107_1 = 0, $108_1 = 0, $109_1 = 0, $110_1 = 0, $111_1 = 0, $112_1 = 0, $113_1 = 0, $114_1 = 0, $115_1 = 0, $116_1 = 0, $117_1 = 0, $118_1 = 0, $119_1 = 0, $120_1 = 0, $121_1 = 0, $122_1 = 0, $123_1 = 0, $124_1 = 0, $133_1 = 0, $133$hi = 0, $137_1 = 0, $137$hi = 0, $142_1 = 0, $142$hi = 0, $146_1 = 0, $146$hi = 0, $164_1 = 0, $164$hi = 0, $168_1 = 0, $168$hi = 0, $253$hi = 0, $260$hi = 0, $269_1 = 0, $269$hi = 0, $273_1 = 0, $273$hi = 0, $277_1 = 0, $277$hi = 0, $281_1 = 0, $281$hi = 0, $291_1 = 0, $291$hi = 0, $308_1 = 0, $308$hi = 0, $312_1 = 0, $312$hi = 0, $317_1 = 0, $317$hi = 0, $319_1 = 0, $319$hi = 0, $337$hi = 0, $345_1 = 0, $346_1 = 0, $349$hi = 0, $373_1 = 0, $373$hi = 0, $377_1 = 0, $377$hi = 0, $413_1 = 0, $413$hi = 0, $417_1 = 0, $417$hi = 0, $421_1 = 0, $421$hi = 0, $425_1 = 0, $425$hi = 0, $432_1 = 0, $432$hi = 0, $435_1 = 0, $435$hi = 0, $441_1 = 0, $441$hi = 0, $445_1 = 0, $445$hi = 0, $447_1 = 0, $447$hi = 0, $451_1 = 0, $451$hi = 0, $455_1 = 0, $455$hi = 0, $459_1 = 0, $459$hi = 0, $491_1 = 0, $491$hi = 0, $495_1 = 0, $495$hi = 0, $499_1 = 0, $499$hi = 0, $503_1 = 0, $503$hi = 0;
  $6_1 = global$0 - 432 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
    $7_1 = HEAPU8[$7_1 >> 0] | 0;
    break label$1;
   }
   $7_1 = $111($1_1 | 0) | 0;
  }
  $8_1 = 0;
  i64toi32_i32$0 = 0;
  $14_1 = 0;
  $14$hi = i64toi32_i32$0;
  $9_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if (($7_1 | 0) == (48 | 0)) {
        break label$7
       }
       if (($7_1 | 0) != (46 | 0)) {
        break label$3
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$5
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       break label$4;
      }
      label$8 : {
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$8
       }
       $9_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       continue label$6;
      }
      $9_1 = 1;
      $7_1 = $111($1_1 | 0) | 0;
      continue label$6;
     };
    }
    $7_1 = $111($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $14_1 = 0;
   $14$hi = i64toi32_i32$0;
   if (($7_1 | 0) != (48 | 0)) {
    break label$3
   }
   label$9 : while (1) {
    label$10 : {
     label$11 : {
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$11
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
      $7_1 = HEAPU8[$7_1 >> 0] | 0;
      break label$10;
     }
     $7_1 = $111($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $14_1 = i64toi32_i32$4;
    $14$hi = i64toi32_i32$5;
    if (($7_1 | 0) == (48 | 0)) {
     continue label$9
    }
    break label$9;
   };
   $8_1 = 1;
   $9_1 = 1;
  }
  i64toi32_i32$5 = 1073676288;
  $15_1 = 0;
  $15$hi = i64toi32_i32$5;
  $10_1 = 0;
  i64toi32_i32$5 = 0;
  $16_1 = 0;
  $16$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $17_1 = 0;
  $17$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$5;
  $11_1 = 0;
  i64toi32_i32$5 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$5;
  label$12 : {
   label$13 : {
    label$14 : while (1) {
     $12_1 = $7_1 | 32 | 0;
     label$15 : {
      label$16 : {
       $13_1 = $7_1 + -48 | 0;
       if ($13_1 >>> 0 < 10 >>> 0) {
        break label$16
       }
       label$17 : {
        if (($12_1 + -97 | 0) >>> 0 < 6 >>> 0) {
         break label$17
        }
        if (($7_1 | 0) != (46 | 0)) {
         break label$12
        }
       }
       if (($7_1 | 0) != (46 | 0)) {
        break label$16
       }
       if ($8_1) {
        break label$13
       }
       $8_1 = 1;
       i64toi32_i32$5 = $19$hi;
       $14_1 = $19_1;
       $14$hi = i64toi32_i32$5;
       break label$15;
      }
      $7_1 = ($7_1 | 0) > (57 | 0) ? $12_1 + -87 | 0 : $13_1;
      label$18 : {
       label$19 : {
        i64toi32_i32$5 = $19$hi;
        i64toi32_i32$0 = $19_1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 7;
        if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
         $106_1 = 1
        } else {
         if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
           $107_1 = 0
          } else {
           $107_1 = 1
          }
          $108_1 = $107_1;
         } else {
          $108_1 = 0
         }
         $106_1 = $108_1;
        }
        if ($106_1) {
         break label$19
        }
        $10_1 = $7_1 + ($10_1 << 4 | 0) | 0;
        break label$18;
       }
       label$20 : {
        i64toi32_i32$0 = $19$hi;
        i64toi32_i32$3 = $19_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$2 = 28;
        if ((i64toi32_i32$0 | 0) > (i64toi32_i32$5 | 0)) {
         $109_1 = 1
        } else {
         if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$5 | 0)) {
          if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
           $110_1 = 0
          } else {
           $110_1 = 1
          }
          $111_1 = $110_1;
         } else {
          $111_1 = 0
         }
         $109_1 = $111_1;
        }
        if ($109_1) {
         break label$20
        }
        $113($6_1 + 48 | 0 | 0, $7_1 | 0);
        i64toi32_i32$3 = $18$hi;
        i64toi32_i32$3 = $15$hi;
        i64toi32_i32$3 = $18$hi;
        i64toi32_i32$0 = $15$hi;
        i64toi32_i32$2 = 0;
        i64toi32_i32$5 = 1073414144;
        $114($6_1 + 32 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
        i64toi32_i32$0 = $6_1;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
        $18_1 = i64toi32_i32$5;
        $18$hi = i64toi32_i32$2;
        i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $15_1 = i64toi32_i32$2;
        $15$hi = i64toi32_i32$5;
        i64toi32_i32$0 = $6_1;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
        $133_1 = i64toi32_i32$5;
        $133$hi = i64toi32_i32$2;
        i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $137_1 = i64toi32_i32$2;
        $137$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $18$hi;
        i64toi32_i32$2 = $15$hi;
        i64toi32_i32$0 = $133$hi;
        i64toi32_i32$3 = $137$hi;
        $114($6_1 + 16 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, $133_1 | 0, i64toi32_i32$0 | 0, $137_1 | 0, i64toi32_i32$3 | 0);
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$3 = $17$hi;
        i64toi32_i32$2 = $6_1;
        i64toi32_i32$3 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
        $142_1 = i64toi32_i32$3;
        $142$hi = i64toi32_i32$0;
        i64toi32_i32$2 = ($6_1 + 16 | 0) + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $146_1 = i64toi32_i32$0;
        $146$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$2 = $142$hi;
        i64toi32_i32$5 = $146$hi;
        $117($6_1 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $142_1 | 0, i64toi32_i32$2 | 0, $146_1 | 0, i64toi32_i32$5 | 0);
        i64toi32_i32$0 = $6_1 + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $17_1 = i64toi32_i32$5;
        $17$hi = i64toi32_i32$2;
        i64toi32_i32$0 = $6_1;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $16_1 = i64toi32_i32$2;
        $16$hi = i64toi32_i32$5;
        break label$18;
       }
       if (!$7_1) {
        break label$18
       }
       if ($11_1) {
        break label$18
       }
       i64toi32_i32$5 = $18$hi;
       i64toi32_i32$5 = $15$hi;
       i64toi32_i32$5 = $18$hi;
       i64toi32_i32$2 = $15$hi;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 1073610752;
       $114($6_1 + 80 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$3 = $17$hi;
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$3 = HEAP32[($6_1 + 80 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
       $164_1 = i64toi32_i32$3;
       $164$hi = i64toi32_i32$0;
       i64toi32_i32$2 = ($6_1 + 80 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $168_1 = i64toi32_i32$0;
       $168$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$2 = $164$hi;
       i64toi32_i32$5 = $168$hi;
       $117($6_1 + 64 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, $164_1 | 0, i64toi32_i32$2 | 0, $168_1 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = ($6_1 + 64 | 0) + 8 | 0;
       i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$5;
       $17$hi = i64toi32_i32$2;
       $11_1 = 1;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$2;
       $16$hi = i64toi32_i32$5;
      }
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$0 = $19_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $19_1 = i64toi32_i32$1;
      $19$hi = i64toi32_i32$4;
      $9_1 = 1;
     }
     label$21 : {
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($7_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$21
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
      $7_1 = HEAPU8[$7_1 >> 0] | 0;
      continue label$14;
     }
     $7_1 = $111($1_1 | 0) | 0;
     continue label$14;
    };
   }
   $7_1 = 46;
  }
  label$22 : {
   label$23 : {
    label$24 : {
     label$25 : {
      if ($9_1) {
       break label$25
      }
      label$26 : {
       if (HEAP32[($1_1 + 104 | 0) >> 2] | 0) {
        break label$26
       }
       if ($5_1) {
        break label$23
       }
       break label$24;
      }
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -1 | 0;
      if (!$5_1) {
       break label$24
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -2 | 0;
      if (!$8_1) {
       break label$23
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -3 | 0;
      break label$23;
     }
     label$27 : {
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$5 = $19_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 7;
      if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
       $112_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0) {
         $113_1 = 0
        } else {
         $113_1 = 1
        }
        $114_1 = $113_1;
       } else {
        $114_1 = 0
       }
       $112_1 = $114_1;
      }
      if ($112_1) {
       break label$27
      }
      i64toi32_i32$5 = $19$hi;
      $15_1 = $19_1;
      $15$hi = i64toi32_i32$5;
      label$28 : while (1) {
       $10_1 = $10_1 << 4 | 0;
       i64toi32_i32$5 = $15$hi;
       i64toi32_i32$3 = $15_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $15_1 = i64toi32_i32$2;
       $15$hi = i64toi32_i32$1;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 8;
       if ((i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        continue label$28
       }
       break label$28;
      };
     }
     label$29 : {
      label$30 : {
       label$31 : {
        label$32 : {
         if (($7_1 & -33 | 0 | 0) != (80 | 0)) {
          break label$32
         }
         i64toi32_i32$5 = $131($1_1 | 0, $5_1 | 0) | 0;
         i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
         $15_1 = i64toi32_i32$5;
         $15$hi = i64toi32_i32$1;
         i64toi32_i32$0 = i64toi32_i32$5;
         i64toi32_i32$5 = -2147483648;
         i64toi32_i32$3 = 0;
         if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
          break label$29
         }
         label$33 : {
          if (!$5_1) {
           break label$33
          }
          if (HEAP32[($1_1 + 104 | 0) >> 2] | 0) {
           break label$31
          }
          break label$30;
         }
         i64toi32_i32$0 = 0;
         $16_1 = 0;
         $16$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $110($1_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
         i64toi32_i32$0 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$0;
         break label$22;
        }
        if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
         break label$30
        }
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      i64toi32_i32$0 = 0;
      $15_1 = 0;
      $15$hi = i64toi32_i32$0;
     }
     label$34 : {
      if ($10_1) {
       break label$34
      }
      $118($6_1 + 112 | 0 | 0, +(+($4_1 | 0) * 0.0));
      i64toi32_i32$3 = $6_1 + 120 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$0;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$0;
      break label$22;
     }
     label$35 : {
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$0 = $19$hi;
      i64toi32_i32$4 = $8_1;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$5 = i64toi32_i32$4 ? $14_1 : $19_1;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
      i64toi32_i32$4 = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = 2;
      i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
       $115_1 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
       $115_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      }
      $253$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $253$hi;
      i64toi32_i32$3 = $115_1;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$0 = $15_1;
      i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      i64toi32_i32$5 = i64toi32_i32$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -32;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      $260$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$5 = $260$hi;
      i64toi32_i32$0 = 0 - $3_1 | 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$5 | 0)) {
       $116_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0) {
         $117_1 = 0
        } else {
         $117_1 = 1
        }
        $118_1 = $117_1;
       } else {
        $118_1 = 0
       }
       $116_1 = $118_1;
      }
      if ($116_1) {
       break label$35
      }
      HEAP32[($57() | 0) >> 2] = 68;
      $113($6_1 + 160 | 0 | 0, $4_1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
      $269_1 = i64toi32_i32$2;
      $269$hi = i64toi32_i32$1;
      i64toi32_i32$0 = (i64toi32_i32$0 + 160 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $273_1 = i64toi32_i32$1;
      $273$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $269$hi;
      i64toi32_i32$1 = $273$hi;
      i64toi32_i32$0 = -1;
      i64toi32_i32$5 = 2147418111;
      $114($6_1 + 144 | 0 | 0, $269_1 | 0, i64toi32_i32$2 | 0, $273_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
      $277_1 = i64toi32_i32$5;
      $277$hi = i64toi32_i32$0;
      i64toi32_i32$1 = (i64toi32_i32$1 + 144 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $281_1 = i64toi32_i32$0;
      $281$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $277$hi;
      i64toi32_i32$0 = $281$hi;
      i64toi32_i32$1 = -1;
      i64toi32_i32$2 = 2147418111;
      $114($6_1 + 128 | 0 | 0, $277_1 | 0, i64toi32_i32$5 | 0, $281_1 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$0 = ($6_1 + 128 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$2;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 128 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$2;
      break label$22;
     }
     label$36 : {
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$1 = $3_1 + -226 | 0;
      i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
      $291_1 = i64toi32_i32$1;
      $291$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $19$hi;
      i64toi32_i32$0 = $19_1;
      i64toi32_i32$1 = $291$hi;
      i64toi32_i32$5 = $291_1;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $119_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0) {
         $120_1 = 0
        } else {
         $120_1 = 1
        }
        $121_1 = $120_1;
       } else {
        $121_1 = 0
       }
       $119_1 = $121_1;
      }
      if ($119_1) {
       break label$36
      }
      label$37 : {
       if (($10_1 | 0) <= (-1 | 0)) {
        break label$37
       }
       label$38 : while (1) {
        i64toi32_i32$0 = $16$hi;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$0 = $16$hi;
        i64toi32_i32$2 = $17$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$1 = -1073807360;
        $117($6_1 + 416 | 0 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$2;
        i64toi32_i32$1 = i64toi32_i32$0;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1073610752;
        $7_1 = $120($16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$0 = i64toi32_i32$5;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$5 = $6_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 416 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 420 | 0) >> 2] | 0;
        $308_1 = i64toi32_i32$0;
        $308$hi = i64toi32_i32$2;
        $1_1 = ($7_1 | 0) < (0 | 0);
        i64toi32_i32$3 = $1_1;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $308$hi;
        i64toi32_i32$1 = i64toi32_i32$3 ? $16_1 : $308_1;
        i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$0;
        $312_1 = i64toi32_i32$1;
        $312$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $17$hi;
        i64toi32_i32$3 = ($6_1 + 416 | 0) + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $317_1 = i64toi32_i32$5;
        $317$hi = i64toi32_i32$1;
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$1 = $17$hi;
        i64toi32_i32$5 = $317$hi;
        i64toi32_i32$2 = i64toi32_i32$0 ? $17_1 : $317_1;
        i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$1 : i64toi32_i32$5;
        $319_1 = i64toi32_i32$2;
        $319$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $16$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$0 = $312$hi;
        i64toi32_i32$1 = $319$hi;
        $117($6_1 + 400 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$2 | 0, $312_1 | 0, i64toi32_i32$0 | 0, $319_1 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$2 = $19_1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $19_1 = i64toi32_i32$5;
        $19$hi = i64toi32_i32$4;
        i64toi32_i32$1 = ($6_1 + 400 | 0) + 8 | 0;
        i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $17_1 = i64toi32_i32$4;
        $17$hi = i64toi32_i32$2;
        i64toi32_i32$1 = $6_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 400 | 0) >> 2] | 0;
        i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 404 | 0) >> 2] | 0;
        $16_1 = i64toi32_i32$2;
        $16$hi = i64toi32_i32$4;
        $10_1 = $10_1 << 1 | 0 | ($7_1 | 0) > (-1 | 0) | 0;
        if (($10_1 | 0) > (-1 | 0)) {
         continue label$38
        }
        break label$38;
       };
      }
      label$39 : {
       label$40 : {
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
        $337$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$1 = $19_1;
        i64toi32_i32$2 = $337$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$5 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 32;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $14_1 = i64toi32_i32$2;
        $14$hi = i64toi32_i32$0;
        $7_1 = i64toi32_i32$2;
        $345_1 = (i64toi32_i32$2 | 0) > (0 | 0) ? i64toi32_i32$2 : 0;
        $346_1 = $2_1;
        i64toi32_i32$0 = 0;
        $349$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $14$hi;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$4 = $349$hi;
        i64toi32_i32$3 = $2_1;
        if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
         $122_1 = 1
        } else {
         if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
          if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $123_1 = 0
          } else {
           $123_1 = 1
          }
          $124_1 = $123_1;
         } else {
          $124_1 = 0
         }
         $122_1 = $124_1;
        }
        $7_1 = $122_1 ? $345_1 : $346_1;
        if (($7_1 | 0) < (113 | 0)) {
         break label$40
        }
        $113($6_1 + 384 | 0 | 0, $4_1 | 0);
        i64toi32_i32$3 = $6_1 + 392 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $14_1 = i64toi32_i32$5;
        $14$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $15_1 = 0;
        $15$hi = i64toi32_i32$0;
        i64toi32_i32$3 = $6_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 384 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 388 | 0) >> 2] | 0;
        $18_1 = i64toi32_i32$0;
        $18$hi = i64toi32_i32$5;
        i64toi32_i32$5 = 0;
        $20_1 = 0;
        $20$hi = i64toi32_i32$5;
        break label$39;
       }
       $118($6_1 + 352 | 0 | 0, +(+$1456(+(1.0), 144 - $7_1 | 0 | 0)));
       $113($6_1 + 336 | 0 | 0, $4_1 | 0);
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 352 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 356 | 0) >> 2] | 0;
       $373_1 = i64toi32_i32$5;
       $373$hi = i64toi32_i32$0;
       i64toi32_i32$3 = (i64toi32_i32$3 + 352 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $377_1 = i64toi32_i32$0;
       $377$hi = i64toi32_i32$5;
       i64toi32_i32$3 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 336 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 340 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$5;
       $18$hi = i64toi32_i32$0;
       i64toi32_i32$3 = (i64toi32_i32$3 + 336 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $14_1 = i64toi32_i32$0;
       $14$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $373$hi;
       i64toi32_i32$0 = $377$hi;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$4 = $14$hi;
       $121($6_1 + 368 | 0 | 0, $373_1 | 0, i64toi32_i32$5 | 0, $377_1 | 0, i64toi32_i32$0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $14_1 | 0, i64toi32_i32$4 | 0);
       i64toi32_i32$0 = ($6_1 + 368 | 0) + 8 | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $20_1 = i64toi32_i32$4;
       $20$hi = i64toi32_i32$3;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 368 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 372 | 0) >> 2] | 0;
       $15_1 = i64toi32_i32$3;
       $15$hi = i64toi32_i32$4;
      }
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$5 = 0;
      $7_1 = (($7_1 | 0) < (32 | 0) & ($119($16_1 | 0, i64toi32_i32$4 | 0, $17_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0 | 0) != (0 | 0) | 0) & !($10_1 & 1 | 0) | 0;
      $122($6_1 + 320 | 0 | 0, $10_1 + $7_1 | 0 | 0);
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $14$hi;
      i64toi32_i32$3 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
      $413_1 = i64toi32_i32$5;
      $413$hi = i64toi32_i32$0;
      i64toi32_i32$3 = (i64toi32_i32$3 + 320 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $417_1 = i64toi32_i32$0;
      $417$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$3 = $413$hi;
      i64toi32_i32$4 = $417$hi;
      $114($6_1 + 304 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$0 | 0, $413_1 | 0, i64toi32_i32$3 | 0, $417_1 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 304 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 308 | 0) >> 2] | 0;
      $421_1 = i64toi32_i32$4;
      $421$hi = i64toi32_i32$3;
      i64toi32_i32$0 = (i64toi32_i32$0 + 304 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $425_1 = i64toi32_i32$3;
      $425$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $15$hi;
      i64toi32_i32$4 = $20$hi;
      i64toi32_i32$4 = $421$hi;
      i64toi32_i32$3 = $425$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$5 = $20$hi;
      $117($6_1 + 272 | 0 | 0, $421_1 | 0, i64toi32_i32$4 | 0, $425_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$5 = $16$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$4 = i64toi32_i32$1 ? 0 : $16_1;
      i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$0;
      $432_1 = i64toi32_i32$4;
      $432$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$0 = i64toi32_i32$1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$5 = i64toi32_i32$0 ? 0 : $17_1;
      i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$4;
      $435_1 = i64toi32_i32$5;
      $435$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $18$hi;
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$1 = $432$hi;
      i64toi32_i32$5 = $435$hi;
      i64toi32_i32$0 = $18$hi;
      i64toi32_i32$3 = $14$hi;
      $114($6_1 + 288 | 0 | 0, $432_1 | 0, i64toi32_i32$1 | 0, $435_1 | 0, i64toi32_i32$5 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 288 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 292 | 0) >> 2] | 0;
      $441_1 = i64toi32_i32$3;
      $441$hi = i64toi32_i32$0;
      i64toi32_i32$5 = (i64toi32_i32$5 + 288 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $445_1 = i64toi32_i32$0;
      $445$hi = i64toi32_i32$3;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
      $447_1 = i64toi32_i32$3;
      $447$hi = i64toi32_i32$0;
      i64toi32_i32$5 = (i64toi32_i32$5 + 272 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $451_1 = i64toi32_i32$0;
      $451$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $441$hi;
      i64toi32_i32$0 = $445$hi;
      i64toi32_i32$5 = $447$hi;
      i64toi32_i32$1 = $451$hi;
      $117($6_1 + 256 | 0 | 0, $441_1 | 0, i64toi32_i32$3 | 0, $445_1 | 0, i64toi32_i32$0 | 0, $447_1 | 0, i64toi32_i32$5 | 0, $451_1 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 256 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 260 | 0) >> 2] | 0;
      $455_1 = i64toi32_i32$1;
      $455$hi = i64toi32_i32$5;
      i64toi32_i32$0 = (i64toi32_i32$0 + 256 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $459_1 = i64toi32_i32$5;
      $459$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $15$hi;
      i64toi32_i32$1 = $20$hi;
      i64toi32_i32$1 = $455$hi;
      i64toi32_i32$5 = $459$hi;
      i64toi32_i32$0 = $15$hi;
      i64toi32_i32$3 = $20$hi;
      $123($6_1 + 240 | 0 | 0, $455_1 | 0, i64toi32_i32$1 | 0, $459_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
      label$41 : {
       i64toi32_i32$5 = $6_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$3;
       $16$hi = i64toi32_i32$0;
       i64toi32_i32$5 = (i64toi32_i32$5 + 240 | 0) + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$0;
       $17$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$0 = $17$hi;
       i64toi32_i32$5 = 0;
       i64toi32_i32$1 = 0;
       if ($119($16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0) {
        break label$41
       }
       HEAP32[($57() | 0) >> 2] = 68;
      }
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$1 = $16$hi;
      i64toi32_i32$5 = $17$hi;
      $124($6_1 + 224 | 0 | 0, $16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0);
      i64toi32_i32$0 = ($6_1 + 224 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 224 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 228 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$1;
      $16$hi = i64toi32_i32$5;
      break label$22;
     }
     HEAP32[($57() | 0) >> 2] = 68;
     $113($6_1 + 208 | 0 | 0, $4_1 | 0);
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 212 | 0) >> 2] | 0;
     $491_1 = i64toi32_i32$5;
     $491$hi = i64toi32_i32$1;
     i64toi32_i32$0 = (i64toi32_i32$0 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $495_1 = i64toi32_i32$1;
     $495$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $491$hi;
     i64toi32_i32$1 = $495$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 65536;
     $114($6_1 + 192 | 0 | 0, $491_1 | 0, i64toi32_i32$5 | 0, $495_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] | 0;
     $499_1 = i64toi32_i32$3;
     $499$hi = i64toi32_i32$0;
     i64toi32_i32$1 = (i64toi32_i32$1 + 192 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $503_1 = i64toi32_i32$0;
     $503$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $499$hi;
     i64toi32_i32$0 = $503$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 65536;
     $114($6_1 + 176 | 0 | 0, $499_1 | 0, i64toi32_i32$3 | 0, $503_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$0 = ($6_1 + 176 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$5;
     $19$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 176 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 180 | 0) >> 2] | 0;
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$5;
     break label$22;
    }
    i64toi32_i32$5 = 0;
    $110($1_1 | 0, 0 | 0, i64toi32_i32$5 | 0);
   }
   $118($6_1 + 96 | 0 | 0, +(+($4_1 | 0) * 0.0));
   i64toi32_i32$0 = $6_1 + 104 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $6_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$1;
   $16$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $16$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $19$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $6_1 + 432 | 0;
 }
 
 function $130($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$1 = 0, $7_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $19$hi = 0, i64toi32_i32$0 = 0, $19_1 = 0, $14_1 = 0, $20$hi = 0, $13_1 = 0, $20_1 = 0, $8_1 = 0, $11_1 = 0, $15_1 = 0, $22$hi = 0, $21$hi = 0, $12_1 = 0, $22_1 = 0, $21_1 = 0, $16_1 = 0, $23$hi = 0, $24$hi = 0, $23_1 = 0, $24_1 = 0, $17_1 = 0, $9_1 = 0, $166_1 = 0, $167_1 = 0, $168_1 = 0, $169_1 = 0, $170_1 = 0, $171_1 = 0, $172_1 = 0, $173_1 = 0, $174_1 = 0, $175_1 = 0, $18_1 = 0, $25_1 = 0.0, $10_1 = 0, $128_1 = 0, $236_1 = 0, $236$hi = 0, $240_1 = 0, $240$hi = 0, $242_1 = 0, $242$hi = 0, $246_1 = 0, $246$hi = 0, $256$hi = 0, $265_1 = 0, $265$hi = 0, $269_1 = 0, $269$hi = 0, $273_1 = 0, $273$hi = 0, $277_1 = 0, $277$hi = 0, $287_1 = 0, $287$hi = 0, $296_1 = 0, $296$hi = 0, $300_1 = 0, $300$hi = 0, $304_1 = 0, $304$hi = 0, $308_1 = 0, $308$hi = 0, $357_1 = 0, $357$hi = 0, $361_1 = 0, $361$hi = 0, $363_1 = 0, $363$hi = 0, $367_1 = 0, $367$hi = 0, $386_1 = 0, $386$hi = 0, $390_1 = 0, $390$hi = 0, $392_1 = 0, $392$hi = 0, $396_1 = 0, $396$hi = 0, $407_1 = 0, $407$hi = 0, $411_1 = 0, $411$hi = 0, $413_1 = 0, $413$hi = 0, $417_1 = 0, $417$hi = 0, $445_1 = 0, $445$hi = 0, $449_1 = 0, $449$hi = 0, $451_1 = 0, $451$hi = 0, $455_1 = 0, $455$hi = 0, $465_1 = 0, $465$hi = 0, $469_1 = 0, $469$hi = 0, $471_1 = 0, $471$hi = 0, $475_1 = 0, $475$hi = 0, $514_1 = 0, $590$hi = 0, $592$hi = 0, $600_1 = 0, $600$hi = 0, $646_1 = 0, $648_1 = 0, $742_1 = 0, $742$hi = 0, $746_1 = 0, $746$hi = 0, $748_1 = 0, $748$hi = 0, $752_1 = 0, $752$hi = 0, $771_1 = 0, $771$hi = 0, $775_1 = 0, $775$hi = 0, $817_1 = 0, $879_1 = 0, $879$hi = 0, $883_1 = 0, $883$hi = 0, $902_1 = 0, $902$hi = 0, $906_1 = 0, $906$hi = 0, $924_1 = 0, $924$hi = 0, $928_1 = 0, $928$hi = 0, $965_1 = 0, $965$hi = 0, $969_1 = 0, $969$hi = 0, $988_1 = 0, $988$hi = 0, $992_1 = 0, $992$hi = 0, $1015_1 = 0, $1015$hi = 0, $1019_1 = 0, $1019$hi = 0, $1035_1 = 0, $1035$hi = 0, $1039_1 = 0, $1039$hi = 0, $1053_1 = 0, $1053$hi = 0, $1057_1 = 0, $1057$hi = 0, $1078_1 = 0, $1078$hi = 0, $1082_1 = 0, $1082$hi = 0, $1117_1 = 0, $1117$hi = 0, $1124_1 = 0, $1124$hi = 0;
  $7_1 = global$0 - 8976 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  $9_1 = $4_1 + $3_1 | 0;
  $10_1 = 0 - $9_1 | 0;
  i64toi32_i32$0 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$0;
  $11_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       if (($2_1 | 0) == (48 | 0)) {
        break label$5
       }
       if (($2_1 | 0) != (46 | 0)) {
        break label$1
       }
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$3
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$2;
      }
      label$6 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$6
       }
       $11_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       continue label$4;
      }
      $11_1 = 1;
      $2_1 = $111($1_1 | 0) | 0;
      continue label$4;
     };
    }
    $2_1 = $111($1_1 | 0) | 0;
   }
   $8_1 = 1;
   i64toi32_i32$0 = 0;
   $19_1 = 0;
   $19$hi = i64toi32_i32$0;
   if (($2_1 | 0) != (48 | 0)) {
    break label$1
   }
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
       break label$9
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break label$8;
     }
     $2_1 = $111($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$5;
    if (($2_1 | 0) == (48 | 0)) {
     continue label$7
    }
    break label$7;
   };
   $11_1 = 1;
   $8_1 = 1;
  }
  $12_1 = 0;
  HEAP32[($7_1 + 784 | 0) >> 2] = 0;
  $13_1 = $2_1 + -48 | 0;
  i64toi32_i32$5 = 0;
  $20_1 = 0;
  $20$hi = i64toi32_i32$5;
  label$10 : {
   label$11 : {
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        label$16 : {
         label$17 : {
          label$18 : {
           $14_1 = ($2_1 | 0) == (46 | 0);
           if (!$14_1) {
            break label$18
           }
           $15_1 = 0;
           $16_1 = 0;
           break label$17;
          }
          $15_1 = 0;
          $16_1 = 0;
          if ($13_1 >>> 0 > 9 >>> 0) {
           break label$16
          }
         }
         label$19 : while (1) {
          label$20 : {
           label$21 : {
            if (!($14_1 & 1 | 0)) {
             break label$21
            }
            label$22 : {
             if ($8_1) {
              break label$22
             }
             i64toi32_i32$5 = $20$hi;
             $19_1 = $20_1;
             $19$hi = i64toi32_i32$5;
             $8_1 = 1;
             break label$20;
            }
            $14_1 = !$11_1;
            break label$15;
           }
           i64toi32_i32$5 = $20$hi;
           i64toi32_i32$0 = $20_1;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 1;
           i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
           i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
           if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
           }
           $20_1 = i64toi32_i32$1;
           $20$hi = i64toi32_i32$4;
           label$23 : {
            if (($15_1 | 0) > (2044 | 0)) {
             break label$23
            }
            $11_1 = ($2_1 | 0) == (48 | 0);
            i64toi32_i32$4 = $20$hi;
            $17_1 = $20_1;
            $14_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
            label$24 : {
             if (!$12_1) {
              break label$24
             }
             $13_1 = ($2_1 + Math_imul(HEAP32[$14_1 >> 2] | 0, 10) | 0) + -48 | 0;
            }
            $16_1 = $11_1 ? $16_1 : $17_1;
            HEAP32[$14_1 >> 2] = $13_1;
            $11_1 = 1;
            $2_1 = $12_1 + 1 | 0;
            $128_1 = $2_1;
            $2_1 = ($2_1 | 0) == (9 | 0);
            $12_1 = $2_1 ? 0 : $128_1;
            $15_1 = $15_1 + $2_1 | 0;
            break label$20;
           }
           if (($2_1 | 0) == (48 | 0)) {
            break label$20
           }
           HEAP32[($7_1 + 8960 | 0) >> 2] = HEAP32[($7_1 + 8960 | 0) >> 2] | 0 | 1 | 0;
           $16_1 = 18396;
          }
          label$25 : {
           label$26 : {
            $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
            if ($2_1 >>> 0 >= (HEAP32[($1_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$26
            }
            HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
            $2_1 = HEAPU8[$2_1 >> 0] | 0;
            break label$25;
           }
           $2_1 = $111($1_1 | 0) | 0;
          }
          $13_1 = $2_1 + -48 | 0;
          $14_1 = ($2_1 | 0) == (46 | 0);
          if ($14_1) {
           continue label$19
          }
          if ($13_1 >>> 0 < 10 >>> 0) {
           continue label$19
          }
          break label$19;
         };
        }
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$4 = $20$hi;
        i64toi32_i32$2 = $8_1;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$0 = $20$hi;
        i64toi32_i32$3 = i64toi32_i32$2 ? $19_1 : $20_1;
        i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
        $19_1 = i64toi32_i32$3;
        $19$hi = i64toi32_i32$5;
        label$27 : {
         if (!$11_1) {
          break label$27
         }
         if (($2_1 & -33 | 0 | 0) != (69 | 0)) {
          break label$27
         }
         label$28 : {
          i64toi32_i32$5 = $131($1_1 | 0, $6_1 | 0) | 0;
          i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
          $21_1 = i64toi32_i32$5;
          $21$hi = i64toi32_i32$3;
          i64toi32_i32$2 = i64toi32_i32$5;
          i64toi32_i32$5 = -2147483648;
          i64toi32_i32$4 = 0;
          if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
           break label$28
          }
          if (!$6_1) {
           break label$12
          }
          i64toi32_i32$2 = 0;
          $21_1 = 0;
          $21$hi = i64toi32_i32$2;
          if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
           break label$28
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
         }
         if (!$11_1) {
          break label$13
         }
         i64toi32_i32$2 = $21$hi;
         i64toi32_i32$2 = $19$hi;
         i64toi32_i32$2 = $21$hi;
         i64toi32_i32$4 = $21_1;
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$5 = $19_1;
         i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
         i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
         if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
         }
         $19_1 = i64toi32_i32$0;
         $19$hi = i64toi32_i32$1;
         break label$11;
        }
        $14_1 = !$11_1;
        if (($2_1 | 0) < (0 | 0)) {
         break label$14
        }
       }
       if (!(HEAP32[($1_1 + 104 | 0) >> 2] | 0)) {
        break label$14
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      if (!$14_1) {
       break label$11
      }
     }
     HEAP32[($57() | 0) >> 2] = 28;
    }
    i64toi32_i32$1 = 0;
    $20_1 = 0;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $110($1_1 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = 0;
    $19_1 = 0;
    $19$hi = i64toi32_i32$1;
    break label$10;
   }
   label$29 : {
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    if ($1_1) {
     break label$29
    }
    $118($7_1 | 0, +(+($5_1 | 0) * 0.0));
    i64toi32_i32$2 = $7_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[$7_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    break label$10;
   }
   label$30 : {
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$2 = $20_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 9;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$4 | 0)) {
     $166_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$5 >>> 0) {
       $167_1 = 0
      } else {
       $167_1 = 1
      }
      $168_1 = $167_1;
     } else {
      $168_1 = 0
     }
     $166_1 = $168_1;
    }
    if ($166_1) {
     break label$30
    }
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$2 = $20$hi;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$5 = $19_1;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$4 = $20_1;
    if ((i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$30
    }
    label$31 : {
     if (($3_1 | 0) > (30 | 0)) {
      break label$31
     }
     if ($1_1 >>> $3_1 | 0) {
      break label$30
     }
    }
    $113($7_1 + 48 | 0 | 0, $5_1 | 0);
    $122($7_1 + 32 | 0 | 0, $1_1 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
    $236_1 = i64toi32_i32$5;
    $236$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $240_1 = i64toi32_i32$2;
    $240$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
    $242_1 = i64toi32_i32$5;
    $242$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 32 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $246_1 = i64toi32_i32$2;
    $246$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $236$hi;
    i64toi32_i32$2 = $240$hi;
    i64toi32_i32$4 = $242$hi;
    i64toi32_i32$1 = $246$hi;
    $114($7_1 + 16 | 0 | 0, $236_1 | 0, i64toi32_i32$5 | 0, $240_1 | 0, i64toi32_i32$2 | 0, $242_1 | 0, i64toi32_i32$4 | 0, $246_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7_1 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    break label$10;
   }
   label$32 : {
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$1 = 0;
    $256$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$4 = $256$hi;
    i64toi32_i32$5 = ($4_1 | 0) / (-2 | 0) | 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
     $169_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0) {
       $170_1 = 0
      } else {
       $170_1 = 1
      }
      $171_1 = $170_1;
     } else {
      $171_1 = 0
     }
     $169_1 = $171_1;
    }
    if ($169_1) {
     break label$32
    }
    HEAP32[($57() | 0) >> 2] = 68;
    $113($7_1 + 96 | 0 | 0, $5_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = HEAP32[($7_1 + 96 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 100 | 0) >> 2] | 0;
    $265_1 = i64toi32_i32$2;
    $265$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7_1 + 96 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $269_1 = i64toi32_i32$1;
    $269$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $265$hi;
    i64toi32_i32$1 = $269$hi;
    i64toi32_i32$5 = -1;
    i64toi32_i32$4 = 2147418111;
    $114($7_1 + 80 | 0 | 0, $265_1 | 0, i64toi32_i32$2 | 0, $269_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] | 0;
    $273_1 = i64toi32_i32$4;
    $273$hi = i64toi32_i32$5;
    i64toi32_i32$1 = (i64toi32_i32$1 + 80 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $277_1 = i64toi32_i32$5;
    $277$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $273$hi;
    i64toi32_i32$5 = $277$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    $114($7_1 + 64 | 0 | 0, $273_1 | 0, i64toi32_i32$4 | 0, $277_1 | 0, i64toi32_i32$5 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$5 = ($7_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$1;
    $20$hi = i64toi32_i32$2;
    break label$10;
   }
   label$33 : {
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$1 = $4_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $287_1 = i64toi32_i32$1;
    $287$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$5 = $19_1;
    i64toi32_i32$1 = $287$hi;
    i64toi32_i32$4 = $287_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $172_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
       $173_1 = 0
      } else {
       $173_1 = 1
      }
      $174_1 = $173_1;
     } else {
      $174_1 = 0
     }
     $172_1 = $174_1;
    }
    if ($172_1) {
     break label$33
    }
    HEAP32[($57() | 0) >> 2] = 68;
    $113($7_1 + 144 | 0 | 0, $5_1 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 148 | 0) >> 2] | 0;
    $296_1 = i64toi32_i32$5;
    $296$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 144 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $300_1 = i64toi32_i32$2;
    $300$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $296$hi;
    i64toi32_i32$2 = $300$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 65536;
    $114($7_1 + 128 | 0 | 0, $296_1 | 0, i64toi32_i32$5 | 0, $300_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 128 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
    $304_1 = i64toi32_i32$1;
    $304$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 128 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $308_1 = i64toi32_i32$4;
    $308$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $304$hi;
    i64toi32_i32$4 = $308$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 65536;
    $114($7_1 + 112 | 0 | 0, $304_1 | 0, i64toi32_i32$1 | 0, $308_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = ($7_1 + 112 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$2;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$2 = HEAP32[($7_1 + 112 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 116 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$2;
    $20$hi = i64toi32_i32$5;
    break label$10;
   }
   label$34 : {
    if (!$12_1) {
     break label$34
    }
    label$35 : {
     if (($12_1 | 0) > (8 | 0)) {
      break label$35
     }
     $2_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     label$36 : while (1) {
      $1_1 = Math_imul($1_1, 10);
      $12_1 = $12_1 + 1 | 0;
      if (($12_1 | 0) != (9 | 0)) {
       continue label$36
      }
      break label$36;
     };
     HEAP32[$2_1 >> 2] = $1_1;
    }
    $15_1 = $15_1 + 1 | 0;
   }
   i64toi32_i32$5 = $19$hi;
   $8_1 = $19_1;
   label$37 : {
    if (($16_1 | 0) >= (9 | 0)) {
     break label$37
    }
    if (($16_1 | 0) > ($8_1 | 0)) {
     break label$37
    }
    if (($8_1 | 0) > (17 | 0)) {
     break label$37
    }
    label$38 : {
     if (($8_1 | 0) != (9 | 0)) {
      break label$38
     }
     $113($7_1 + 192 | 0 | 0, $5_1 | 0);
     $122($7_1 + 176 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 192 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 196 | 0) >> 2] | 0;
     $357_1 = i64toi32_i32$5;
     $357$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7_1 + 192 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $361_1 = i64toi32_i32$2;
     $361$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 176 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 180 | 0) >> 2] | 0;
     $363_1 = i64toi32_i32$5;
     $363$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7_1 + 176 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $367_1 = i64toi32_i32$2;
     $367$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $357$hi;
     i64toi32_i32$2 = $361$hi;
     i64toi32_i32$4 = $363$hi;
     i64toi32_i32$1 = $367$hi;
     $114($7_1 + 160 | 0 | 0, $357_1 | 0, i64toi32_i32$5 | 0, $361_1 | 0, i64toi32_i32$2 | 0, $363_1 | 0, i64toi32_i32$4 | 0, $367_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7_1 + 160 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 160 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7_1 + 164 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$4;
     $20$hi = i64toi32_i32$1;
     break label$10;
    }
    label$39 : {
     if (($8_1 | 0) > (8 | 0)) {
      break label$39
     }
     $113($7_1 + 272 | 0 | 0, $5_1 | 0);
     $122($7_1 + 256 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 272 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 276 | 0) >> 2] | 0;
     $386_1 = i64toi32_i32$1;
     $386$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7_1 + 272 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $390_1 = i64toi32_i32$4;
     $390$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 256 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 260 | 0) >> 2] | 0;
     $392_1 = i64toi32_i32$1;
     $392$hi = i64toi32_i32$4;
     i64toi32_i32$2 = ($7_1 + 256 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $396_1 = i64toi32_i32$4;
     $396$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $386$hi;
     i64toi32_i32$4 = $390$hi;
     i64toi32_i32$2 = $392$hi;
     i64toi32_i32$5 = $396$hi;
     $114($7_1 + 240 | 0 | 0, $386_1 | 0, i64toi32_i32$1 | 0, $390_1 | 0, i64toi32_i32$4 | 0, $392_1 | 0, i64toi32_i32$2 | 0, $396_1 | 0, i64toi32_i32$5 | 0);
     $113($7_1 + 224 | 0 | 0, HEAP32[(((8 - $8_1 | 0) << 2 | 0) + 2352 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 240 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 244 | 0) >> 2] | 0;
     $407_1 = i64toi32_i32$5;
     $407$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7_1 + 240 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $411_1 = i64toi32_i32$2;
     $411$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 224 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($7_1 + 228 | 0) >> 2] | 0;
     $413_1 = i64toi32_i32$5;
     $413$hi = i64toi32_i32$2;
     i64toi32_i32$4 = ($7_1 + 224 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $417_1 = i64toi32_i32$2;
     $417$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $407$hi;
     i64toi32_i32$2 = $411$hi;
     i64toi32_i32$4 = $413$hi;
     i64toi32_i32$1 = $417$hi;
     $126($7_1 + 208 | 0 | 0, $407_1 | 0, i64toi32_i32$5 | 0, $411_1 | 0, i64toi32_i32$2 | 0, $413_1 | 0, i64toi32_i32$4 | 0, $417_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$2 = ($7_1 + 208 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 208 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($7_1 + 212 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$4;
     $20$hi = i64toi32_i32$1;
     break label$10;
    }
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    label$40 : {
     $2_1 = ($3_1 + Math_imul($8_1, -3) | 0) + 27 | 0;
     if (($2_1 | 0) > (30 | 0)) {
      break label$40
     }
     if ($1_1 >>> $2_1 | 0) {
      break label$37
     }
    }
    $113($7_1 + 352 | 0 | 0, $5_1 | 0);
    $122($7_1 + 336 | 0 | 0, $1_1 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 352 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 356 | 0) >> 2] | 0;
    $445_1 = i64toi32_i32$1;
    $445$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 352 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $449_1 = i64toi32_i32$4;
    $449$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 336 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 340 | 0) >> 2] | 0;
    $451_1 = i64toi32_i32$1;
    $451$hi = i64toi32_i32$4;
    i64toi32_i32$2 = ($7_1 + 336 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $455_1 = i64toi32_i32$4;
    $455$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $445$hi;
    i64toi32_i32$4 = $449$hi;
    i64toi32_i32$2 = $451$hi;
    i64toi32_i32$5 = $455$hi;
    $114($7_1 + 320 | 0 | 0, $445_1 | 0, i64toi32_i32$1 | 0, $449_1 | 0, i64toi32_i32$4 | 0, $451_1 | 0, i64toi32_i32$2 | 0, $455_1 | 0, i64toi32_i32$5 | 0);
    $113($7_1 + 304 | 0 | 0, HEAP32[(($8_1 << 2 | 0) + 2312 | 0) >> 2] | 0 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 320 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 324 | 0) >> 2] | 0;
    $465_1 = i64toi32_i32$5;
    $465$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 320 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $469_1 = i64toi32_i32$2;
    $469$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 304 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($7_1 + 308 | 0) >> 2] | 0;
    $471_1 = i64toi32_i32$5;
    $471$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($7_1 + 304 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $475_1 = i64toi32_i32$2;
    $475$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $465$hi;
    i64toi32_i32$2 = $469$hi;
    i64toi32_i32$4 = $471$hi;
    i64toi32_i32$1 = $475$hi;
    $114($7_1 + 288 | 0 | 0, $465_1 | 0, i64toi32_i32$5 | 0, $469_1 | 0, i64toi32_i32$2 | 0, $471_1 | 0, i64toi32_i32$4 | 0, $475_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = ($7_1 + 288 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 288 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 292 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    break label$10;
   }
   label$41 : while (1) {
    $2_1 = $15_1;
    $15_1 = $2_1 + -1 | 0;
    if (!(HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0)) {
     continue label$41
    }
    break label$41;
   };
   $12_1 = 0;
   label$42 : {
    label$43 : {
     $1_1 = ($8_1 | 0) % (9 | 0) | 0;
     if ($1_1) {
      break label$43
     }
     $14_1 = 0;
     break label$42;
    }
    $6_1 = ($8_1 | 0) > (-1 | 0) ? $1_1 : $1_1 + 9 | 0;
    label$44 : {
     label$45 : {
      if ($2_1) {
       break label$45
      }
      $14_1 = 0;
      $2_1 = 0;
      break label$44;
     }
     $11_1 = HEAP32[(((8 - $6_1 | 0) << 2 | 0) + 2352 | 0) >> 2] | 0;
     $17_1 = (1e9 | 0) / ($11_1 | 0) | 0;
     $13_1 = 0;
     $1_1 = 0;
     $14_1 = 0;
     label$46 : while (1) {
      $15_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
      $514_1 = $15_1;
      $15_1 = HEAP32[$15_1 >> 2] | 0;
      $16_1 = ($15_1 >>> 0) / ($11_1 >>> 0) | 0;
      $13_1 = $16_1 + $13_1 | 0;
      HEAP32[$514_1 >> 2] = $13_1;
      $13_1 = ($1_1 | 0) == ($14_1 | 0) & !$13_1 | 0;
      $14_1 = $13_1 ? ($14_1 + 1 | 0) & 2047 | 0 : $14_1;
      $8_1 = $13_1 ? $8_1 + -9 | 0 : $8_1;
      $13_1 = Math_imul($17_1, $15_1 - Math_imul($16_1, $11_1) | 0);
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) != ($2_1 | 0)) {
       continue label$46
      }
      break label$46;
     };
     if (!$13_1) {
      break label$44
     }
     HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $13_1;
     $2_1 = $2_1 + 1 | 0;
    }
    $8_1 = ($8_1 - $6_1 | 0) + 9 | 0;
   }
   label$47 : while (1) {
    $16_1 = ($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0;
    label$48 : {
     label$49 : while (1) {
      label$50 : {
       if (($8_1 | 0) < (36 | 0)) {
        break label$50
       }
       if (($8_1 | 0) != (36 | 0)) {
        break label$48
       }
       if ((HEAP32[$16_1 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
        break label$48
       }
      }
      $11_1 = $2_1 + 2047 | 0;
      $13_1 = 0;
      label$51 : while (1) {
       label$52 : {
        label$53 : {
         $1_1 = $11_1 & 2047 | 0;
         $11_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
         i64toi32_i32$2 = $11_1;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$4 = 0;
         i64toi32_i32$2 = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$5 = 29;
         i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $175_1 = 0;
         } else {
          i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
          $175_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         }
         $590$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $592$hi = i64toi32_i32$1;
         i64toi32_i32$1 = $590$hi;
         i64toi32_i32$4 = $175_1;
         i64toi32_i32$2 = $592$hi;
         i64toi32_i32$5 = $13_1;
         i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         $19_1 = i64toi32_i32$3;
         $19$hi = i64toi32_i32$0;
         i64toi32_i32$1 = i64toi32_i32$3;
         i64toi32_i32$4 = 0;
         i64toi32_i32$5 = 1000000001;
         if (i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
          break label$53
         }
         $13_1 = 0;
         break label$52;
        }
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_udiv($19_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $20_1 = i64toi32_i32$0;
        $20$hi = i64toi32_i32$1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul($20_1 | 0, i64toi32_i32$1 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $600_1 = i64toi32_i32$0;
        $600$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$5 = $19_1;
        i64toi32_i32$0 = $600$hi;
        i64toi32_i32$4 = $600_1;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$3 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        $19_1 = i64toi32_i32$2;
        $19$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $20$hi;
        $13_1 = $20_1;
       }
       i64toi32_i32$3 = $19$hi;
       $15_1 = $19_1;
       HEAP32[$11_1 >> 2] = $19_1;
       $2_1 = ($1_1 | 0) != (($2_1 + -1 | 0) & 2047 | 0 | 0) ? $2_1 : ($1_1 | 0) == ($14_1 | 0) ? $2_1 : $19_1 ? $2_1 : $1_1;
       $11_1 = $1_1 + -1 | 0;
       if (($1_1 | 0) != ($14_1 | 0)) {
        continue label$51
       }
       break label$51;
      };
      $12_1 = $12_1 + -29 | 0;
      if (!$13_1) {
       continue label$49
      }
      break label$49;
     };
     label$54 : {
      $14_1 = ($14_1 + -1 | 0) & 2047 | 0;
      if (($14_1 | 0) != ($2_1 | 0)) {
       break label$54
      }
      $1_1 = ($7_1 + 784 | 0) + ((($2_1 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
      $646_1 = $1_1;
      $648_1 = HEAP32[$1_1 >> 2] | 0;
      $1_1 = ($2_1 + -1 | 0) & 2047 | 0;
      HEAP32[$646_1 >> 2] = $648_1 | (HEAP32[(($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0) | 0;
      $2_1 = $1_1;
     }
     $8_1 = $8_1 + 9 | 0;
     HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] = $13_1;
     continue label$47;
    }
    break label$47;
   };
   label$55 : {
    label$56 : while (1) {
     $6_1 = ($2_1 + 1 | 0) & 2047 | 0;
     $18_1 = ($7_1 + 784 | 0) + ((($2_1 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
     label$57 : while (1) {
      $15_1 = ($8_1 | 0) > (45 | 0) ? 9 : 1;
      label$58 : {
       label$59 : while (1) {
        $11_1 = $14_1;
        $1_1 = 0;
        label$60 : {
         label$61 : {
          label$62 : while (1) {
           $14_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
           if (($14_1 | 0) == ($2_1 | 0)) {
            break label$61
           }
           $14_1 = HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] | 0;
           $13_1 = HEAP32[(($1_1 << 2 | 0) + 2336 | 0) >> 2] | 0;
           if ($14_1 >>> 0 < $13_1 >>> 0) {
            break label$61
           }
           if ($14_1 >>> 0 > $13_1 >>> 0) {
            break label$60
           }
           $1_1 = $1_1 + 1 | 0;
           if (($1_1 | 0) != (4 | 0)) {
            continue label$62
           }
           break label$62;
          };
         }
         if (($8_1 | 0) != (36 | 0)) {
          break label$60
         }
         i64toi32_i32$3 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$3;
         $1_1 = 0;
         i64toi32_i32$3 = 0;
         $20_1 = 0;
         $20$hi = i64toi32_i32$3;
         label$63 : while (1) {
          label$64 : {
           $14_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
           if (($14_1 | 0) != ($2_1 | 0)) {
            break label$64
           }
           $2_1 = ($2_1 + 1 | 0) & 2047 | 0;
           HEAP32[((($2_1 << 2 | 0) + ($7_1 + 784 | 0) | 0) + -4 | 0) >> 2] = 0;
          }
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$3 = $20$hi;
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$5 = $20$hi;
          i64toi32_i32$1 = 0;
          i64toi32_i32$4 = 1075633366;
          $114($7_1 + 768 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 1342177280 | 0, i64toi32_i32$4 | 0);
          $122($7_1 + 752 | 0 | 0, HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] | 0 | 0);
          i64toi32_i32$5 = $7_1;
          i64toi32_i32$4 = HEAP32[($7_1 + 768 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7_1 + 772 | 0) >> 2] | 0;
          $742_1 = i64toi32_i32$4;
          $742$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7_1 + 768 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $746_1 = i64toi32_i32$1;
          $746$hi = i64toi32_i32$4;
          i64toi32_i32$5 = $7_1;
          i64toi32_i32$4 = HEAP32[($7_1 + 752 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($7_1 + 756 | 0) >> 2] | 0;
          $748_1 = i64toi32_i32$4;
          $748$hi = i64toi32_i32$1;
          i64toi32_i32$5 = ($7_1 + 752 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
          $752_1 = i64toi32_i32$1;
          $752$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $742$hi;
          i64toi32_i32$1 = $746$hi;
          i64toi32_i32$5 = $748$hi;
          i64toi32_i32$3 = $752$hi;
          $117($7_1 + 736 | 0 | 0, $742_1 | 0, i64toi32_i32$4 | 0, $746_1 | 0, i64toi32_i32$1 | 0, $748_1 | 0, i64toi32_i32$5 | 0, $752_1 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$1 = ($7_1 + 736 | 0) + 8 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $20_1 = i64toi32_i32$3;
          $20$hi = i64toi32_i32$5;
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$5 = HEAP32[($7_1 + 736 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[($7_1 + 740 | 0) >> 2] | 0;
          $19_1 = i64toi32_i32$5;
          $19$hi = i64toi32_i32$3;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (4 | 0)) {
           continue label$63
          }
          break label$63;
         };
         $113($7_1 + 720 | 0 | 0, $5_1 | 0);
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$3 = $20$hi;
         i64toi32_i32$1 = $7_1;
         i64toi32_i32$3 = HEAP32[($7_1 + 720 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($7_1 + 724 | 0) >> 2] | 0;
         $771_1 = i64toi32_i32$3;
         $771$hi = i64toi32_i32$5;
         i64toi32_i32$1 = ($7_1 + 720 | 0) + 8 | 0;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
         $775_1 = i64toi32_i32$5;
         $775$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$5 = $20$hi;
         i64toi32_i32$1 = $771$hi;
         i64toi32_i32$4 = $775$hi;
         $114($7_1 + 704 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $771_1 | 0, i64toi32_i32$1 | 0, $775_1 | 0, i64toi32_i32$4 | 0);
         i64toi32_i32$5 = ($7_1 + 704 | 0) + 8 | 0;
         i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
         $20_1 = i64toi32_i32$4;
         $20$hi = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$1;
         i64toi32_i32$5 = $7_1;
         i64toi32_i32$1 = HEAP32[($7_1 + 704 | 0) >> 2] | 0;
         i64toi32_i32$4 = HEAP32[($7_1 + 708 | 0) >> 2] | 0;
         $21_1 = i64toi32_i32$1;
         $21$hi = i64toi32_i32$4;
         $13_1 = $12_1 + 113 | 0;
         $1_1 = $13_1 - $4_1 | 0;
         $8_1 = ($1_1 | 0) < ($3_1 | 0);
         $14_1 = $8_1 ? (($1_1 | 0) > (0 | 0) ? $1_1 : 0) : $3_1;
         if (($14_1 | 0) <= (112 | 0)) {
          break label$58
         }
         i64toi32_i32$4 = 0;
         $22_1 = 0;
         $22$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $23_1 = 0;
         $23$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $24_1 = 0;
         $24$hi = i64toi32_i32$4;
         break label$55;
        }
        $12_1 = $15_1 + $12_1 | 0;
        $14_1 = $2_1;
        if (($11_1 | 0) == ($2_1 | 0)) {
         continue label$59
        }
        break label$59;
       };
       $16_1 = 1e9 >>> $15_1 | 0;
       $17_1 = (-1 << $15_1 | 0) ^ -1 | 0;
       $1_1 = 0;
       $14_1 = $11_1;
       label$65 : while (1) {
        $13_1 = ($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0;
        $817_1 = $13_1;
        $13_1 = HEAP32[$13_1 >> 2] | 0;
        $1_1 = ($13_1 >>> $15_1 | 0) + $1_1 | 0;
        HEAP32[$817_1 >> 2] = $1_1;
        $1_1 = ($11_1 | 0) == ($14_1 | 0) & !$1_1 | 0;
        $14_1 = $1_1 ? ($14_1 + 1 | 0) & 2047 | 0 : $14_1;
        $8_1 = $1_1 ? $8_1 + -9 | 0 : $8_1;
        $1_1 = Math_imul($13_1 & $17_1 | 0, $16_1);
        $11_1 = ($11_1 + 1 | 0) & 2047 | 0;
        if (($11_1 | 0) != ($2_1 | 0)) {
         continue label$65
        }
        break label$65;
       };
       if (!$1_1) {
        continue label$57
       }
       label$66 : {
        if (($6_1 | 0) == ($14_1 | 0)) {
         break label$66
        }
        HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $1_1;
        $2_1 = $6_1;
        continue label$56;
       }
       HEAP32[$18_1 >> 2] = HEAP32[$18_1 >> 2] | 0 | 1 | 0;
       $14_1 = $6_1;
       continue label$57;
      }
      break label$57;
     };
     break label$56;
    };
    $118($7_1 + 656 | 0 | 0, +(+$1456(+(1.0), 225 - $14_1 | 0 | 0)));
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 656 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 660 | 0) >> 2] | 0;
    $879_1 = i64toi32_i32$4;
    $879$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7_1 + 656 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $883_1 = i64toi32_i32$1;
    $883$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$4 = $879$hi;
    i64toi32_i32$1 = $883$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    $121($7_1 + 688 | 0 | 0, $879_1 | 0, i64toi32_i32$4 | 0, $883_1 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$5 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($7_1 + 688 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $24_1 = i64toi32_i32$3;
    $24$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 688 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 692 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$5;
    $23$hi = i64toi32_i32$3;
    $118($7_1 + 640 | 0 | 0, +(+$1456(+(1.0), 113 - $14_1 | 0 | 0)));
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 640 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 644 | 0) >> 2] | 0;
    $902_1 = i64toi32_i32$3;
    $902$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 640 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $906_1 = i64toi32_i32$5;
    $906$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$1 = $902$hi;
    i64toi32_i32$4 = $906$hi;
    $1455($7_1 + 672 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $902_1 | 0, i64toi32_i32$1 | 0, $906_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$4 = i64toi32_i32$5;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 672 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 676 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$5 = ($7_1 + 672 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$3 = $22$hi;
    $123($7_1 + 624 | 0 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$5 | 0, $22_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$3 = $24$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 624 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 628 | 0) >> 2] | 0;
    $924_1 = i64toi32_i32$3;
    $924$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 624 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $928_1 = i64toi32_i32$5;
    $928$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$5 = $24$hi;
    i64toi32_i32$1 = $924$hi;
    i64toi32_i32$4 = $928$hi;
    $117($7_1 + 608 | 0 | 0, $23_1 | 0, i64toi32_i32$3 | 0, $24_1 | 0, i64toi32_i32$5 | 0, $924_1 | 0, i64toi32_i32$1 | 0, $928_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$5 = ($7_1 + 608 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 608 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 612 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$1;
    $21$hi = i64toi32_i32$4;
   }
   label$67 : {
    $15_1 = ($11_1 + 4 | 0) & 2047 | 0;
    if (($15_1 | 0) == ($2_1 | 0)) {
     break label$67
    }
    label$68 : {
     label$69 : {
      $15_1 = HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0;
      if ($15_1 >>> 0 > 499999999 >>> 0) {
       break label$69
      }
      label$70 : {
       if ($15_1) {
        break label$70
       }
       if ((($11_1 + 5 | 0) & 2047 | 0 | 0) == ($2_1 | 0)) {
        break label$68
       }
      }
      $118($7_1 + 496 | 0 | 0, +(+($5_1 | 0) * .25));
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$4 = HEAP32[($7_1 + 496 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 500 | 0) >> 2] | 0;
      $965_1 = i64toi32_i32$4;
      $965$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7_1 + 496 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $969_1 = i64toi32_i32$1;
      $969$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$5 = $965$hi;
      i64toi32_i32$3 = $969$hi;
      $117($7_1 + 480 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $965_1 | 0, i64toi32_i32$5 | 0, $969_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7_1 + 480 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 480 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 484 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$3;
      break label$68;
     }
     label$71 : {
      if (($15_1 | 0) == (5e8 | 0)) {
       break label$71
      }
      $118($7_1 + 592 | 0 | 0, +(+($5_1 | 0) * .75));
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$3 = $22$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$3 = HEAP32[($7_1 + 592 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[($7_1 + 596 | 0) >> 2] | 0;
      $988_1 = i64toi32_i32$3;
      $988$hi = i64toi32_i32$5;
      i64toi32_i32$1 = ($7_1 + 592 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $992_1 = i64toi32_i32$5;
      $992$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $19$hi;
      i64toi32_i32$5 = $22$hi;
      i64toi32_i32$1 = $988$hi;
      i64toi32_i32$4 = $992$hi;
      $117($7_1 + 576 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $988_1 | 0, i64toi32_i32$1 | 0, $992_1 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$5 = ($7_1 + 576 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$4;
      $22$hi = i64toi32_i32$1;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$1 = HEAP32[($7_1 + 576 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($7_1 + 580 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$1;
      $19$hi = i64toi32_i32$4;
      break label$68;
     }
     $25_1 = +($5_1 | 0);
     label$72 : {
      if ((($11_1 + 5 | 0) & 2047 | 0 | 0) != ($2_1 | 0)) {
       break label$72
      }
      $118($7_1 + 528 | 0 | 0, +($25_1 * .5));
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$4 = $22$hi;
      i64toi32_i32$5 = $7_1;
      i64toi32_i32$4 = HEAP32[($7_1 + 528 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 532 | 0) >> 2] | 0;
      $1015_1 = i64toi32_i32$4;
      $1015$hi = i64toi32_i32$1;
      i64toi32_i32$5 = ($7_1 + 528 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $1019_1 = i64toi32_i32$1;
      $1019$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $19$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$5 = $1015$hi;
      i64toi32_i32$3 = $1019$hi;
      $117($7_1 + 512 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $1015_1 | 0, i64toi32_i32$5 | 0, $1019_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($7_1 + 512 | 0) + 8 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $22_1 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[($7_1 + 512 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($7_1 + 516 | 0) >> 2] | 0;
      $19_1 = i64toi32_i32$5;
      $19$hi = i64toi32_i32$3;
      break label$68;
     }
     $118($7_1 + 560 | 0 | 0, +($25_1 * .75));
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$3 = HEAP32[($7_1 + 560 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 564 | 0) >> 2] | 0;
     $1035_1 = i64toi32_i32$3;
     $1035$hi = i64toi32_i32$5;
     i64toi32_i32$1 = ($7_1 + 560 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $1039_1 = i64toi32_i32$5;
     $1039$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$1 = $1035$hi;
     i64toi32_i32$4 = $1039$hi;
     $117($7_1 + 544 | 0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $22_1 | 0, i64toi32_i32$5 | 0, $1035_1 | 0, i64toi32_i32$1 | 0, $1039_1 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$5 = ($7_1 + 544 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $22_1 = i64toi32_i32$4;
     $22$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$1 = HEAP32[($7_1 + 544 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 548 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
    }
    if (($14_1 | 0) > (111 | 0)) {
     break label$67
    }
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    $1455($7_1 + 464 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$3 = HEAP32[($7_1 + 464 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 468 | 0) >> 2] | 0;
    $1053_1 = i64toi32_i32$3;
    $1053$hi = i64toi32_i32$5;
    i64toi32_i32$1 = ($7_1 + 464 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $1057_1 = i64toi32_i32$5;
    $1057$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1053$hi;
    i64toi32_i32$5 = $1057$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 0;
    if ($119($1053_1 | 0, i64toi32_i32$3 | 0, $1057_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0) {
     break label$67
    }
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$4 = $22$hi;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$1 = $22$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1073676288;
    $117($7_1 + 448 | 0 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($7_1 + 448 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$3;
    $22$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 448 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($7_1 + 452 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$3 = $22$hi;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$5 = $20$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$4 = $22$hi;
   $117($7_1 + 432 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $22_1 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$4 = HEAP32[($7_1 + 432 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7_1 + 436 | 0) >> 2] | 0;
   $1078_1 = i64toi32_i32$4;
   $1078$hi = i64toi32_i32$1;
   i64toi32_i32$5 = ($7_1 + 432 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $1082_1 = i64toi32_i32$1;
   $1082$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$4 = $24$hi;
   i64toi32_i32$4 = $1078$hi;
   i64toi32_i32$1 = $1082$hi;
   i64toi32_i32$5 = $23$hi;
   i64toi32_i32$3 = $24$hi;
   $123($7_1 + 416 | 0 | 0, $1078_1 | 0, i64toi32_i32$4 | 0, $1082_1 | 0, i64toi32_i32$1 | 0, $23_1 | 0, i64toi32_i32$5 | 0, $24_1 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($7_1 + 416 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$3;
   $20$hi = i64toi32_i32$5;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 416 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7_1 + 420 | 0) >> 2] | 0;
   $21_1 = i64toi32_i32$5;
   $21$hi = i64toi32_i32$3;
   label$73 : {
    if (($13_1 & 2147483647 | 0 | 0) <= (-2 - $9_1 | 0 | 0)) {
     break label$73
    }
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$5 = $20$hi;
    $127($7_1 + 400 | 0 | 0, $21_1 | 0, i64toi32_i32$3 | 0, $20_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 1073610752;
    $114($7_1 + 384 | 0 | 0, $21_1 | 0, i64toi32_i32$5 | 0, $20_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 400 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 404 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$4;
    $23$hi = i64toi32_i32$1;
    i64toi32_i32$3 = ($7_1 + 400 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $24_1 = i64toi32_i32$1;
    $24$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $23$hi;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 1081081856;
    $2_1 = $120($23_1 | 0, i64toi32_i32$4 | 0, $24_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$1 = ($7_1 + 384 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $1117_1 = i64toi32_i32$5;
    $1117$hi = i64toi32_i32$3;
    $13_1 = ($2_1 | 0) < (0 | 0);
    i64toi32_i32$0 = $13_1;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$5 = $1117$hi;
    i64toi32_i32$4 = i64toi32_i32$0 ? $20_1 : $1117_1;
    i64toi32_i32$1 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$5;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $21$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$1 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 388 | 0) >> 2] | 0;
    $1124_1 = i64toi32_i32$1;
    $1124$hi = i64toi32_i32$4;
    i64toi32_i32$5 = $13_1;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = $1124$hi;
    i64toi32_i32$3 = i64toi32_i32$5 ? $21_1 : $1124_1;
    i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$4 : i64toi32_i32$1;
    $21_1 = i64toi32_i32$3;
    $21$hi = i64toi32_i32$0;
    label$74 : {
     $12_1 = $12_1 + (($2_1 | 0) > (-1 | 0)) | 0;
     if (($12_1 + 110 | 0 | 0) > ($10_1 | 0)) {
      break label$74
     }
     i64toi32_i32$0 = $23$hi;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $23$hi;
     i64toi32_i32$3 = $24$hi;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 1081081856;
     if (((($120($23_1 | 0, i64toi32_i32$0 | 0, $24_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0 | 0) < (0 | 0) ? $8_1 : $8_1 & ($14_1 | 0) != ($1_1 | 0) | 0) | 0) != (1 | 0)) {
      break label$73
     }
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     if (!($119($19_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0)) {
      break label$73
     }
    }
    HEAP32[($57() | 0) >> 2] = 68;
   }
   i64toi32_i32$0 = $21$hi;
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$0 = $21$hi;
   i64toi32_i32$3 = $20$hi;
   $124($7_1 + 368 | 0 | 0, $21_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $12_1 | 0);
   i64toi32_i32$5 = ($7_1 + 368 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$3;
   $19$hi = i64toi32_i32$0;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$0 = HEAP32[($7_1 + 368 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($7_1 + 372 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$0;
   $20$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $20$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $20_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $19$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $7_1 + 8976 | 0;
 }
 
 function $131($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5_1 = 0, i64toi32_i32$3 = 0, $6$hi = 0, $3_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $85$hi = 0, $87_1 = 0, $87$hi = 0, $136$hi = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $2_1 = HEAPU8[$2_1 >> 0] | 0;
    break label$1;
   }
   $2_1 = $111($0_1 | 0) | 0;
  }
  label$3 : {
   label$4 : {
    switch ($2_1 + -43 | 0 | 0) {
    default:
     $3_1 = $2_1 + -48 | 0;
     $4_1 = 0;
     break label$3;
    case 0:
    case 2:
     break label$4;
    };
   }
   label$6 : {
    label$7 : {
     $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
      break label$7
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
     $5_1 = HEAPU8[$5_1 >> 0] | 0;
     break label$6;
    }
    $5_1 = $111($0_1 | 0) | 0;
   }
   $4_1 = ($2_1 | 0) == (45 | 0);
   label$8 : {
    $3_1 = $5_1 + -48 | 0;
    if ($3_1 >>> 0 < 10 >>> 0) {
     break label$8
    }
    if (!$1_1) {
     break label$8
    }
    if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
     break label$8
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   $2_1 = $5_1;
  }
  label$9 : {
   label$10 : {
    if ($3_1 >>> 0 >= 10 >>> 0) {
     break label$10
    }
    $5_1 = 0;
    label$11 : while (1) {
     $5_1 = $2_1 + Math_imul($5_1, 10) | 0;
     label$12 : {
      label$13 : {
       $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
        break label$13
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break label$12;
      }
      $2_1 = $111($0_1 | 0) | 0;
     }
     $5_1 = $5_1 + -48 | 0;
     label$14 : {
      $3_1 = $2_1 + -48 | 0;
      if ($3_1 >>> 0 > 9 >>> 0) {
       break label$14
      }
      if (($5_1 | 0) < (214748364 | 0)) {
       continue label$11
      }
     }
     break label$11;
    };
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $6_1 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$0;
    label$15 : {
     if ($3_1 >>> 0 >= 10 >>> 0) {
      break label$15
     }
     label$16 : while (1) {
      i64toi32_i32$0 = 0;
      $85$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $87_1 = i64toi32_i32$1;
      $87$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $85$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = $87$hi;
      i64toi32_i32$3 = $87_1;
      i64toi32_i32$4 = $2_1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6_1 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      label$17 : {
       label$18 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$18
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$17;
       }
       $2_1 = $111($0_1 | 0) | 0;
      }
      i64toi32_i32$5 = $6$hi;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = -48;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6_1 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$4;
      $3_1 = $2_1 + -48 | 0;
      if ($3_1 >>> 0 > 9 >>> 0) {
       break label$15
      }
      i64toi32_i32$4 = $6$hi;
      i64toi32_i32$5 = $6_1;
      i64toi32_i32$0 = 21474836;
      i64toi32_i32$3 = 2061584302;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
       $18_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $19_1 = 0
        } else {
         $19_1 = 1
        }
        $20_1 = $19_1;
       } else {
        $20_1 = 0
       }
       $18_1 = $20_1;
      }
      if ($18_1) {
       continue label$16
      }
      break label$16;
     };
    }
    label$19 : {
     if ($3_1 >>> 0 >= 10 >>> 0) {
      break label$19
     }
     label$20 : while (1) {
      label$21 : {
       label$22 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($2_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$22
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break label$21;
       }
       $2_1 = $111($0_1 | 0) | 0;
      }
      if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label$20
      }
      break label$20;
     };
    }
    label$23 : {
     if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
      break label$23
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    i64toi32_i32$1 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
    $136$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = $136$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$0;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$3;
    $6_1 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$5;
    break label$9;
   }
   i64toi32_i32$5 = -2147483648;
   $6_1 = 0;
   $6$hi = i64toi32_i32$5;
   if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
    break label$9
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$0 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
   return i64toi32_i32$0 | 0;
  }
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$5 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$5 | 0;
 }
 
 function $132($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $9$hi = 0, i64toi32_i32$1 = 0, $9_1 = 0, $7_1 = 0, $10$hi = 0, $11$hi = 0, $10_1 = 0, $11_1 = 0, $12$hi = 0, $6_1 = 0, $12_1 = 0, $4_1 = 0, $8_1 = 0, $29_1 = 0, $30_1 = 0, $185_1 = 0, $185$hi = 0, $243_1 = 0, $243$hi = 0, $410$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         if ($1_1 >>> 0 > 36 >>> 0) {
          break label$7
         }
         label$8 : while (1) {
          label$9 : {
           label$10 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$10
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$9;
           }
           $5_1 = $111($0_1 | 0) | 0;
          }
          if ($103($5_1 | 0) | 0) {
           continue label$8
          }
          break label$8;
         };
         $6_1 = 0;
         label$11 : {
          label$12 : {
           switch ($5_1 + -43 | 0 | 0) {
           case 0:
           case 2:
            break label$12;
           default:
            break label$11;
           };
          }
          $6_1 = ($5_1 | 0) == (45 | 0) ? -1 : 0;
          label$13 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$13
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$11;
          }
          $5_1 = $111($0_1 | 0) | 0;
         }
         label$14 : {
          label$15 : {
           if ($1_1 & -17 | 0) {
            break label$15
           }
           if (($5_1 | 0) != (48 | 0)) {
            break label$15
           }
           label$16 : {
            label$17 : {
             $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$17
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
             $5_1 = HEAPU8[$5_1 >> 0] | 0;
             break label$16;
            }
            $5_1 = $111($0_1 | 0) | 0;
           }
           label$18 : {
            if (($5_1 & -33 | 0 | 0) != (88 | 0)) {
             break label$18
            }
            label$19 : {
             label$20 : {
              $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$20
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
              $5_1 = HEAPU8[$5_1 >> 0] | 0;
              break label$19;
             }
             $5_1 = $111($0_1 | 0) | 0;
            }
            $1_1 = 16;
            if ((HEAPU8[($5_1 + 2417 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
             break label$5
            }
            label$21 : {
             if (HEAP32[($0_1 + 104 | 0) >> 2] | 0) {
              break label$21
             }
             i64toi32_i32$0 = 0;
             $3_1 = 0;
             $3$hi = i64toi32_i32$0;
             if ($2_1) {
              break label$1
             }
             break label$2;
            }
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -1 | 0;
            if (!$2_1) {
             break label$2
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -2 | 0;
            i64toi32_i32$0 = 0;
            $3_1 = 0;
            $3$hi = i64toi32_i32$0;
            break label$1;
           }
           if ($1_1) {
            break label$14
           }
           $1_1 = 8;
           break label$5;
          }
          $1_1 = $1_1 ? $1_1 : 10;
          if ($1_1 >>> 0 > (HEAPU8[($5_1 + 2417 | 0) >> 0] | 0) >>> 0) {
           break label$14
          }
          label$22 : {
           if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
            break label$22
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
          }
          i64toi32_i32$0 = 0;
          $3_1 = 0;
          $3$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $110($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
          HEAP32[($57() | 0) >> 2] = 28;
          break label$1;
         }
         if (($1_1 | 0) != (10 | 0)) {
          break label$5
         }
         i64toi32_i32$0 = 0;
         $9_1 = 0;
         $9$hi = i64toi32_i32$0;
         label$23 : {
          $2_1 = $5_1 + -48 | 0;
          if ($2_1 >>> 0 > 9 >>> 0) {
           break label$23
          }
          $1_1 = 0;
          label$24 : while (1) {
           $1_1 = Math_imul($1_1, 10);
           label$25 : {
            label$26 : {
             $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
              break label$26
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
             $5_1 = HEAPU8[$5_1 >> 0] | 0;
             break label$25;
            }
            $5_1 = $111($0_1 | 0) | 0;
           }
           $1_1 = $1_1 + $2_1 | 0;
           label$27 : {
            $2_1 = $5_1 + -48 | 0;
            if ($2_1 >>> 0 > 9 >>> 0) {
             break label$27
            }
            if ($1_1 >>> 0 < 429496729 >>> 0) {
             continue label$24
            }
           }
           break label$24;
          };
          i64toi32_i32$0 = 0;
          $9_1 = $1_1;
          $9$hi = i64toi32_i32$0;
         }
         if ($2_1 >>> 0 > 9 >>> 0) {
          break label$6
         }
         i64toi32_i32$0 = $9$hi;
         i64toi32_i32$1 = 0;
         i64toi32_i32$1 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
         $10_1 = i64toi32_i32$1;
         $10$hi = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         $11_1 = $2_1;
         $11$hi = i64toi32_i32$0;
         label$28 : while (1) {
          label$29 : {
           label$30 : {
            $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
             break label$30
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
            $5_1 = HEAPU8[$5_1 >> 0] | 0;
            break label$29;
           }
           $5_1 = $111($0_1 | 0) | 0;
          }
          i64toi32_i32$0 = $10$hi;
          i64toi32_i32$0 = $11$hi;
          i64toi32_i32$0 = $10$hi;
          i64toi32_i32$2 = $10_1;
          i64toi32_i32$1 = $11$hi;
          i64toi32_i32$3 = $11_1;
          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $9_1 = i64toi32_i32$4;
          $9$hi = i64toi32_i32$5;
          $2_1 = $5_1 + -48 | 0;
          if ($2_1 >>> 0 > 9 >>> 0) {
           break label$6
          }
          i64toi32_i32$5 = $9$hi;
          i64toi32_i32$0 = $9_1;
          i64toi32_i32$2 = 429496729;
          i64toi32_i32$3 = -1717986918;
          if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
           break label$6
          }
          i64toi32_i32$0 = $9$hi;
          i64toi32_i32$5 = 0;
          i64toi32_i32$5 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
          $10_1 = i64toi32_i32$5;
          $10$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          $11_1 = $2_1;
          $11$hi = i64toi32_i32$0;
          i64toi32_i32$3 = $2_1;
          i64toi32_i32$5 = -1;
          i64toi32_i32$2 = -1;
          i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
          $185_1 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
          $185$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $10$hi;
          i64toi32_i32$0 = $10_1;
          i64toi32_i32$3 = $185$hi;
          i64toi32_i32$2 = $185_1;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0 | 0) | 0) {
           continue label$28
          }
          break label$28;
         };
         $1_1 = 10;
         break label$4;
        }
        HEAP32[($57() | 0) >> 2] = 28;
        i64toi32_i32$0 = 0;
        $3_1 = 0;
        $3$hi = i64toi32_i32$0;
        break label$1;
       }
       $1_1 = 10;
       if ($2_1 >>> 0 <= 9 >>> 0) {
        break label$4
       }
       break label$3;
      }
      label$31 : {
       if (!($1_1 & ($1_1 + -1 | 0) | 0)) {
        break label$31
       }
       i64toi32_i32$0 = 0;
       $9_1 = 0;
       $9$hi = i64toi32_i32$0;
       label$32 : {
        $7_1 = HEAPU8[($5_1 + 2417 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $7_1 >>> 0) {
         break label$32
        }
        $2_1 = 0;
        label$33 : while (1) {
         $2_1 = Math_imul($2_1, $1_1);
         label$34 : {
          label$35 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
            break label$35
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break label$34;
          }
          $5_1 = $111($0_1 | 0) | 0;
         }
         $2_1 = $7_1 + $2_1 | 0;
         label$36 : {
          $7_1 = HEAPU8[($5_1 + 2417 | 0) >> 0] | 0;
          if ($1_1 >>> 0 <= $7_1 >>> 0) {
           break label$36
          }
          if ($2_1 >>> 0 < 119304647 >>> 0) {
           continue label$33
          }
         }
         break label$33;
        };
        i64toi32_i32$0 = 0;
        $9_1 = $2_1;
        $9$hi = i64toi32_i32$0;
       }
       if ($1_1 >>> 0 <= $7_1 >>> 0) {
        break label$4
       }
       i64toi32_i32$0 = 0;
       $10_1 = $1_1;
       $10$hi = i64toi32_i32$0;
       label$37 : while (1) {
        i64toi32_i32$0 = $9$hi;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $9$hi;
        i64toi32_i32$5 = $10$hi;
        i64toi32_i32$5 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$0 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $11_1 = i64toi32_i32$5;
        $11$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = $7_1;
        i64toi32_i32$5 = 0;
        i64toi32_i32$3 = 255;
        i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
        $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $12$hi = i64toi32_i32$5;
        i64toi32_i32$0 = $12_1;
        i64toi32_i32$2 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
        $243_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
        $243$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $11$hi;
        i64toi32_i32$5 = $11_1;
        i64toi32_i32$0 = $243$hi;
        i64toi32_i32$3 = $243_1;
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
         break label$4
        }
        label$38 : {
         label$39 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$39
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$38;
         }
         $5_1 = $111($0_1 | 0) | 0;
        }
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$5 = $12$hi;
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$3 = $11_1;
        i64toi32_i32$2 = $12$hi;
        i64toi32_i32$0 = $12_1;
        i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $9_1 = i64toi32_i32$1;
        $9$hi = i64toi32_i32$4;
        $7_1 = HEAPU8[($5_1 + 2417 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $7_1 >>> 0) {
         break label$4
        }
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$4 = $9$hi;
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$5 = $9$hi;
        i64toi32_i32$0 = 0;
        $125($4_1 | 0, $10_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, $9_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$4 = 0;
        if ((i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$4
        }
        continue label$37;
       };
      }
      $8_1 = HEAP8[(((Math_imul($1_1, 23) >>> 5 | 0) & 7 | 0) + 2673 | 0) >> 0] | 0;
      i64toi32_i32$3 = 0;
      $9_1 = 0;
      $9$hi = i64toi32_i32$3;
      label$40 : {
       $2_1 = HEAPU8[($5_1 + 2417 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$40
       }
       $7_1 = 0;
       label$41 : while (1) {
        $7_1 = $7_1 << $8_1 | 0;
        label$42 : {
         label$43 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
           break label$43
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break label$42;
         }
         $5_1 = $111($0_1 | 0) | 0;
        }
        $7_1 = $2_1 | $7_1 | 0;
        label$44 : {
         $2_1 = HEAPU8[($5_1 + 2417 | 0) >> 0] | 0;
         if ($1_1 >>> 0 <= $2_1 >>> 0) {
          break label$44
         }
         if ($7_1 >>> 0 < 134217728 >>> 0) {
          continue label$41
         }
        }
        break label$41;
       };
       i64toi32_i32$3 = 0;
       $9_1 = $7_1;
       $9$hi = i64toi32_i32$3;
      }
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break label$4
      }
      i64toi32_i32$3 = 0;
      $11_1 = $8_1;
      $11$hi = i64toi32_i32$3;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$5 = $11$hi;
      i64toi32_i32$0 = $11_1;
      i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = 0;
       $29_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
      } else {
       i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
       $29_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
      }
      $12_1 = $29_1;
      $12$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $9$hi;
      i64toi32_i32$5 = $12$hi;
      i64toi32_i32$3 = $12_1;
      i64toi32_i32$4 = $9$hi;
      i64toi32_i32$0 = $9_1;
      if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
       break label$4
      }
      label$45 : while (1) {
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$0 = $9_1;
       i64toi32_i32$5 = $11$hi;
       i64toi32_i32$4 = $11_1;
       i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
        $30_1 = 0;
       } else {
        i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
        $30_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
       }
       $9_1 = $30_1;
       $9$hi = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       i64toi32_i32$3 = $2_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = 255;
       i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
       $10_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
       $10$hi = i64toi32_i32$0;
       label$46 : {
        label$47 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
          break label$47
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break label$46;
        }
        $5_1 = $111($0_1 | 0) | 0;
       }
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$5 = $9_1;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$4 = $10_1;
       i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
       $9_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
       $9$hi = i64toi32_i32$3;
       $2_1 = HEAPU8[($5_1 + 2417 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $2_1 >>> 0) {
        break label$4
       }
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$3 = $12$hi;
       i64toi32_i32$3 = $9$hi;
       i64toi32_i32$0 = $9_1;
       i64toi32_i32$5 = $12$hi;
       i64toi32_i32$4 = $12_1;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
        continue label$45
       }
       break label$45;
      };
     }
     if ($1_1 >>> 0 <= (HEAPU8[($5_1 + 2417 | 0) >> 0] | 0) >>> 0) {
      break label$3
     }
     label$48 : while (1) {
      label$49 : {
       label$50 : {
        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
         break label$50
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
        $5_1 = HEAPU8[$5_1 >> 0] | 0;
        break label$49;
       }
       $5_1 = $111($0_1 | 0) | 0;
      }
      if ($1_1 >>> 0 > (HEAPU8[($5_1 + 2417 | 0) >> 0] | 0) >>> 0) {
       continue label$48
      }
      break label$48;
     };
     HEAP32[($57() | 0) >> 2] = 68;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $6_1 = !(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$3 | 0) ? $6_1 : 0;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = i64toi32_i32$0;
     $9_1 = i64toi32_i32$4;
     $9$hi = i64toi32_i32$0;
    }
    label$51 : {
     if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
      break label$51
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    label$52 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$5 = $3_1;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0) {
      break label$52
     }
     label$53 : {
      i64toi32_i32$0 = $3$hi;
      if ($3_1 & 1 | 0) {
       break label$53
      }
      if ($6_1) {
       break label$53
      }
      HEAP32[($57() | 0) >> 2] = 68;
      i64toi32_i32$0 = $3$hi;
      i64toi32_i32$5 = $3_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $3_1 = i64toi32_i32$2;
      $3$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3_1;
     if ($9$hi >>> 0 < i64toi32_i32$5 >>> 0 | (($9$hi | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$52
     }
     HEAP32[($57() | 0) >> 2] = 68;
     break label$1;
    }
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$4 = $9_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$5 = $3_1;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
    $410$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $410$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    i64toi32_i32$2 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = 0;
   $3_1 = 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   $110($0_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$0 | 0;
 }
 
 function $133($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $5$hi = 0, $4_1 = 0, $3_1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $20_1 = 0, $24_1 = 0, $34_1 = 0, $34$hi = 0, $42_1 = 0, $44_1 = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $93_1 = 0, $97_1 = 0, $105_1 = 0, $105$hi = 0, $114_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = $1_1 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1065418752;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = -1082064896;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 25;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $37_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $37_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $3_1 = $37_1;
    label$3 : {
     i64toi32_i32$4 = $0$hi;
     $20_1 = !($0_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 33554431;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $5_1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $5$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 16777216;
     $24_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 16777216;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $20_1 : $24_1) {
      break label$3
     }
     $4_1 = $3_1 + 1073741825 | 0;
     break label$1;
    }
    $4_1 = $3_1 + 1073741824 | 0;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
    $34_1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
    $34$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$5 = $34$hi;
    i64toi32_i32$3 = $34_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$1
    }
    $4_1 = $4_1 + ($3_1 & 1 | 0) | 0;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $42_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$1 = 0;
    $44_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $42_1 : $44_1) {
     break label$4
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 25;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $38_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     $38_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $4_1 = $38_1 & 4194303 | 0 | 2143289344 | 0;
    break label$1;
   }
   $4_1 = 2139095040;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$5 = 1082064895;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   $4_1 = 0;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $39_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    $39_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $3_1 = $39_1;
   if ($3_1 >>> 0 < 16145 >>> 0) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $5$hi;
   $69($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$1 | 0, $5_1 | 0, i64toi32_i32$3 | 0, $3_1 + -16129 | 0 | 0);
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   $70($2_1 | 0, $0_1 | 0, i64toi32_i32$3 | 0, $5_1 | 0, i64toi32_i32$1 | 0, 16257 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$1;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 25;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $40_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $40_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $4_1 = $40_1;
   label$5 : {
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $81_1 = i64toi32_i32$1;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$1;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$3 = $83_1;
    i64toi32_i32$1 = $87$hi;
    i64toi32_i32$5 = $87_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$5 = $81_1;
    i64toi32_i32$1 = $90$hi;
    i64toi32_i32$3 = $89_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $0_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $0$hi = i64toi32_i32$1;
    $93_1 = !($0_1 | i64toi32_i32$1 | 0);
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 33554431;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $5_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    $97_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 16777216;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $93_1 : $97_1) {
     break label$5
    }
    $4_1 = $4_1 + 1 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 16777216;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $105_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $105$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$4 = $105$hi;
   i64toi32_i32$5 = $105_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0) {
    break label$1
   }
   $4_1 = ($4_1 & 1 | 0) + $4_1 | 0;
  }
  global$0 = $2_1 + 32 | 0;
  $114_1 = $4_1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $41_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   $41_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
  }
  return Math_fround((wasm2js_scratch_store_i32(2, $114_1 | ($41_1 & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
 }
 
 function $134($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $5_1 = 0, $8_1 = 0, $4_1 = 0, $7_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = $3_1 ? $3_1 : 15024;
  $3_1 = HEAP32[$5_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($1_1) {
       break label$4
      }
      if ($3_1) {
       break label$3
      }
      $6_1 = 0;
      break label$1;
     }
     $6_1 = -2;
     if (!$2_1) {
      break label$1
     }
     $7_1 = $0_1 ? $0_1 : $4_1 + 12 | 0;
     label$5 : {
      label$6 : {
       if (!$3_1) {
        break label$6
       }
       $0_1 = $2_1;
       break label$5;
      }
      label$7 : {
       $3_1 = HEAPU8[$1_1 >> 0] | 0;
       $0_1 = ($3_1 << 24 | 0) >> 24 | 0;
       if (($0_1 | 0) < (0 | 0)) {
        break label$7
       }
       HEAP32[$7_1 >> 2] = $3_1;
       $6_1 = ($0_1 | 0) != (0 | 0);
       break label$1;
      }
      $3_1 = HEAP32[(HEAP32[(($62() | 0) + 168 | 0) >> 2] | 0) >> 2] | 0;
      $0_1 = HEAP8[$1_1 >> 0] | 0;
      label$8 : {
       if ($3_1) {
        break label$8
       }
       HEAP32[$7_1 >> 2] = $0_1 & 57343 | 0;
       $6_1 = 1;
       break label$1;
      }
      $3_1 = ($0_1 & 255 | 0) + -194 | 0;
      if ($3_1 >>> 0 > 50 >>> 0) {
       break label$3
      }
      $3_1 = HEAP32[(2688 + ($3_1 << 2 | 0) | 0) >> 2] | 0;
      $0_1 = $2_1 + -1 | 0;
      if (!$0_1) {
       break label$2
      }
      $1_1 = $1_1 + 1 | 0;
     }
     $8_1 = HEAPU8[$1_1 >> 0] | 0;
     $9_1 = $8_1 >>> 3 | 0;
     if (($9_1 + -16 | 0 | (($3_1 >> 26 | 0) + $9_1 | 0) | 0) >>> 0 > 7 >>> 0) {
      break label$3
     }
     label$9 : while (1) {
      $0_1 = $0_1 + -1 | 0;
      label$10 : {
       $3_1 = ($8_1 & 255 | 0) + -128 | 0 | ($3_1 << 6 | 0) | 0;
       if (($3_1 | 0) < (0 | 0)) {
        break label$10
       }
       HEAP32[$5_1 >> 2] = 0;
       HEAP32[$7_1 >> 2] = $3_1;
       $6_1 = $2_1 - $0_1 | 0;
       break label$1;
      }
      if (!$0_1) {
       break label$2
      }
      $1_1 = $1_1 + 1 | 0;
      $8_1 = HEAPU8[$1_1 >> 0] | 0;
      if (($8_1 & 192 | 0 | 0) == (128 | 0)) {
       continue label$9
      }
      break label$9;
     };
    }
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[($57() | 0) >> 2] = 25;
    $6_1 = -1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $135($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 1 | 0;
  }
  return !(HEAP32[$0_1 >> 2] | 0) | 0;
 }
 
 function $136($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $8_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $14_1 = 0, $3_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $18$hi = 0, $19$hi = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0, $20$hi = 0, $9_1 = 0, $17_1 = 0, $4_1 = 0, $15_1 = 0, $20_1 = 0, i64toi32_i32$6 = 0, $5_1 = 0, $59_1 = 0, $7_1 = 0, $71$hi = 0, $73$hi = 0, $78_1 = 0, $78$hi = 0, $178_1 = 0, $188_1 = 0, $250$hi = 0, $252$hi = 0, $257_1 = 0, $257$hi = 0, $299_1 = 0, $299$hi = 0, $305_1 = 0, $305$hi = 0, $306$hi = 0, $412_1 = 0, $412$hi = 0, $418_1 = 0, $418$hi = 0, $419$hi = 0, $623_1 = 0, $623$hi = 0, $628_1 = 0, $628$hi = 0, $656$hi = 0, $658$hi = 0, $664_1 = 0, $664$hi = 0;
  $3_1 = global$0 - 304 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $5_1 = $1464($0_1 | 0) | 0;
  }
  label$2 : {
   $6_1 = HEAPU8[$1_1 >> 0] | 0;
   if (!$6_1) {
    break label$2
   }
   i64toi32_i32$0 = 0;
   $18_1 = 0;
   $18$hi = i64toi32_i32$0;
   $7_1 = $3_1 + 16 | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : while (1) {
         label$9 : {
          label$10 : {
           if (!($103($6_1 & 255 | 0 | 0) | 0)) {
            break label$10
           }
           label$11 : while (1) {
            $6_1 = $1_1;
            $1_1 = $1_1 + 1 | 0;
            if ($103(HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
             continue label$11
            }
            break label$11;
           };
           i64toi32_i32$0 = 0;
           $110($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
           label$12 : while (1) {
            label$13 : {
             label$14 : {
              $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($1_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$14
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
              $1_1 = HEAPU8[$1_1 >> 0] | 0;
              break label$13;
             }
             $1_1 = $111($0_1 | 0) | 0;
            }
            if ($103($1_1 | 0) | 0) {
             continue label$12
            }
            break label$12;
           };
           $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           label$15 : {
            if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
             break label$15
            }
            $1_1 = $1_1 + -1 | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
           }
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
           $71$hi = i64toi32_i32$1;
           i64toi32_i32$1 = $18$hi;
           i64toi32_i32$1 = $71$hi;
           i64toi32_i32$2 = i64toi32_i32$0;
           i64toi32_i32$0 = $18$hi;
           i64toi32_i32$3 = $18_1;
           i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
           i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
           if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
           }
           $73$hi = i64toi32_i32$5;
           i64toi32_i32$2 = $1_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
           i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
           $78_1 = i64toi32_i32$2;
           $78$hi = i64toi32_i32$5;
           i64toi32_i32$5 = $73$hi;
           i64toi32_i32$1 = i64toi32_i32$4;
           i64toi32_i32$2 = $78$hi;
           i64toi32_i32$3 = $78_1;
           i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
           i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
           if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
           }
           $18_1 = i64toi32_i32$0;
           $18$hi = i64toi32_i32$4;
           break label$9;
          }
          label$16 : {
           label$17 : {
            label$18 : {
             label$19 : {
              $6_1 = HEAPU8[$1_1 >> 0] | 0;
              if (($6_1 | 0) != (37 | 0)) {
               break label$19
              }
              $8_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
              if (($8_1 | 0) == (42 | 0)) {
               break label$18
              }
              if (($8_1 | 0) != (37 | 0)) {
               break label$17
              }
             }
             i64toi32_i32$4 = 0;
             $110($0_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
             $6_1 = $1_1 + (($6_1 | 0) == (37 | 0)) | 0;
             label$20 : {
              label$21 : {
               $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
               if ($1_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                break label$21
               }
               HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
               $1_1 = HEAPU8[$1_1 >> 0] | 0;
               break label$20;
              }
              $1_1 = $111($0_1 | 0) | 0;
             }
             label$22 : {
              if (($1_1 | 0) == (HEAPU8[$6_1 >> 0] | 0 | 0)) {
               break label$22
              }
              label$23 : {
               if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
                break label$23
               }
               HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
              }
              if (($1_1 | 0) > (-1 | 0)) {
               break label$2
              }
              $9_1 = 0;
              if ($4_1) {
               break label$2
              }
              break label$4;
             }
             i64toi32_i32$4 = $18$hi;
             i64toi32_i32$5 = $18_1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 1;
             i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
             i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
             }
             $18_1 = i64toi32_i32$2;
             $18$hi = i64toi32_i32$0;
             break label$9;
            }
            $6_1 = $1_1 + 2 | 0;
            $10_1 = 0;
            break label$16;
           }
           label$24 : {
            if (!($63($8_1 | 0) | 0)) {
             break label$24
            }
            if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
             break label$24
            }
            $6_1 = $1_1 + 3 | 0;
            $10_1 = $137($2_1 | 0, (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0 | 0) | 0;
            break label$16;
           }
           $6_1 = $1_1 + 1 | 0;
           $10_1 = HEAP32[$2_1 >> 2] | 0;
           $2_1 = $2_1 + 4 | 0;
          }
          $9_1 = 0;
          $1_1 = 0;
          label$25 : {
           if (!($63(HEAPU8[$6_1 >> 0] | 0 | 0) | 0)) {
            break label$25
           }
           label$26 : while (1) {
            $1_1 = (Math_imul($1_1, 10) + (HEAPU8[$6_1 >> 0] | 0) | 0) + -48 | 0;
            $8_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
            $6_1 = $6_1 + 1 | 0;
            if ($63($8_1 | 0) | 0) {
             continue label$26
            }
            break label$26;
           };
          }
          label$27 : {
           label$28 : {
            $11_1 = HEAPU8[$6_1 >> 0] | 0;
            if (($11_1 | 0) == (109 | 0)) {
             break label$28
            }
            $8_1 = $6_1;
            break label$27;
           }
           $8_1 = $6_1 + 1 | 0;
           $12_1 = 0;
           $9_1 = ($10_1 | 0) != (0 | 0);
           $11_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
           $13_1 = 0;
          }
          $6_1 = $8_1 + 1 | 0;
          $14_1 = 3;
          label$29 : {
           label$30 : {
            switch (($11_1 & 255 | 0) + -65 | 0 | 0) {
            case 39:
             $178_1 = $8_1 + 2 | 0;
             $8_1 = (HEAPU8[($8_1 + 1 | 0) >> 0] | 0 | 0) == (104 | 0);
             $6_1 = $8_1 ? $178_1 : $6_1;
             $14_1 = $8_1 ? -2 : -1;
             break label$29;
            case 43:
             $188_1 = $8_1 + 2 | 0;
             $8_1 = (HEAPU8[($8_1 + 1 | 0) >> 0] | 0 | 0) == (108 | 0);
             $6_1 = $8_1 ? $188_1 : $6_1;
             $14_1 = $8_1 ? 3 : 1;
             break label$29;
            case 51:
            case 57:
             $14_1 = 1;
             break label$29;
            case 11:
             $14_1 = 2;
             break label$29;
            case 41:
             break label$29;
            case 0:
            case 2:
            case 4:
            case 5:
            case 6:
            case 18:
            case 23:
            case 26:
            case 32:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 40:
            case 45:
            case 46:
            case 47:
            case 50:
            case 52:
            case 55:
             break label$30;
            default:
             break label$5;
            };
           }
           $14_1 = 0;
           $6_1 = $8_1;
          }
          $8_1 = HEAPU8[$6_1 >> 0] | 0;
          $11_1 = ($8_1 & 47 | 0 | 0) == (3 | 0);
          $15_1 = $11_1 ? 1 : $14_1;
          label$35 : {
           $16_1 = $11_1 ? $8_1 | 32 | 0 : $8_1;
           if (($16_1 | 0) == (91 | 0)) {
            break label$35
           }
           label$36 : {
            label$37 : {
             if (($16_1 | 0) == (110 | 0)) {
              break label$37
             }
             if (($16_1 | 0) != (99 | 0)) {
              break label$36
             }
             $1_1 = ($1_1 | 0) > (1 | 0) ? $1_1 : 1;
             break label$35;
            }
            i64toi32_i32$0 = $18$hi;
            $138($10_1 | 0, $15_1 | 0, $18_1 | 0, i64toi32_i32$0 | 0);
            break label$9;
           }
           i64toi32_i32$0 = 0;
           $110($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
           label$38 : while (1) {
            label$39 : {
             label$40 : {
              $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if ($8_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
               break label$40
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + 1 | 0;
              $8_1 = HEAPU8[$8_1 >> 0] | 0;
              break label$39;
             }
             $8_1 = $111($0_1 | 0) | 0;
            }
            if ($103($8_1 | 0) | 0) {
             continue label$38
            }
            break label$38;
           };
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           label$41 : {
            if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
             break label$41
            }
            $8_1 = $8_1 + -1 | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $8_1;
           }
           i64toi32_i32$4 = $0_1;
           i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
           i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
           $250$hi = i64toi32_i32$5;
           i64toi32_i32$5 = $18$hi;
           i64toi32_i32$5 = $250$hi;
           i64toi32_i32$4 = i64toi32_i32$0;
           i64toi32_i32$0 = $18$hi;
           i64toi32_i32$3 = $18_1;
           i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
           i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
           if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
           }
           $252$hi = i64toi32_i32$2;
           i64toi32_i32$4 = $8_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
           i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
           $257_1 = i64toi32_i32$4;
           $257$hi = i64toi32_i32$2;
           i64toi32_i32$2 = $252$hi;
           i64toi32_i32$5 = i64toi32_i32$1;
           i64toi32_i32$4 = $257$hi;
           i64toi32_i32$3 = $257_1;
           i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
           i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
           if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
           }
           $18_1 = i64toi32_i32$0;
           $18$hi = i64toi32_i32$1;
          }
          i64toi32_i32$5 = $1_1;
          i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
          $19_1 = i64toi32_i32$5;
          $19$hi = i64toi32_i32$1;
          $110($0_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0);
          label$42 : {
           label$43 : {
            $14_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
            $8_1 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
            if ($14_1 >>> 0 >= $8_1 >>> 0) {
             break label$43
            }
            HEAP32[($0_1 + 4 | 0) >> 2] = $14_1 + 1 | 0;
            break label$42;
           }
           if (($111($0_1 | 0) | 0 | 0) < (0 | 0)) {
            break label$5
           }
           $8_1 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
          }
          label$44 : {
           if (!$8_1) {
            break label$44
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
          }
          $8_1 = 16;
          label$45 : {
           label$46 : {
            label$47 : {
             label$48 : {
              label$49 : {
               label$50 : {
                label$51 : {
                 switch ($16_1 + -88 | 0 | 0) {
                 default:
                  $1_1 = $16_1 + -65 | 0;
                  if ($1_1 >>> 0 > 6 >>> 0) {
                   break label$45
                  }
                  if (!((1 << $1_1 | 0) & 113 | 0)) {
                   break label$45
                  }
                 case 9:
                 case 13:
                 case 14:
                 case 15:
                  $128($3_1 + 8 | 0 | 0, $0_1 | 0, $15_1 | 0, 0 | 0);
                  i64toi32_i32$2 = $0_1;
                  i64toi32_i32$1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                  $299_1 = i64toi32_i32$1;
                  $299$hi = i64toi32_i32$5;
                  i64toi32_i32$1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
                  i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
                  $305_1 = i64toi32_i32$1;
                  $305$hi = i64toi32_i32$5;
                  i64toi32_i32$5 = 0;
                  i64toi32_i32$2 = 0;
                  i64toi32_i32$1 = $305$hi;
                  i64toi32_i32$3 = $305_1;
                  i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
                  i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
                  i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
                  i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
                  $306$hi = i64toi32_i32$0;
                  i64toi32_i32$0 = $299$hi;
                  i64toi32_i32$5 = $299_1;
                  i64toi32_i32$2 = $306$hi;
                  i64toi32_i32$3 = i64toi32_i32$4;
                  if ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0) {
                   break label$3
                  }
                  if (!$10_1) {
                   break label$45
                  }
                  i64toi32_i32$3 = $7_1;
                  i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
                  i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
                  $19_1 = i64toi32_i32$5;
                  $19$hi = i64toi32_i32$0;
                  i64toi32_i32$3 = $3_1;
                  i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
                  i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
                  $20_1 = i64toi32_i32$0;
                  $20$hi = i64toi32_i32$5;
                  switch ($15_1 | 0) {
                  case 2:
                   break label$47;
                  case 1:
                   break label$48;
                  case 0:
                   break label$49;
                  default:
                   break label$45;
                  };
                 case 3:
                 case 11:
                 case 27:
                  label$57 : {
                   if (($16_1 & 239 | 0 | 0) != (99 | 0)) {
                    break label$57
                   }
                   $1459($3_1 + 32 | 0 | 0, -1 | 0, 257 | 0) | 0;
                   HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                   if (($16_1 | 0) != (115 | 0)) {
                    break label$46
                   }
                   HEAP8[($3_1 + 65 | 0) >> 0] = 0;
                   HEAP8[($3_1 + 46 | 0) >> 0] = 0;
                   $59_1 = 0;
                   HEAP16[($3_1 + 42 | 0) >> 1] = $59_1;
                   HEAP16[($3_1 + 44 | 0) >> 1] = $59_1 >>> 16 | 0;
                   break label$46;
                  }
                  $14_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
                  $8_1 = ($14_1 | 0) == (94 | 0);
                  $1459($3_1 + 32 | 0 | 0, $8_1 | 0, 257 | 0) | 0;
                  HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                  $11_1 = $8_1 ? $6_1 + 2 | 0 : $6_1 + 1 | 0;
                  label$58 : {
                   label$59 : {
                    label$60 : {
                     label$61 : {
                      $6_1 = HEAPU8[($6_1 + ($8_1 ? 2 : 1) | 0) >> 0] | 0;
                      if (($6_1 | 0) == (45 | 0)) {
                       break label$61
                      }
                      if (($6_1 | 0) == (93 | 0)) {
                       break label$60
                      }
                      $14_1 = ($14_1 | 0) != (94 | 0);
                      $6_1 = $11_1;
                      break label$58;
                     }
                     $14_1 = ($14_1 | 0) != (94 | 0);
                     HEAP8[($3_1 + 78 | 0) >> 0] = $14_1;
                     break label$59;
                    }
                    $14_1 = ($14_1 | 0) != (94 | 0);
                    HEAP8[($3_1 + 126 | 0) >> 0] = $14_1;
                   }
                   $6_1 = $11_1 + 1 | 0;
                  }
                  label$62 : while (1) {
                   label$63 : {
                    label$64 : {
                     $8_1 = HEAPU8[$6_1 >> 0] | 0;
                     if (($8_1 | 0) == (45 | 0)) {
                      break label$64
                     }
                     if (!$8_1) {
                      break label$5
                     }
                     if (($8_1 | 0) != (93 | 0)) {
                      break label$63
                     }
                     break label$46;
                    }
                    $8_1 = 45;
                    $17_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
                    if (!$17_1) {
                     break label$63
                    }
                    if (($17_1 | 0) == (93 | 0)) {
                     break label$63
                    }
                    $11_1 = $6_1 + 1 | 0;
                    label$65 : {
                     label$66 : {
                      $6_1 = HEAPU8[($6_1 + -1 | 0) >> 0] | 0;
                      if ($6_1 >>> 0 < $17_1 >>> 0) {
                       break label$66
                      }
                      $8_1 = $17_1;
                      break label$65;
                     }
                     label$67 : while (1) {
                      $6_1 = $6_1 + 1 | 0;
                      HEAP8[(($3_1 + 32 | 0) + $6_1 | 0) >> 0] = $14_1;
                      $8_1 = HEAPU8[$11_1 >> 0] | 0;
                      if ($6_1 >>> 0 < $8_1 >>> 0) {
                       continue label$67
                      }
                      break label$67;
                     };
                    }
                    $6_1 = $11_1;
                   }
                   HEAP8[(($8_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] = $14_1;
                   $6_1 = $6_1 + 1 | 0;
                   continue label$62;
                  };
                 case 23:
                  $8_1 = 8;
                  break label$50;
                 case 12:
                 case 29:
                  $8_1 = 10;
                  break label$50;
                 case 1:
                 case 2:
                 case 4:
                 case 5:
                 case 6:
                 case 7:
                 case 8:
                 case 10:
                 case 16:
                 case 18:
                 case 19:
                 case 20:
                 case 21:
                 case 22:
                 case 25:
                 case 26:
                 case 28:
                 case 30:
                 case 31:
                  break label$45;
                 case 0:
                 case 24:
                 case 32:
                  break label$50;
                 case 17:
                  break label$51;
                 };
                }
                $8_1 = 0;
               }
               i64toi32_i32$5 = -1;
               i64toi32_i32$5 = $132($0_1 | 0, $8_1 | 0, 0 | 0, -1 | 0, i64toi32_i32$5 | 0) | 0;
               i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
               $19_1 = i64toi32_i32$5;
               $19$hi = i64toi32_i32$0;
               i64toi32_i32$3 = $0_1;
               i64toi32_i32$0 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
               i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
               $412_1 = i64toi32_i32$0;
               $412$hi = i64toi32_i32$5;
               i64toi32_i32$0 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
               i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
               $418_1 = i64toi32_i32$0;
               $418$hi = i64toi32_i32$5;
               i64toi32_i32$5 = 0;
               i64toi32_i32$3 = 0;
               i64toi32_i32$0 = $418$hi;
               i64toi32_i32$2 = $418_1;
               i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
               i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
               i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
               i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
               $419$hi = i64toi32_i32$4;
               i64toi32_i32$4 = $412$hi;
               i64toi32_i32$5 = $412_1;
               i64toi32_i32$3 = $419$hi;
               i64toi32_i32$2 = i64toi32_i32$1;
               if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0) {
                break label$3
               }
               label$68 : {
                if (($16_1 | 0) != (112 | 0)) {
                 break label$68
                }
                if (!$10_1) {
                 break label$68
                }
                i64toi32_i32$5 = $19$hi;
                HEAP32[$10_1 >> 2] = $19_1;
                break label$45;
               }
               i64toi32_i32$5 = $19$hi;
               $138($10_1 | 0, $15_1 | 0, $19_1 | 0, i64toi32_i32$5 | 0);
               break label$45;
              }
              i64toi32_i32$5 = $20$hi;
              i64toi32_i32$5 = $19$hi;
              i64toi32_i32$5 = $20$hi;
              i64toi32_i32$4 = $19$hi;
              HEAPF32[$10_1 >> 2] = Math_fround($133($20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$4 | 0));
              break label$45;
             }
             i64toi32_i32$4 = $20$hi;
             i64toi32_i32$4 = $19$hi;
             i64toi32_i32$4 = $20$hi;
             i64toi32_i32$5 = $19$hi;
             HEAPF64[$10_1 >> 3] = +$71($20_1 | 0, i64toi32_i32$4 | 0, $19_1 | 0, i64toi32_i32$5 | 0);
             break label$45;
            }
            i64toi32_i32$5 = $20$hi;
            i64toi32_i32$4 = $10_1;
            HEAP32[i64toi32_i32$4 >> 2] = $20_1;
            HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$5;
            i64toi32_i32$5 = $19$hi;
            HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $19_1;
            HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
            break label$45;
           }
           $11_1 = ($16_1 | 0) == (99 | 0);
           $14_1 = $11_1 ? $1_1 + 1 | 0 : 31;
           label$69 : {
            label$70 : {
             $17_1 = ($15_1 | 0) != (1 | 0);
             if ($17_1) {
              break label$70
             }
             $8_1 = $10_1;
             label$71 : {
              if (!$9_1) {
               break label$71
              }
              $8_1 = $1448($14_1 << 2 | 0 | 0) | 0;
              if (!$8_1) {
               break label$6
              }
             }
             i64toi32_i32$4 = $3_1;
             i64toi32_i32$5 = 0;
             HEAP32[(i64toi32_i32$4 + 296 | 0) >> 2] = 0;
             HEAP32[(i64toi32_i32$4 + 300 | 0) >> 2] = i64toi32_i32$5;
             $1_1 = 0;
             $12_1 = ($9_1 | 0) != (0 | 0);
             label$72 : while (1) {
              $13_1 = $8_1;
              label$73 : {
               label$74 : while (1) {
                label$75 : {
                 label$76 : {
                  $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                  if ($8_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                   break label$76
                  }
                  HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + 1 | 0;
                  $8_1 = HEAPU8[$8_1 >> 0] | 0;
                  break label$75;
                 }
                 $8_1 = $111($0_1 | 0) | 0;
                }
                if (!(HEAPU8[(($8_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0)) {
                 break label$73
                }
                HEAP8[($3_1 + 27 | 0) >> 0] = $8_1;
                $8_1 = $134($3_1 + 28 | 0 | 0, $3_1 + 27 | 0 | 0, 1 | 0, $3_1 + 296 | 0 | 0) | 0;
                if (($8_1 | 0) == (-2 | 0)) {
                 continue label$74
                }
                if (($8_1 | 0) == (-1 | 0)) {
                 break label$7
                }
                label$77 : {
                 if (!$13_1) {
                  break label$77
                 }
                 HEAP32[($13_1 + ($1_1 << 2 | 0) | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
                 $1_1 = $1_1 + 1 | 0;
                }
                if (($12_1 & ($1_1 | 0) == ($14_1 | 0) | 0 | 0) != (1 | 0)) {
                 continue label$74
                }
                break label$74;
               };
               $14_1 = $14_1 << 1 | 0 | 1 | 0;
               $8_1 = $1450($13_1 | 0, $14_1 << 2 | 0 | 0) | 0;
               if ($8_1) {
                continue label$72
               }
               break label$7;
              }
              break label$72;
             };
             if (!($135($3_1 + 296 | 0 | 0) | 0)) {
              break label$7
             }
             $12_1 = 0;
             break label$69;
            }
            label$78 : {
             if (!$9_1) {
              break label$78
             }
             $1_1 = 0;
             $8_1 = $1448($14_1 | 0) | 0;
             if (!$8_1) {
              break label$6
             }
             label$79 : while (1) {
              $12_1 = $8_1;
              label$80 : while (1) {
               label$81 : {
                label$82 : {
                 $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                 if ($8_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                  break label$82
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + 1 | 0;
                 $8_1 = HEAPU8[$8_1 >> 0] | 0;
                 break label$81;
                }
                $8_1 = $111($0_1 | 0) | 0;
               }
               label$83 : {
                if (HEAPU8[(($8_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                 break label$83
                }
                $13_1 = 0;
                break label$69;
               }
               HEAP8[($12_1 + $1_1 | 0) >> 0] = $8_1;
               $1_1 = $1_1 + 1 | 0;
               if (($1_1 | 0) != ($14_1 | 0)) {
                continue label$80
               }
               break label$80;
              };
              $13_1 = 0;
              $14_1 = $14_1 << 1 | 0 | 1 | 0;
              $8_1 = $1450($12_1 | 0, $14_1 | 0) | 0;
              if ($8_1) {
               continue label$79
              }
              break label$5;
             };
            }
            $1_1 = 0;
            label$84 : {
             if (!$10_1) {
              break label$84
             }
             label$85 : while (1) {
              label$86 : {
               label$87 : {
                $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if ($8_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                 break label$87
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + 1 | 0;
                $8_1 = HEAPU8[$8_1 >> 0] | 0;
                break label$86;
               }
               $8_1 = $111($0_1 | 0) | 0;
              }
              label$88 : {
               if (HEAPU8[(($8_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                break label$88
               }
               $13_1 = 0;
               $12_1 = $10_1;
               break label$69;
              }
              HEAP8[($10_1 + $1_1 | 0) >> 0] = $8_1;
              $1_1 = $1_1 + 1 | 0;
              continue label$85;
             };
            }
            label$89 : while (1) {
             label$90 : {
              label$91 : {
               $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
               if ($1_1 >>> 0 >= (HEAP32[($0_1 + 104 | 0) >> 2] | 0) >>> 0) {
                break label$91
               }
               HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
               $1_1 = HEAPU8[$1_1 >> 0] | 0;
               break label$90;
              }
              $1_1 = $111($0_1 | 0) | 0;
             }
             if (HEAPU8[(($1_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
              continue label$89
             }
             break label$89;
            };
            $12_1 = 0;
            $13_1 = 0;
            $1_1 = 0;
           }
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           label$92 : {
            if (!(HEAP32[($0_1 + 104 | 0) >> 2] | 0)) {
             break label$92
            }
            $8_1 = $8_1 + -1 | 0;
            HEAP32[($0_1 + 4 | 0) >> 2] = $8_1;
           }
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
           i64toi32_i32$4 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
           $623_1 = i64toi32_i32$5;
           $623$hi = i64toi32_i32$4;
           i64toi32_i32$5 = $8_1 - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
           i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
           $628_1 = i64toi32_i32$5;
           $628$hi = i64toi32_i32$4;
           i64toi32_i32$4 = $623$hi;
           i64toi32_i32$2 = $623_1;
           i64toi32_i32$5 = $628$hi;
           i64toi32_i32$3 = $628_1;
           i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
           i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
           if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
           }
           $20_1 = i64toi32_i32$0;
           $20$hi = i64toi32_i32$1;
           if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
            break label$3
           }
           label$93 : {
            if (($16_1 | 0) != (99 | 0)) {
             break label$93
            }
            i64toi32_i32$1 = $20$hi;
            i64toi32_i32$1 = $19$hi;
            i64toi32_i32$1 = $20$hi;
            i64toi32_i32$4 = $20_1;
            i64toi32_i32$2 = $19$hi;
            i64toi32_i32$3 = $19_1;
            if ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
             break label$3
            }
           }
           label$94 : {
            if (!$9_1) {
             break label$94
            }
            label$95 : {
             if ($17_1) {
              break label$95
             }
             HEAP32[$10_1 >> 2] = $13_1;
             break label$94;
            }
            HEAP32[$10_1 >> 2] = $12_1;
           }
           if ($11_1) {
            break label$45
           }
           label$96 : {
            if (!$13_1) {
             break label$96
            }
            HEAP32[($13_1 + ($1_1 << 2 | 0) | 0) >> 2] = 0;
           }
           label$97 : {
            if ($12_1) {
             break label$97
            }
            $12_1 = 0;
            break label$45;
           }
           HEAP8[($12_1 + $1_1 | 0) >> 0] = 0;
          }
          i64toi32_i32$3 = $0_1;
          i64toi32_i32$4 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
          $656$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $18$hi;
          i64toi32_i32$1 = $656$hi;
          i64toi32_i32$3 = i64toi32_i32$4;
          i64toi32_i32$4 = $18$hi;
          i64toi32_i32$2 = $18_1;
          i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
          i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
           i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
          }
          $658$hi = i64toi32_i32$0;
          i64toi32_i32$3 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0;
          i64toi32_i32$0 = i64toi32_i32$3 >> 31 | 0;
          $664_1 = i64toi32_i32$3;
          $664$hi = i64toi32_i32$0;
          i64toi32_i32$0 = $658$hi;
          i64toi32_i32$1 = i64toi32_i32$5;
          i64toi32_i32$3 = $664$hi;
          i64toi32_i32$2 = $664_1;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $18_1 = i64toi32_i32$4;
          $18$hi = i64toi32_i32$5;
          $4_1 = $4_1 + (($10_1 | 0) != (0 | 0)) | 0;
         }
         $1_1 = $6_1 + 1 | 0;
         $6_1 = HEAPU8[($6_1 + 1 | 0) >> 0] | 0;
         if ($6_1) {
          continue label$8
         }
         break label$2;
        };
       }
       $12_1 = 0;
       break label$5;
      }
      $12_1 = 0;
      $13_1 = 0;
     }
     if ($4_1) {
      break label$3
     }
    }
    $4_1 = -1;
   }
   if (!$9_1) {
    break label$2
   }
   $1449($12_1 | 0);
   $1449($13_1 | 0);
  }
  label$98 : {
   if (!$5_1) {
    break label$98
   }
   $1465($0_1 | 0);
  }
  global$0 = $3_1 + 304 | 0;
  return $4_1 | 0;
 }
 
 function $137($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $0_1 + ($1_1 >>> 0 > 1 >>> 0 ? ($1_1 << 2 | 0) + -4 | 0 : 0) | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = $0_1 + 4 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $138($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + 2 | 0 | 0) {
    case 0:
     i64toi32_i32$0 = $2$hi;
     HEAP8[$0_1 >> 0] = $2_1;
     return;
    case 1:
     i64toi32_i32$0 = $2$hi;
     HEAP16[$0_1 >> 1] = $2_1;
     return;
    case 2:
    case 3:
     i64toi32_i32$0 = $2$hi;
     HEAP32[$0_1 >> 2] = $2_1;
     return;
    case 5:
     break label$2;
    default:
     break label$1;
    };
   }
   i64toi32_i32$0 = $2$hi;
   HEAP32[$0_1 >> 2] = $2_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function $139($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  $4_1 = $2_1 + 256 | 0;
  $5_1 = $65($3_1 | 0, 0 | 0, $4_1 | 0) | 0;
  $4_1 = $5_1 ? $5_1 - $3_1 | 0 : $4_1;
  $2_1 = $4_1 >>> 0 < $2_1 >>> 0 ? $4_1 : $2_1;
  $1458($1_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
  $4_1 = $3_1 + $4_1 | 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + $2_1 | 0;
  return $2_1 | 0;
 }
 
 function $140($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  $3_1 = $1459($3_1 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($3_1 + 76 | 0) >> 2] = -1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = 6;
  HEAP32[($3_1 + 84 | 0) >> 2] = $0_1;
  $0_1 = $136($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 144 | 0;
  return $0_1 | 0;
 }
 
 function $141($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $139($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $142($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAPU8[$1_1 >> 0] | 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   if (($3_1 | 0) != ($2_1 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    if (!$3_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) == ($2_1 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 - ($2_1 & 255 | 0) | 0 | 0;
 }
 
 function $143() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  label$1 : {
   if (fimport$2($0_1 + 12 | 0 | 0, $0_1 + 8 | 0 | 0) | 0) {
    break label$1
   }
   $1_1 = $1448(((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) + 4 | 0 | 0) | 0;
   HEAP32[(0 + 15028 | 0) >> 2] = $1_1;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    $1_1 = $1448(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    HEAP32[((HEAP32[(0 + 15028 | 0) >> 2] | 0) + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
    if (!(fimport$3(HEAP32[(0 + 15028 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 15028 | 0) >> 2] = 0;
  }
  global$0 = $0_1 + 16 | 0;
 }
 
 function $144($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = $1_1 & 255 | 0;
    if (!$2_1) {
     break label$2
    }
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $3_1 = HEAPU8[$0_1 >> 0] | 0;
      if (!$3_1) {
       break label$1
      }
      if (($3_1 | 0) == ($1_1 & 255 | 0 | 0)) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      if ($0_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $2_1 = Math_imul($2_1, 16843009);
     label$6 : while (1) {
      $3_1 = $3_1 ^ $2_1 | 0;
      if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$5
      }
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $0_1 = $0_1 + 4 | 0;
      if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     label$8 : while (1) {
      $3_1 = $0_1;
      $2_1 = HEAPU8[$3_1 >> 0] | 0;
      if (!$2_1) {
       break label$7
      }
      $0_1 = $3_1 + 1 | 0;
      if (($2_1 | 0) != ($1_1 & 255 | 0 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    return $3_1 | 0;
   }
   return $0_1 + ($1466($0_1 | 0) | 0) | 0 | 0;
  }
  return $0_1 | 0;
 }
 
 function $145($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $144($0_1 | 0, $1_1 | 0) | 0;
  return ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0) ? $0_1 : 0) | 0;
 }
 
 function $146($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return 0 | 0;
  }
  $3_1 = 0;
  label$2 : {
   $4_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$4_1) {
    break label$2
   }
   label$3 : {
    label$4 : while (1) {
     $5_1 = HEAPU8[$1_1 >> 0] | 0;
     if (!$5_1) {
      break label$3
     }
     $2_1 = $2_1 + -1 | 0;
     if (!$2_1) {
      break label$3
     }
     if (($4_1 & 255 | 0 | 0) != ($5_1 | 0)) {
      break label$3
     }
     $1_1 = $1_1 + 1 | 0;
     $4_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
     $0_1 = $0_1 + 1 | 0;
     if ($4_1) {
      continue label$4
     }
     break label$2;
    };
   }
   $3_1 = $4_1;
  }
  return ($3_1 & 255 | 0) - (HEAPU8[$1_1 >> 0] | 0) | 0 | 0;
 }
 
 function $147($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $4_1 = 0, $2_1 = 0;
  $1_1 = 0;
  $2_1 = $1466($0_1 | 0) | 0;
  label$1 : {
   if (!(HEAP32[(0 + 15028 | 0) >> 2] | 0)) {
    break label$1
   }
   if (!(HEAPU8[$0_1 >> 0] | 0)) {
    break label$1
   }
   if ($145($0_1 | 0, 61 | 0) | 0) {
    break label$1
   }
   $1_1 = 0;
   $3_1 = HEAP32[(HEAP32[(0 + 15028 | 0) >> 2] | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   label$2 : {
    label$3 : while (1) {
     $4_1 = $146($0_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
     $3_1 = HEAP32[(0 + 15028 | 0) >> 2] | 0;
     label$4 : {
      if ($4_1) {
       break label$4
      }
      $4_1 = (HEAP32[($3_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0) + $2_1 | 0;
      if ((HEAPU8[$4_1 >> 0] | 0 | 0) == (61 | 0)) {
       break label$2
      }
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = HEAP32[($3_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
     if ($3_1) {
      continue label$3
     }
     break label$3;
    };
    return 0 | 0;
   }
   $1_1 = $4_1 + 1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $148($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   if (HEAPU8[$1_1 >> 0] | 0) {
    break label$1
   }
   label$2 : {
    $1_1 = $147(1572 | 0) | 0;
    if (!$1_1) {
     break label$2
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   label$3 : {
    $1_1 = $147(Math_imul($0_1, 12) + 2992 | 0 | 0) | 0;
    if (!$1_1) {
     break label$3
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   label$4 : {
    $1_1 = $147(1579 | 0) | 0;
    if (!$1_1) {
     break label$4
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break label$1
    }
   }
   $1_1 = 1601;
  }
  $2_1 = 0;
  label$5 : {
   label$6 : {
    label$7 : while (1) {
     $3_1 = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
     if (!$3_1) {
      break label$6
     }
     if (($3_1 | 0) == (47 | 0)) {
      break label$6
     }
     $3_1 = 15;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != (15 | 0)) {
      continue label$7
     }
     break label$5;
    };
   }
   $3_1 = $2_1;
  }
  $4_1 = 1601;
  label$8 : {
   label$9 : {
    label$10 : {
     label$11 : {
      label$12 : {
       $2_1 = HEAPU8[$1_1 >> 0] | 0;
       if (($2_1 | 0) == (46 | 0)) {
        break label$12
       }
       if (HEAPU8[($1_1 + $3_1 | 0) >> 0] | 0) {
        break label$12
       }
       $4_1 = $1_1;
       if (($2_1 | 0) != (67 | 0)) {
        break label$11
       }
      }
      if (!(HEAPU8[($4_1 + 1 | 0) >> 0] | 0)) {
       break label$10
      }
     }
     if (!($142($4_1 | 0, 1601 | 0) | 0)) {
      break label$10
     }
     if ($142($4_1 | 0, 1547 | 0) | 0) {
      break label$9
     }
    }
    label$13 : {
     if ($0_1) {
      break label$13
     }
     $2_1 = 2916;
     if ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0 | 0) == (46 | 0)) {
      break label$8
     }
    }
    return 0 | 0;
   }
   label$14 : {
    $2_1 = HEAP32[(0 + 15040 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$14
    }
    label$15 : while (1) {
     if (!($142($4_1 | 0, $2_1 + 8 | 0 | 0) | 0)) {
      break label$8
     }
     $2_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
     if ($2_1) {
      continue label$15
     }
     break label$15;
    };
   }
   $104(15032 | 0);
   label$16 : {
    $2_1 = HEAP32[(0 + 15040 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$16
    }
    label$17 : while (1) {
     label$18 : {
      if ($142($4_1 | 0, $2_1 + 8 | 0 | 0) | 0) {
       break label$18
      }
      $105(15032 | 0);
      return $2_1 | 0;
     }
     $2_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
     if ($2_1) {
      continue label$17
     }
     break label$17;
    };
   }
   label$19 : {
    label$20 : {
     $2_1 = $1448(28 | 0) | 0;
     if ($2_1) {
      break label$20
     }
     $2_1 = 0;
     break label$19;
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 2920 | 0) >> 2] | 0;
    HEAP32[$2_1 >> 2] = HEAP32[(i64toi32_i32$2 + 2916 | 0) >> 2] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    $1_1 = $2_1 + 8 | 0;
    $1458($1_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    HEAP8[($1_1 + $3_1 | 0) >> 0] = 0;
    HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[(0 + 15040 | 0) >> 2] | 0;
    HEAP32[(0 + 15040 | 0) >> 2] = $2_1;
   }
   $105(15032 | 0);
   $2_1 = $2_1 | $0_1 | 0 ? $2_1 : 2916;
  }
  return $2_1 | 0;
 }
 
 function $149($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) != (2968 | 0) & (($0_1 | 0) != (0 | 0) & ($0_1 | 0) != (2944 | 0) | 0) | 0 | 0;
 }
 
 function $150($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $69_1 = 0, $75_1 = 0, $81_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (!($149($2_1 | 0) | 0)) {
     break label$2
    }
    $4_1 = 0;
    label$3 : while (1) {
     label$4 : {
      if (!(($0_1 >>> $4_1 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] = $148($4_1 | 0, $1_1 | 0) | 0;
     }
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) != (6 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   $5_1 = 0;
   $4_1 = 0;
   label$5 : while (1) {
    $6_1 = (1 << $4_1 | 0) & $0_1 | 0;
    label$6 : {
     label$7 : {
      if (!$2_1) {
       break label$7
      }
      if ($6_1) {
       break label$7
      }
      $6_1 = HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
      break label$6;
     }
     $6_1 = $148($4_1 | 0, ($6_1 ? $1_1 : 1661) | 0) | 0;
    }
    HEAP32[(($3_1 + 8 | 0) + ($4_1 << 2 | 0) | 0) >> 2] = $6_1;
    $5_1 = $5_1 + (($6_1 | 0) != (0 | 0)) | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) != (6 | 0)) {
     continue label$5
    }
    break label$5;
   };
   $2_1 = 2944;
   label$8 : {
    label$9 : {
     switch ($5_1 | 0) {
     case 0:
      break label$1;
     case 1:
      break label$9;
     default:
      break label$8;
     };
    }
    if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (2916 | 0)) {
     break label$8
    }
    $2_1 = 2968;
    break label$1;
   }
   $2_1 = $1448(24 | 0) | 0;
   if (!$2_1) {
    break label$1
   }
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   $69_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[$2_1 >> 2] = $69_1;
   HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = ($3_1 + 8 | 0) + 16 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $75_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1 + 16 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $75_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = ($3_1 + 8 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $81_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1 + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $81_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  }
  global$0 = $3_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $151($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  $4_1 = -1;
  label$1 : {
   $2_1 = $85(0 | 0, 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   $5_1 = $2_1 + 1 | 0;
   $2_1 = $1448($5_1 | 0) | 0;
   HEAP32[$0_1 >> 2] = $2_1;
   if (!$2_1) {
    break label$1
   }
   $4_1 = $85($2_1 | 0, $5_1 | 0, $1_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $152($0_1) {
  $0_1 = $0_1 | 0;
  return ($63($0_1 | 0) | 0 | 0) != (0 | 0) | (($0_1 | 32 | 0) + -97 | 0) >>> 0 < 6 >>> 0 | 0 | 0;
 }
 
 function $153($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $152($0_1 | 0) | 0 | 0;
 }
 
 function $154($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $140($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $155($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($149($0_1 | 0) | 0)) {
    break label$1
   }
   $1449($0_1 | 0);
  }
 }
 
 function $156($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = $0_1;
  label$1 : while (1) {
   $2_1 = $1_1;
   $1_1 = $2_1 + 4 | 0;
   if (HEAP32[$2_1 >> 2] | 0) {
    continue label$1
   }
   break label$1;
  };
  return ($2_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $157($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $0_1;
   label$2 : while (1) {
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $158() {
  return 3064 | 0;
 }
 
 function $159() {
  return 3840 | 0;
 }
 
 function $160() {
  return 5392 | 0;
 }
 
 function $161($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $5_1 = 0, $8_1 = 0, $7_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!$0_1) {
        break label$5
       }
       if ($2_1 >>> 0 >= 4 >>> 0) {
        break label$4
       }
       $5_1 = $2_1;
       break label$3;
      }
      $6_1 = 0;
      label$6 : {
       $0_1 = HEAP32[$1_1 >> 2] | 0;
       $5_1 = HEAP32[$0_1 >> 2] | 0;
       if ($5_1) {
        break label$6
       }
       $7_1 = 0;
       break label$1;
      }
      label$7 : while (1) {
       $8_1 = 1;
       label$8 : {
        if ($5_1 >>> 0 < 128 >>> 0) {
         break label$8
        }
        $7_1 = -1;
        $8_1 = $66($4_1 + 12 | 0 | 0, $5_1 | 0, 0 | 0) | 0;
        if (($8_1 | 0) == (-1 | 0)) {
         break label$1
        }
       }
       $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       $0_1 = $0_1 + 4 | 0;
       $6_1 = $8_1 + $6_1 | 0;
       $7_1 = $6_1;
       if ($5_1) {
        continue label$7
       }
       break label$1;
      };
     }
     $8_1 = HEAP32[$1_1 >> 2] | 0;
     $5_1 = $2_1;
     label$9 : while (1) {
      label$10 : {
       label$11 : {
        $6_1 = HEAP32[$8_1 >> 2] | 0;
        if (($6_1 + -1 | 0) >>> 0 < 127 >>> 0) {
         break label$11
        }
        label$12 : {
         if ($6_1) {
          break label$12
         }
         HEAP8[$0_1 >> 0] = 0;
         HEAP32[$1_1 >> 2] = 0;
         break label$2;
        }
        $7_1 = -1;
        $6_1 = $66($0_1 | 0, $6_1 | 0, 0 | 0) | 0;
        if (($6_1 | 0) == (-1 | 0)) {
         break label$1
        }
        $5_1 = $5_1 - $6_1 | 0;
        $0_1 = $0_1 + $6_1 | 0;
        break label$10;
       }
       HEAP8[$0_1 >> 0] = $6_1;
       $5_1 = $5_1 + -1 | 0;
       $0_1 = $0_1 + 1 | 0;
       $8_1 = HEAP32[$1_1 >> 2] | 0;
      }
      $8_1 = $8_1 + 4 | 0;
      HEAP32[$1_1 >> 2] = $8_1;
      if ($5_1 >>> 0 > 3 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    label$13 : {
     if (!$5_1) {
      break label$13
     }
     $8_1 = HEAP32[$1_1 >> 2] | 0;
     label$14 : while (1) {
      label$15 : {
       label$16 : {
        $6_1 = HEAP32[$8_1 >> 2] | 0;
        if (($6_1 + -1 | 0) >>> 0 < 127 >>> 0) {
         break label$16
        }
        label$17 : {
         if ($6_1) {
          break label$17
         }
         HEAP8[$0_1 >> 0] = 0;
         HEAP32[$1_1 >> 2] = 0;
         break label$2;
        }
        $7_1 = -1;
        $6_1 = $66($4_1 + 12 | 0 | 0, $6_1 | 0, 0 | 0) | 0;
        if (($6_1 | 0) == (-1 | 0)) {
         break label$1
        }
        if ($5_1 >>> 0 < $6_1 >>> 0) {
         break label$2
        }
        $66($0_1 | 0, HEAP32[$8_1 >> 2] | 0 | 0, 0 | 0) | 0;
        $5_1 = $5_1 - $6_1 | 0;
        $0_1 = $0_1 + $6_1 | 0;
        break label$15;
       }
       HEAP8[$0_1 >> 0] = $6_1;
       $5_1 = $5_1 + -1 | 0;
       $0_1 = $0_1 + 1 | 0;
       $8_1 = HEAP32[$1_1 >> 2] | 0;
      }
      $8_1 = $8_1 + 4 | 0;
      HEAP32[$1_1 >> 2] = $8_1;
      if ($5_1) {
       continue label$14
      }
      break label$14;
     };
    }
    $7_1 = $2_1;
    break label$1;
   }
   $7_1 = $2_1 - $5_1 | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $162($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $9_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
  $7_1 = $0_1 ? $3_1 : 256;
  $3_1 = $0_1 ? $0_1 : $5_1 + 16 | 0;
  $8_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$6_1) {
      break label$3
     }
     if (!$7_1) {
      break label$3
     }
     label$4 : {
      label$5 : {
       $9_1 = $7_1 >>> 0 <= $2_1 >>> 0;
       if (!$9_1) {
        break label$5
       }
       $8_1 = 0;
       break label$4;
      }
      $8_1 = 0;
      if ($2_1 >>> 0 > 32 >>> 0) {
       break label$4
      }
      $8_1 = 0;
      break label$2;
     }
     label$6 : while (1) {
      $9_1 = $9_1 & 1 | 0 ? $7_1 : $2_1;
      $2_1 = $2_1 - $9_1 | 0;
      label$7 : {
       $9_1 = $161($3_1 | 0, $5_1 + 12 | 0 | 0, $9_1 | 0, 0 | 0) | 0;
       if (($9_1 | 0) != (-1 | 0)) {
        break label$7
       }
       $7_1 = 0;
       $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       $8_1 = -1;
       break label$3;
      }
      $10_1 = ($3_1 | 0) == ($5_1 + 16 | 0 | 0) ? 0 : $9_1;
      $3_1 = $3_1 + $10_1 | 0;
      $7_1 = $7_1 - $10_1 | 0;
      $8_1 = $9_1 + $8_1 | 0;
      $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
      if (!$6_1) {
       break label$3
      }
      if (!$7_1) {
       break label$3
      }
      $9_1 = $2_1 >>> 0 >= $7_1 >>> 0;
      if ($9_1) {
       continue label$6
      }
      if ($2_1 >>> 0 < 33 >>> 0) {
       break label$2
      }
      continue label$6;
     };
    }
    if (!$6_1) {
     break label$1
    }
   }
   if (!$7_1) {
    break label$1
   }
   if (!$2_1) {
    break label$1
   }
   $10_1 = $8_1;
   label$8 : while (1) {
    label$9 : {
     label$10 : {
      label$11 : {
       $9_1 = $66($3_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0;
       if (($9_1 + 1 | 0) >>> 0 > 1 >>> 0) {
        break label$11
       }
       $8_1 = -1;
       if ($9_1) {
        break label$1
       }
       HEAP32[($5_1 + 12 | 0) >> 2] = 0;
       break label$10;
      }
      $6_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0;
      HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
      $10_1 = $9_1 + $10_1 | 0;
      $7_1 = $7_1 - $9_1 | 0;
      if ($7_1) {
       break label$9
      }
     }
     $8_1 = $10_1;
     break label$1;
    }
    $3_1 = $3_1 + $9_1 | 0;
    $8_1 = $10_1;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$8
    }
    break label$8;
   };
  }
  label$12 : {
   if (!$0_1) {
    break label$12
   }
   HEAP32[$1_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $5_1 + 272 | 0;
  return $8_1 | 0;
 }
 
 function $163($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              if (!$3_1) {
               break label$12
              }
              $5_1 = HEAP32[$3_1 >> 2] | 0;
              if (!$5_1) {
               break label$12
              }
              label$13 : {
               if ($0_1) {
                break label$13
               }
               $3_1 = $2_1;
               break label$10;
              }
              HEAP32[$3_1 >> 2] = 0;
              $3_1 = $2_1;
              break label$11;
             }
             label$14 : {
              label$15 : {
               if (HEAP32[(HEAP32[(($62() | 0) + 168 | 0) >> 2] | 0) >> 2] | 0) {
                break label$15
               }
               if (!$0_1) {
                break label$14
               }
               if (!$2_1) {
                break label$1
               }
               $5_1 = $2_1;
               label$16 : {
                label$17 : while (1) {
                 $3_1 = HEAP8[$4_1 >> 0] | 0;
                 if (!$3_1) {
                  break label$16
                 }
                 HEAP32[$0_1 >> 2] = $3_1 & 57343 | 0;
                 $0_1 = $0_1 + 4 | 0;
                 $4_1 = $4_1 + 1 | 0;
                 $5_1 = $5_1 + -1 | 0;
                 if ($5_1) {
                  continue label$17
                 }
                 break label$1;
                };
               }
               HEAP32[$0_1 >> 2] = 0;
               HEAP32[$1_1 >> 2] = 0;
               return $2_1 - $5_1 | 0 | 0;
              }
              $3_1 = $2_1;
              if (!$0_1) {
               break label$9
              }
              $3_1 = $2_1;
              $6_1 = 0;
              break label$7;
             }
             return $1466($4_1 | 0) | 0 | 0;
            }
            $6_1 = 1;
            break label$7;
           }
           $6_1 = 0;
           break label$8;
          }
          $6_1 = 1;
         }
         label$18 : while (1) {
          label$19 : {
           switch ($6_1 | 0) {
           case 0:
            $6_1 = (HEAPU8[$4_1 >> 0] | 0) >>> 3 | 0;
            if (($6_1 + -16 | 0 | (($5_1 >> 26 | 0) + $6_1 | 0) | 0) >>> 0 > 7 >>> 0) {
             break label$6
            }
            $6_1 = $4_1 + 1 | 0;
            label$21 : {
             label$22 : {
              if ($5_1 & 33554432 | 0) {
               break label$22
              }
              $4_1 = $6_1;
              break label$21;
             }
             label$23 : {
              if (((HEAPU8[$6_1 >> 0] | 0) & 192 | 0 | 0) == (128 | 0)) {
               break label$23
              }
              $4_1 = $4_1 + -1 | 0;
              break label$4;
             }
             $6_1 = $4_1 + 2 | 0;
             label$24 : {
              if ($5_1 & 524288 | 0) {
               break label$24
              }
              $4_1 = $6_1;
              break label$21;
             }
             label$25 : {
              if (((HEAPU8[$6_1 >> 0] | 0) & 192 | 0 | 0) == (128 | 0)) {
               break label$25
              }
              $4_1 = $4_1 + -1 | 0;
              break label$4;
             }
             $4_1 = $4_1 + 3 | 0;
            }
            $3_1 = $3_1 + -1 | 0;
            $6_1 = 1;
            continue label$18;
           default:
            break label$19;
           };
          }
          label$26 : while (1) {
           $5_1 = HEAPU8[$4_1 >> 0] | 0;
           label$27 : {
            if ($4_1 & 3 | 0) {
             break label$27
            }
            if (($5_1 + -1 | 0) >>> 0 > 126 >>> 0) {
             break label$27
            }
            $5_1 = HEAP32[$4_1 >> 2] | 0;
            if (($5_1 + -16843009 | 0 | $5_1 | 0) & -2139062144 | 0) {
             break label$27
            }
            label$28 : while (1) {
             $3_1 = $3_1 + -4 | 0;
             $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
             $6_1 = $4_1 + 4 | 0;
             $4_1 = $6_1;
             if (!(($5_1 | ($5_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
              continue label$28
             }
             break label$28;
            };
            $4_1 = $6_1;
           }
           label$29 : {
            $6_1 = $5_1 & 255 | 0;
            if (($6_1 + -1 | 0) >>> 0 > 126 >>> 0) {
             break label$29
            }
            $3_1 = $3_1 + -1 | 0;
            $4_1 = $4_1 + 1 | 0;
            continue label$26;
           }
           break label$26;
          };
          $6_1 = $6_1 + -194 | 0;
          if ($6_1 >>> 0 > 50 >>> 0) {
           break label$5
          }
          $4_1 = $4_1 + 1 | 0;
          $5_1 = HEAP32[(2688 + ($6_1 << 2 | 0) | 0) >> 2] | 0;
          $6_1 = 0;
          continue label$18;
         };
        }
        label$30 : while (1) {
         label$31 : {
          switch ($6_1 | 0) {
          case 0:
           if (!$3_1) {
            break label$1
           }
           label$33 : {
            label$34 : while (1) {
             label$35 : {
              label$36 : {
               label$37 : {
                $6_1 = HEAPU8[$4_1 >> 0] | 0;
                $7_1 = $6_1 + -1 | 0;
                if ($7_1 >>> 0 <= 126 >>> 0) {
                 break label$37
                }
                $5_1 = $6_1;
                break label$36;
               }
               if ($4_1 & 3 | 0) {
                break label$35
               }
               if ($3_1 >>> 0 < 5 >>> 0) {
                break label$35
               }
               label$38 : {
                label$39 : while (1) {
                 $5_1 = HEAP32[$4_1 >> 2] | 0;
                 if (($5_1 + -16843009 | 0 | $5_1 | 0) & -2139062144 | 0) {
                  break label$38
                 }
                 HEAP32[$0_1 >> 2] = $5_1 & 255 | 0;
                 HEAP32[($0_1 + 4 | 0) >> 2] = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
                 HEAP32[($0_1 + 8 | 0) >> 2] = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
                 HEAP32[($0_1 + 12 | 0) >> 2] = HEAPU8[($4_1 + 3 | 0) >> 0] | 0;
                 $0_1 = $0_1 + 16 | 0;
                 $4_1 = $4_1 + 4 | 0;
                 $3_1 = $3_1 + -4 | 0;
                 if ($3_1 >>> 0 > 4 >>> 0) {
                  continue label$39
                 }
                 break label$39;
                };
                $5_1 = HEAPU8[$4_1 >> 0] | 0;
               }
               $6_1 = $5_1 & 255 | 0;
               $7_1 = $6_1 + -1 | 0;
              }
              if ($7_1 >>> 0 > 126 >>> 0) {
               break label$33
              }
             }
             HEAP32[$0_1 >> 2] = $6_1;
             $0_1 = $0_1 + 4 | 0;
             $4_1 = $4_1 + 1 | 0;
             $3_1 = $3_1 + -1 | 0;
             if (!$3_1) {
              break label$1
             }
             continue label$34;
            };
           }
           $6_1 = $6_1 + -194 | 0;
           if ($6_1 >>> 0 > 50 >>> 0) {
            break label$5
           }
           $4_1 = $4_1 + 1 | 0;
           $5_1 = HEAP32[(2688 + ($6_1 << 2 | 0) | 0) >> 2] | 0;
           $6_1 = 1;
           continue label$30;
          default:
           break label$31;
          };
         }
         $7_1 = HEAPU8[$4_1 >> 0] | 0;
         $6_1 = $7_1 >>> 3 | 0;
         if (($6_1 + -16 | 0 | ($6_1 + ($5_1 >> 26 | 0) | 0) | 0) >>> 0 > 7 >>> 0) {
          break label$6
         }
         $8_1 = $4_1 + 1 | 0;
         label$40 : {
          label$41 : {
           label$42 : {
            label$43 : {
             $6_1 = $7_1 + -128 | 0 | ($5_1 << 6 | 0) | 0;
             if (($6_1 | 0) <= (-1 | 0)) {
              break label$43
             }
             $4_1 = $8_1;
             break label$42;
            }
            $7_1 = (HEAPU8[$8_1 >> 0] | 0) + -128 | 0;
            if ($7_1 >>> 0 > 63 >>> 0) {
             break label$41
            }
            $8_1 = $4_1 + 2 | 0;
            label$44 : {
             $6_1 = $7_1 | ($6_1 << 6 | 0) | 0;
             if (($6_1 | 0) <= (-1 | 0)) {
              break label$44
             }
             $4_1 = $8_1;
             break label$42;
            }
            $7_1 = (HEAPU8[$8_1 >> 0] | 0) + -128 | 0;
            if ($7_1 >>> 0 > 63 >>> 0) {
             break label$41
            }
            $4_1 = $4_1 + 3 | 0;
            $6_1 = $7_1 | ($6_1 << 6 | 0) | 0;
           }
           HEAP32[$0_1 >> 2] = $6_1;
           $3_1 = $3_1 + -1 | 0;
           $0_1 = $0_1 + 4 | 0;
           break label$40;
          }
          HEAP32[($57() | 0) >> 2] = 25;
          $4_1 = $4_1 + -1 | 0;
          break label$3;
         }
         $6_1 = 0;
         continue label$30;
        };
       }
       $4_1 = $4_1 + -1 | 0;
       if ($5_1) {
        break label$4
       }
       $5_1 = HEAPU8[$4_1 >> 0] | 0;
      }
      if ($5_1 & 255 | 0) {
       break label$4
      }
      label$45 : {
       if (!$0_1) {
        break label$45
       }
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$1_1 >> 2] = 0;
      }
      return $2_1 - $3_1 | 0 | 0;
     }
     HEAP32[($57() | 0) >> 2] = 25;
     if (!$0_1) {
      break label$2
     }
    }
    HEAP32[$1_1 >> 2] = $4_1;
   }
   return -1 | 0;
  }
  HEAP32[$1_1 >> 2] = $4_1;
  return $2_1 | 0;
 }
 
 function $164($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $9_1 = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 1040 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
  $7_1 = $0_1 ? $3_1 : 256;
  $8_1 = $0_1 ? $0_1 : $5_1 + 16 | 0;
  $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$6_1) {
      break label$3
     }
     if (!$7_1) {
      break label$3
     }
     $9_1 = $2_1 >>> 2 | 0;
     $10_1 = $9_1 >>> 0 >= $7_1 >>> 0;
     $3_1 = 0;
     label$4 : {
      if ($2_1 >>> 0 > 131 >>> 0) {
       break label$4
      }
      if ($9_1 >>> 0 < $7_1 >>> 0) {
       break label$2
      }
     }
     label$5 : while (1) {
      $9_1 = $10_1 & 1 | 0 ? $7_1 : $9_1;
      $2_1 = $2_1 - $9_1 | 0;
      label$6 : {
       $9_1 = $163($8_1 | 0, $5_1 + 12 | 0 | 0, $9_1 | 0, $4_1 | 0) | 0;
       if (($9_1 | 0) != (-1 | 0)) {
        break label$6
       }
       $7_1 = 0;
       $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       $3_1 = -1;
       break label$3;
      }
      $6_1 = ($8_1 | 0) == ($5_1 + 16 | 0 | 0) ? 0 : $9_1;
      $7_1 = $7_1 - $6_1 | 0;
      $8_1 = $8_1 + ($6_1 << 2 | 0) | 0;
      $3_1 = $9_1 + $3_1 | 0;
      $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
      if (!$6_1) {
       break label$3
      }
      if (!$7_1) {
       break label$3
      }
      $9_1 = $2_1 >>> 2 | 0;
      $10_1 = $9_1 >>> 0 >= $7_1 >>> 0;
      if ($2_1 >>> 0 > 131 >>> 0) {
       continue label$5
      }
      if ($9_1 >>> 0 < $7_1 >>> 0) {
       break label$2
      }
      continue label$5;
     };
    }
    if (!$6_1) {
     break label$1
    }
   }
   if (!$7_1) {
    break label$1
   }
   if (!$2_1) {
    break label$1
   }
   $9_1 = $3_1;
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      label$10 : {
       $3_1 = $134($8_1 | 0, $6_1 | 0, $2_1 | 0, $4_1 | 0) | 0;
       if (($3_1 + 2 | 0) >>> 0 > 2 >>> 0) {
        break label$10
       }
       label$11 : {
        switch ($3_1 + 1 | 0 | 0) {
        case 1:
         HEAP32[($5_1 + 12 | 0) >> 2] = 0;
         break label$9;
        case 0:
         break label$1;
        default:
         break label$11;
        };
       }
       HEAP32[$4_1 >> 2] = 0;
       break label$9;
      }
      $6_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + $3_1 | 0;
      HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
      $9_1 = $9_1 + 1 | 0;
      $7_1 = $7_1 + -1 | 0;
      if ($7_1) {
       break label$8
      }
     }
     $3_1 = $9_1;
     break label$1;
    }
    $8_1 = $8_1 + 4 | 0;
    $2_1 = $2_1 - $3_1 | 0;
    $3_1 = $9_1;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  label$13 : {
   if (!$0_1) {
    break label$13
   }
   HEAP32[$1_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $5_1 + 1040 | 0;
  return $3_1 | 0;
 }
 
 function $165($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    $1_1 = 0;
    break label$1;
   }
   label$3 : {
    if (!$2_1) {
     break label$3
    }
    $0_1 = $0_1 ? $0_1 : $3_1 + 12 | 0;
    label$4 : {
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     $5_1 = ($4_1 << 24 | 0) >> 24 | 0;
     if (($5_1 | 0) < (0 | 0)) {
      break label$4
     }
     HEAP32[$0_1 >> 2] = $4_1;
     $1_1 = ($5_1 | 0) != (0 | 0);
     break label$1;
    }
    $4_1 = HEAP32[(HEAP32[(($62() | 0) + 168 | 0) >> 2] | 0) >> 2] | 0;
    $5_1 = HEAP8[$1_1 >> 0] | 0;
    label$5 : {
     if ($4_1) {
      break label$5
     }
     HEAP32[$0_1 >> 2] = $5_1 & 57343 | 0;
     $1_1 = 1;
     break label$1;
    }
    $4_1 = ($5_1 & 255 | 0) + -194 | 0;
    if ($4_1 >>> 0 > 50 >>> 0) {
     break label$3
    }
    $4_1 = HEAP32[(2688 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
    label$6 : {
     if ($2_1 >>> 0 > 3 >>> 0) {
      break label$6
     }
     if (($4_1 << (Math_imul($2_1, 6) + -6 | 0) | 0 | 0) < (0 | 0)) {
      break label$3
     }
    }
    $5_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $2_1 = $5_1 >>> 3 | 0;
    if (($2_1 + -16 | 0 | ($2_1 + ($4_1 >> 26 | 0) | 0) | 0) >>> 0 > 7 >>> 0) {
     break label$3
    }
    label$7 : {
     $2_1 = $5_1 + -128 | 0 | ($4_1 << 6 | 0) | 0;
     if (($2_1 | 0) < (0 | 0)) {
      break label$7
     }
     HEAP32[$0_1 >> 2] = $2_1;
     $1_1 = 2;
     break label$1;
    }
    $4_1 = (HEAPU8[($1_1 + 2 | 0) >> 0] | 0) + -128 | 0;
    if ($4_1 >>> 0 > 63 >>> 0) {
     break label$3
    }
    label$8 : {
     $2_1 = $4_1 | ($2_1 << 6 | 0) | 0;
     if (($2_1 | 0) < (0 | 0)) {
      break label$8
     }
     HEAP32[$0_1 >> 2] = $2_1;
     $1_1 = 3;
     break label$1;
    }
    $1_1 = (HEAPU8[($1_1 + 3 | 0) >> 0] | 0) + -128 | 0;
    if ($1_1 >>> 0 > 63 >>> 0) {
     break label$3
    }
    HEAP32[$0_1 >> 2] = $1_1 | ($2_1 << 6 | 0) | 0;
    $1_1 = 4;
    break label$1;
   }
   HEAP32[($57() | 0) >> 2] = 25;
   $1_1 = -1;
  }
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $166() {
  return (HEAP32[(HEAP32[(($62() | 0) + 168 | 0) >> 2] | 0) >> 2] | 0 ? 4 : 1) | 0;
 }
 
 function $167($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $134(0 | 0, $0_1 | 0, $1_1 | 0, ($2_1 ? $2_1 : 15044) | 0) | 0 | 0;
 }
 
 function $168($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $169($0_1) {
  $0_1 = $0_1 | 0;
  abort();
 }
 
 function $170($0_1) {
  $0_1 = $0_1 | 0;
  return $58($0_1 | 0) | 0 | 0;
 }
 
 function $171($0_1) {
  $0_1 = $0_1 | 0;
  return $59($0_1 | 0) | 0 | 0;
 }
 
 function $172($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $62() | 0;
  $2_1 = HEAP32[($1_1 + 168 | 0) >> 2] | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   HEAP32[($1_1 + 168 | 0) >> 2] = ($0_1 | 0) == (-1 | 0) ? 14948 + 40 | 0 : $0_1;
  }
  return (($2_1 | 0) == (14948 + 40 | 0 | 0) ? -1 : $2_1) | 0;
 }
 
 function $173($0_1) {
  $0_1 = $0_1 | 0;
  $1033(1219 | 0);
  abort();
 }
 
 function $174($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$0 = $175($0_1 | 0, $1_1 | 0, $2_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $175($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $7_1 = 0, $6_1 = 0, $12$hi = 0, $11$hi = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, $5_1 = 0, $4_1 = 0, $10_1 = 0, $9_1 = 0, $13$hi = 0, $13_1 = 0, $14$hi = 0, $14_1 = 0, $101_1 = 0, $101$hi = 0, $146$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($2_1 | 0) > (36 | 0)) {
       break label$4
      }
      $5_1 = 0;
      $6_1 = HEAPU8[$0_1 >> 0] | 0;
      if ($6_1) {
       break label$3
      }
      $7_1 = $0_1;
      break label$2;
     }
     HEAP32[($57() | 0) >> 2] = 28;
     i64toi32_i32$0 = 0;
     $3_1 = 0;
     $3$hi = i64toi32_i32$0;
     break label$1;
    }
    $7_1 = $0_1;
    label$5 : {
     label$6 : while (1) {
      if (!($103(($6_1 << 24 | 0) >> 24 | 0 | 0) | 0)) {
       break label$5
      }
      $6_1 = HEAPU8[($7_1 + 1 | 0) >> 0] | 0;
      $8_1 = $7_1 + 1 | 0;
      $7_1 = $8_1;
      if ($6_1) {
       continue label$6
      }
      break label$6;
     };
     $7_1 = $8_1;
     break label$2;
    }
    label$7 : {
     $6_1 = HEAPU8[$7_1 >> 0] | 0;
     switch ($6_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$7;
     default:
      break label$2;
     };
    }
    $5_1 = ($6_1 | 0) == (45 | 0) ? -1 : 0;
    $7_1 = $7_1 + 1 | 0;
   }
   label$8 : {
    label$9 : {
     if ($2_1 & -17 | 0) {
      break label$9
     }
     if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (48 | 0)) {
      break label$9
     }
     $9_1 = 1;
     label$10 : {
      if (((HEAPU8[($7_1 + 1 | 0) >> 0] | 0) & 223 | 0 | 0) != (88 | 0)) {
       break label$10
      }
      $7_1 = $7_1 + 2 | 0;
      $10_1 = 16;
      break label$8;
     }
     $7_1 = $7_1 + 1 | 0;
     $10_1 = $2_1 ? $2_1 : 8;
     break label$8;
    }
    $10_1 = $2_1 ? $2_1 : 10;
    $9_1 = 0;
   }
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   $2_1 = 0;
   i64toi32_i32$0 = 0;
   $12_1 = 0;
   $12$hi = i64toi32_i32$0;
   label$11 : {
    label$12 : while (1) {
     $6_1 = -48;
     label$13 : {
      $8_1 = HEAP8[$7_1 >> 0] | 0;
      if ((($8_1 + -48 | 0) & 255 | 0) >>> 0 < 10 >>> 0) {
       break label$13
      }
      $6_1 = -87;
      if ((($8_1 + -97 | 0) & 255 | 0) >>> 0 < 26 >>> 0) {
       break label$13
      }
      $6_1 = -55;
      if ((($8_1 + -65 | 0) & 255 | 0) >>> 0 > 25 >>> 0) {
       break label$11
      }
     }
     $8_1 = $6_1 + $8_1 | 0;
     if (($8_1 | 0) >= ($10_1 | 0)) {
      break label$11
     }
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$3 = 0;
     $125($4_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $12_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
     $6_1 = 1;
     label$14 : {
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break label$14
      }
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$2 = __wasm_i64_mul($12_1 | 0, i64toi32_i32$1 | 0, $11_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $13_1 = i64toi32_i32$2;
      $13$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $8_1;
      i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
      $14_1 = i64toi32_i32$2;
      $14$hi = i64toi32_i32$1;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
      $101_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
      $101$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$1 = $13_1;
      i64toi32_i32$0 = $101$hi;
      i64toi32_i32$3 = $101_1;
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break label$14
      }
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$1 = $14$hi;
      i64toi32_i32$1 = $13$hi;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$0 = $14_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $12_1 = i64toi32_i32$4;
      $12$hi = i64toi32_i32$5;
      $9_1 = 1;
      $6_1 = $2_1;
     }
     $7_1 = $7_1 + 1 | 0;
     $2_1 = $6_1;
     continue label$12;
    };
   }
   label$15 : {
    if (!$1_1) {
     break label$15
    }
    HEAP32[$1_1 >> 2] = $9_1 ? $7_1 : $0_1;
   }
   label$16 : {
    label$17 : {
     label$18 : {
      if (!$2_1) {
       break label$18
      }
      HEAP32[($57() | 0) >> 2] = 68;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $11_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
      $11$hi = i64toi32_i32$3;
      $5_1 = !($11_1 | i64toi32_i32$3 | 0) ? $5_1 : 0;
      i64toi32_i32$3 = i64toi32_i32$5;
      $12_1 = i64toi32_i32$1;
      $12$hi = i64toi32_i32$3;
      break label$17;
     }
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$5 = $12_1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3_1;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
      break label$16
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $11_1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $11$hi = i64toi32_i32$3;
    }
    label$19 : {
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$19
     }
     if ($5_1) {
      break label$19
     }
     HEAP32[($57() | 0) >> 2] = 68;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$4;
     break label$1;
    }
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$0 = $3_1;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$16
    }
    HEAP32[($57() | 0) >> 2] = 68;
    break label$1;
   }
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
   $11_1 = i64toi32_i32$4;
   $11$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$0 = $12_1;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$1 = $11_1;
   i64toi32_i32$4 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
   $146$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$4 = $146$hi;
   i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
   i64toi32_i32$2 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$2;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$2 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$5 | 0;
 }
 
 function $176($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$0 = $175($0_1 | 0, $1_1 | 0, $2_1 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $177($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $174($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $178($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $176($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $179($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $11_1 = 0, $11$hi = 0, $14_1 = 0, $14$hi = 0, $3_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $180($2_1 | 0, $0_1 | 0, $1_1 | 0, 0 | 0);
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $14$hi;
  $3_1 = Math_fround($133($11_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0));
  global$0 = $2_1 + 16 | 0;
  return Math_fround($3_1);
 }
 
 function $180($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $1459($4_1 + 16 | 0 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($4_1 + 92 | 0) >> 2] = -1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = -1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  i64toi32_i32$0 = 0;
  $110($4_1 + 16 | 0 | 0, 0 | 0, i64toi32_i32$0 | 0);
  $128($4_1 | 0, $4_1 + 16 | 0 | 0, $3_1 | 0, 1 | 0);
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$1;
  $6$hi = i64toi32_i32$0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = $1_1 + (((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + (HEAP32[($4_1 + 136 | 0) >> 2] | 0) | 0) - (HEAP32[($4_1 + 24 | 0) >> 2] | 0) | 0) | 0;
  }
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 160 | 0;
 }
 
 function $181($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $11_1 = 0, $11$hi = 0, $14_1 = 0, $14$hi = 0, $3_1 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $180($2_1 | 0, $0_1 | 0, $1_1 | 0, 1 | 0);
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $14$hi;
  $3_1 = +$71($11_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
  global$0 = $2_1 + 16 | 0;
  return +$3_1;
 }
 
 function $182($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $4$hi = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $180($3_1 | 0, $1_1 | 0, $2_1 | 0, 2 | 0);
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $183($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return Math_fround(Math_fround($179($0_1 | 0, $1_1 | 0)));
 }
 
 function $184($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return +(+$181($0_1 | 0, $1_1 | 0));
 }
 
 function $185($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $5$hi = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $182($4_1 | 0, $1_1 | 0, $2_1 | 0);
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $17_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $186($0_1) {
  $0_1 = $0_1 | 0;
  $187($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $187($0_1) {
  $0_1 = $0_1 | 0;
  $168($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $188($0_1) {
  $0_1 = $0_1 | 0;
  $1303($186($0_1 | 0) | 0 | 0);
 }
 
 function $189($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $5_1 = 0;
  $5_1 = $1_1 + ($4_1 - $3_1 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$2
     }
     $6_1 = -1;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     $7_1 = HEAP8[$1_1 >> 0] | 0;
     $8_1 = HEAP8[$3_1 >> 0] | 0;
     if (($7_1 | 0) < ($8_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (($8_1 | 0) >= ($7_1 | 0)) {
       break label$4
      }
      return 1 | 0;
     }
     $3_1 = $3_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$3;
    };
   }
   $6_1 = ($5_1 | 0) != ($2_1 | 0);
  }
  return $6_1 | 0;
 }
 
 function $190($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $191($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
 }
 
 function $191($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $22($0_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $192($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $192($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1106($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($1043($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $550($0_1 | 0, $4_1 | 0);
     $5_1 = $549($0_1 | 0) | 0;
     break label$2;
    }
    $5_1 = $1046($4_1 | 0) | 0;
    $6_1 = $5_1 + 1 | 0;
    $5_1 = $1048($988($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
    $1050($0_1 | 0, $5_1 | 0);
    $1051($0_1 | 0, $6_1 | 0);
    $548($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $547($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$5;
    };
   }
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $547($5_1 | 0, $3_1 + 15 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1368($0_1 | 0);
  abort();
 }
 
 function $193($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($1_1 | 0) != ($2_1 | 0)) {
     break label$2
    }
    return $3_1 | 0;
   }
   $3_1 = ($3_1 << 4 | 0) + (HEAP8[$1_1 >> 0] | 0) | 0;
   $4_1 = $3_1 & -268435456 | 0;
   $3_1 = ($4_1 >>> 24 | 0 | $4_1 | 0) ^ $3_1 | 0;
   $1_1 = $1_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $194($0_1) {
  $0_1 = $0_1 | 0;
  $187($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $195($0_1) {
  $0_1 = $0_1 | 0;
  $1303($194($0_1 | 0) | 0 | 0);
 }
 
 function $196($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (($3_1 | 0) == ($4_1 | 0)) {
      break label$2
     }
     $5_1 = -1;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     $6_1 = HEAP32[$1_1 >> 2] | 0;
     $7_1 = HEAP32[$3_1 >> 2] | 0;
     if (($6_1 | 0) < ($7_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (($7_1 | 0) >= ($6_1 | 0)) {
       break label$4
      }
      return 1 | 0;
     }
     $3_1 = $3_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$3;
    };
   }
   $5_1 = ($1_1 | 0) != ($2_1 | 0);
  }
  return $5_1 | 0;
 }
 
 function $197($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $198($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
 }
 
 function $198($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $199($0_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $200($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $199($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $25($1_1 | 0) | 0;
  $1109($0_1 | 0) | 0;
  $25($2_1 | 0) | 0;
  $1110($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $200($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1111($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($1112($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $613($0_1 | 0, $4_1 | 0);
     $5_1 = $612($0_1 | 0) | 0;
     break label$2;
    }
    $5_1 = $1113($4_1 | 0) | 0;
    $6_1 = $5_1 + 1 | 0;
    $5_1 = $1114($996($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
    $1115($0_1 | 0, $5_1 | 0);
    $1116($0_1 | 0, $6_1 | 0);
    $611($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $610($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$5;
    };
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   $610($5_1 | 0, $3_1 + 12 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1368($0_1 | 0);
  abort();
 }
 
 function $201($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($1_1 | 0) != ($2_1 | 0)) {
     break label$2
    }
    return $3_1 | 0;
   }
   $3_1 = (HEAP32[$1_1 >> 2] | 0) + ($3_1 << 4 | 0) | 0;
   $4_1 = $3_1 & -268435456 | 0;
   $3_1 = ($4_1 >>> 24 | 0 | $4_1 | 0) ^ $3_1 | 0;
   $1_1 = $1_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $202($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($7($3_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[$6_1 >> 2] = -1;
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $6_1) | 0;
    HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
    label$3 : {
     switch (HEAP32[$6_1 >> 2] | 0 | 0) {
     case 0:
      HEAP8[$5_1 >> 0] = 0;
      break label$1;
     case 1:
      HEAP8[$5_1 >> 0] = 1;
      break label$1;
     default:
      break label$3;
     };
    }
    HEAP8[$5_1 >> 0] = 1;
    HEAP32[$4_1 >> 2] = 4;
    break label$1;
   }
   $42($6_1 | 0, $3_1 | 0);
   $1_1 = $37($6_1 | 0) | 0;
   $203($6_1 | 0) | 0;
   $42($6_1 | 0, $3_1 | 0);
   $3_1 = $204($6_1 | 0) | 0;
   $203($6_1 | 0) | 0;
   $205($6_1 | 0, $3_1 | 0);
   $206($6_1 | 12 | 0 | 0, $3_1 | 0);
   $3_1 = $6_1 + 24 | 0;
   HEAP8[$5_1 >> 0] = ($207($6_1 + 24 | 0 | 0, $2_1 | 0, $6_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 | 0, 1 | 0) | 0 | 0) == ($6_1 | 0);
   $1_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
   label$6 : while (1) {
    $3_1 = $1371($3_1 + -12 | 0 | 0) | 0;
    if (($3_1 | 0) != ($6_1 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $203($0_1) {
  $0_1 = $0_1 | 0;
  $794(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $204($0_1) {
  $0_1 = $0_1 | 0;
  return $208($0_1 | 0, 15292 | 0) | 0 | 0;
 }
 
 function $205($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $206($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $207($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0, $10_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 120 | 0) >> 2] = $1_1;
  $8_1 = $209($2_1 | 0, $3_1 | 0) | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = 10;
  $9_1 = 0;
  $10_1 = $210($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $11_1 = $7_1 + 16 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 101 >>> 0) {
     break label$2
    }
    $11_1 = $1448($8_1 | 0) | 0;
    if (!$11_1) {
     break label$1
    }
    $211($10_1 | 0, $11_1 | 0);
   }
   $12_1 = $11_1;
   $1_1 = $2_1;
   label$3 : while (1) {
    label$4 : {
     if (($1_1 | 0) != ($3_1 | 0)) {
      break label$4
     }
     $13_1 = 0;
     label$5 : {
      label$6 : while (1) {
       label$7 : {
        label$8 : {
         if (!($212($0_1 | 0, $7_1 + 120 | 0 | 0) | 0)) {
          break label$8
         }
         if ($8_1) {
          break label$7
         }
        }
        label$9 : {
         if (!($213($0_1 | 0, $7_1 + 120 | 0 | 0) | 0)) {
          break label$9
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
        }
        break label$5;
       }
       $14_1 = $214($0_1 | 0) | 0;
       label$10 : {
        if ($6_1) {
         break label$10
        }
        $14_1 = $215($4_1 | 0, $14_1 | 0) | 0;
       }
       $15_1 = $13_1 + 1 | 0;
       $16_1 = 0;
       $12_1 = $11_1;
       $1_1 = $2_1;
       label$11 : while (1) {
        label$12 : {
         if (($1_1 | 0) != ($3_1 | 0)) {
          break label$12
         }
         $13_1 = $15_1;
         if (!($16_1 & 1 | 0)) {
          continue label$6
         }
         $216($0_1 | 0) | 0;
         $13_1 = $15_1;
         $12_1 = $11_1;
         $1_1 = $2_1;
         if (($9_1 + $8_1 | 0) >>> 0 < 2 >>> 0) {
          continue label$6
         }
         label$13 : while (1) {
          label$14 : {
           if (($1_1 | 0) != ($3_1 | 0)) {
            break label$14
           }
           $13_1 = $15_1;
           continue label$6;
          }
          label$15 : {
           if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (2 | 0)) {
            break label$15
           }
           if (($89($1_1 | 0) | 0 | 0) == ($15_1 | 0)) {
            break label$15
           }
           HEAP8[$12_1 >> 0] = 0;
           $9_1 = $9_1 + -1 | 0;
          }
          $12_1 = $12_1 + 1 | 0;
          $1_1 = $1_1 + 12 | 0;
          continue label$13;
         };
        }
        label$16 : {
         if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (1 | 0)) {
          break label$16
         }
         $17_1 = HEAPU8[($217($1_1 | 0, $13_1 | 0) | 0) >> 0] | 0;
         label$17 : {
          if ($6_1) {
           break label$17
          }
          $17_1 = $215($4_1 | 0, ($17_1 << 24 | 0) >> 24 | 0 | 0) | 0;
         }
         label$18 : {
          label$19 : {
           if (($14_1 & 255 | 0 | 0) != ($17_1 & 255 | 0 | 0)) {
            break label$19
           }
           $16_1 = 1;
           if (($89($1_1 | 0) | 0 | 0) != ($15_1 | 0)) {
            break label$16
           }
           HEAP8[$12_1 >> 0] = 2;
           $16_1 = 1;
           $9_1 = $9_1 + 1 | 0;
           break label$18;
          }
          HEAP8[$12_1 >> 0] = 0;
         }
         $8_1 = $8_1 + -1 | 0;
        }
        $12_1 = $12_1 + 1 | 0;
        $1_1 = $1_1 + 12 | 0;
        continue label$11;
       };
      };
     }
     label$20 : {
      label$21 : {
       label$22 : while (1) {
        if (($2_1 | 0) == ($3_1 | 0)) {
         break label$21
        }
        label$23 : {
         if ((HEAPU8[$11_1 >> 0] | 0 | 0) == (2 | 0)) {
          break label$23
         }
         $11_1 = $11_1 + 1 | 0;
         $2_1 = $2_1 + 12 | 0;
         continue label$22;
        }
        break label$22;
       };
       $3_1 = $2_1;
       break label$20;
      }
      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
     }
     $218($10_1 | 0) | 0;
     global$0 = $7_1 + 128 | 0;
     return $3_1 | 0;
    }
    label$24 : {
     label$25 : {
      if ($88($1_1 | 0) | 0) {
       break label$25
      }
      HEAP8[$12_1 >> 0] = 1;
      break label$24;
     }
     HEAP8[$12_1 >> 0] = 2;
     $9_1 = $9_1 + 1 | 0;
     $8_1 = $8_1 + -1 | 0;
    }
    $12_1 = $12_1 + 1 | 0;
    $1_1 = $1_1 + 12 | 0;
    continue label$3;
   };
  }
  $1301();
  abort();
 }
 
 function $208($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $789(HEAP32[$0_1 >> 2] | 0 | 0, $754($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $209($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1148($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $210($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1129($0_1 | 0, $3_1 + 12 | 0 | 0, $50($2_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $211($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1130($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1130($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1131($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $212($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($264($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $213($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $264($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $214($0_1) {
  $0_1 = $0_1 | 0;
  return (($266(HEAP32[$0_1 >> 2] | 0 | 0) | 0) << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $215($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $216($0_1) {
  $0_1 = $0_1 | 0;
  $267(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $217($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($15($0_1 | 0) | 0) + $1_1 | 0 | 0;
 }
 
 function $218($0_1) {
  $0_1 = $0_1 | 0;
  $211($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $219($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $220($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $220($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $221($3_1 | 0) | 0;
  $2_1 = $222($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $223($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $224($6_1 + 192 | 0 | 0) | 0;
  $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
  $0_1 = $227($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($212($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($89($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $89($3_1 | 0) | 0;
     $226($3_1 | 0, ($89($3_1 | 0) | 0) << 1 | 0 | 0);
     $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
     $0_1 = $227($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($228($214($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $216($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($89($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $229($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $230($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($213($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1371($3_1 | 0) | 0;
  $1371($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $221($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   label$2 : {
    $0_1 = ($7($0_1 | 0) | 0) & 74 | 0;
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     if (($0_1 | 0) != (64 | 0)) {
      break label$3
     }
     return 8 | 0;
    }
    if (($0_1 | 0) != (8 | 0)) {
     break label$1
    }
    return 16 | 0;
   }
   return 0 | 0;
  }
  return 10 | 0;
 }
 
 function $222($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $318($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $223($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $42($3_1 + 8 | 0 | 0, $1_1 | 0);
  $1_1 = $204($3_1 + 8 | 0 | 0) | 0;
  HEAP8[$2_1 >> 0] = $315($1_1 | 0) | 0;
  $316($0_1 | 0, $1_1 | 0);
  $203($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $224($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $22($0_1 | 0, $1_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $90($0_1 | 0);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $225($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 10;
  label$1 : {
   if (!($29($0_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = ($262($0_1 | 0) | 0) + -1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $226($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1382($0_1 | 0, $1_1 | 0, 0 | 0);
 }
 
 function $227($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($263($0_1 | 0) | 0) + $1_1 | 0 | 0;
 }
 
 function $228($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  HEAP8[($10_1 + 15 | 0) >> 0] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
     }
     $11_1 = 43;
     label$4 : {
      $12_1 = $0_1 & 255 | 0;
      if ((HEAPU8[($9_1 + 24 | 0) >> 0] | 0 | 0) == ($12_1 | 0)) {
       break label$4
      }
      $11_1 = 45;
      if ((HEAPU8[($9_1 + 25 | 0) >> 0] | 0 | 0) != ($12_1 | 0)) {
       break label$3
      }
     }
     HEAP32[$3_1 >> 2] = $2_1 + 1 | 0;
     HEAP8[$2_1 >> 0] = $11_1;
     break label$2;
    }
    label$5 : {
     if (!($89($6_1 | 0) | 0)) {
      break label$5
     }
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$5
     }
     $0_1 = 0;
     $9_1 = HEAP32[$8_1 >> 2] | 0;
     if (($9_1 - $7_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$8_1 >> 2] = $9_1 + 4 | 0;
     HEAP32[$9_1 >> 2] = $0_1;
     break label$2;
    }
    $0_1 = -1;
    $9_1 = ($265($9_1 | 0, $9_1 + 26 | 0 | 0, $10_1 + 15 | 0 | 0) | 0) - $9_1 | 0;
    if (($9_1 | 0) > (23 | 0)) {
     break label$1
    }
    label$6 : {
     label$7 : {
      switch ($1_1 + -8 | 0 | 0) {
      case 0:
      case 2:
       if (($9_1 | 0) < ($1_1 | 0)) {
        break label$6
       }
       break label$1;
      case 1:
       break label$6;
      default:
       break label$7;
      };
     }
     if (($1_1 | 0) != (16 | 0)) {
      break label$6
     }
     if (($9_1 | 0) < (22 | 0)) {
      break label$6
     }
     $6_1 = HEAP32[$3_1 >> 2] | 0;
     if (($6_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     if (($6_1 - $2_1 | 0 | 0) > (2 | 0)) {
      break label$1
     }
     $0_1 = -1;
     if ((HEAPU8[($6_1 + -1 | 0) >> 0] | 0 | 0) != (48 | 0)) {
      break label$1
     }
     $0_1 = 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$3_1 >> 2] = $6_1 + 1 | 0;
     HEAP8[$6_1 >> 0] = HEAPU8[($9_1 + 7008 | 0) >> 0] | 0;
     break label$1;
    }
    $0_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[$3_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = HEAPU8[($9_1 + 7008 | 0) >> 0] | 0;
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    $0_1 = 0;
    break label$1;
   }
   $0_1 = 0;
   HEAP32[$4_1 >> 2] = 0;
  }
  global$0 = $10_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $229($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6$hi = 0, i64toi32_i32$3 = 0, $4_1 = 0, $6_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $5_1 = 0, $42_1 = 0, $42$hi = 0, $46_1 = 0, $46$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($0_1 | 0) == ($1_1 | 0)) {
        break label$5
       }
       $5_1 = HEAP32[($57() | 0) >> 2] | 0;
       HEAP32[($57() | 0) >> 2] = 0;
       i64toi32_i32$0 = $178($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $260() | 0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $6_1 = i64toi32_i32$0;
       $6$hi = i64toi32_i32$1;
       label$6 : {
        label$7 : {
         $0_1 = HEAP32[($57() | 0) >> 2] | 0;
         if (!$0_1) {
          break label$7
         }
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
          break label$6
         }
         if (($0_1 | 0) == (68 | 0)) {
          break label$2
         }
         break label$3;
        }
        HEAP32[($57() | 0) >> 2] = $5_1;
        if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
         break label$3
        }
       }
       HEAP32[$2_1 >> 2] = 4;
       break label$4;
      }
      HEAP32[$2_1 >> 2] = 4;
     }
     $0_1 = 0;
     break label$1;
    }
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$0 = $1149() | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $42_1 = i64toi32_i32$0;
    $42$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $42$hi;
    i64toi32_i32$3 = $42_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $16_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $17_1 = 0
      } else {
       $17_1 = 1
      }
      $18_1 = $17_1;
     } else {
      $18_1 = 0
     }
     $16_1 = $18_1;
    }
    if ($16_1) {
     break label$2
    }
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$1 = $1019() | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $46_1 = i64toi32_i32$1;
    $46$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$1 = $46$hi;
    i64toi32_i32$0 = $46_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $19_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
       $20_1 = 0
      } else {
       $20_1 = 1
      }
      $21_1 = $20_1;
     } else {
      $21_1 = 0
     }
     $19_1 = $21_1;
    }
    if ($19_1) {
     break label$2
    }
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $6$hi;
    $0_1 = $6_1;
    break label$1;
   }
   HEAP32[$2_1 >> 2] = 4;
   label$8 : {
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1;
    if (($6$hi | 0) < (i64toi32_i32$2 | 0)) {
     $22_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $23_1 = 0
      } else {
       $23_1 = 1
      }
      $24_1 = $23_1;
     } else {
      $24_1 = 0
     }
     $22_1 = $24_1;
    }
    if ($22_1) {
     break label$8
    }
    $0_1 = $1019() | 0;
    break label$1;
   }
   $0_1 = $1149() | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $230($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!($89($0_1 | 0) | 0)) {
    break label$1
   }
   if (($2_1 - $1_1 | 0 | 0) < (5 | 0)) {
    break label$1
   }
   $586($1_1 | 0, $2_1 | 0);
   $4_1 = $2_1 + -4 | 0;
   $2_1 = $15($0_1 | 0) | 0;
   $5_1 = $2_1 + ($89($0_1 | 0) | 0) | 0;
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      $0_1 = HEAP8[$2_1 >> 0] | 0;
      if ($1_1 >>> 0 >= $4_1 >>> 0) {
       break label$3
      }
      label$5 : {
       if (($0_1 | 0) < (1 | 0)) {
        break label$5
       }
       if (($0_1 | 0) >= ($473() | 0 | 0)) {
        break label$5
       }
       if ((HEAP32[$1_1 >> 2] | 0 | 0) != (HEAP8[$2_1 >> 0] | 0 | 0)) {
        break label$2
       }
      }
      $1_1 = $1_1 + 4 | 0;
      $2_1 = $2_1 + (($5_1 - $2_1 | 0 | 0) > (1 | 0)) | 0;
      continue label$4;
     };
    }
    if (($0_1 | 0) < (1 | 0)) {
     break label$1
    }
    if (($0_1 | 0) >= ($473() | 0 | 0)) {
     break label$1
    }
    if (((HEAP32[$4_1 >> 2] | 0) + -1 | 0) >>> 0 < (HEAP8[$2_1 >> 0] | 0) >>> 0) {
     break label$1
    }
   }
   HEAP32[$3_1 >> 2] = 4;
  }
 }
 
 function $231($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $232($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $232($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $114_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $221($3_1 | 0) | 0;
  $2_1 = $222($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $223($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $224($6_1 + 192 | 0 | 0) | 0;
  $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
  $0_1 = $227($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($212($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($89($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $89($3_1 | 0) | 0;
     $226($3_1 | 0, ($89($3_1 | 0) | 0) << 1 | 0 | 0);
     $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
     $0_1 = $227($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($228($214($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $216($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($89($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $233($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $114_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $230($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($213($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1371($3_1 | 0) | 0;
  $1371($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $233($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $6$hi = 0, $6_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $5_1 = 0, $41_1 = 0, $41$hi = 0, $43$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($0_1 | 0) == ($1_1 | 0)) {
        break label$5
       }
       $5_1 = HEAP32[($57() | 0) >> 2] | 0;
       HEAP32[($57() | 0) >> 2] = 0;
       i64toi32_i32$0 = $178($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $260() | 0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $6_1 = i64toi32_i32$0;
       $6$hi = i64toi32_i32$1;
       label$6 : {
        label$7 : {
         $0_1 = HEAP32[($57() | 0) >> 2] | 0;
         if (!$0_1) {
          break label$7
         }
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
          break label$6
         }
         if (($0_1 | 0) == (68 | 0)) {
          break label$2
         }
         break label$3;
        }
        HEAP32[($57() | 0) >> 2] = $5_1;
        if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
         break label$3
        }
       }
       HEAP32[$2_1 >> 2] = 4;
       break label$4;
      }
      HEAP32[$2_1 >> 2] = 4;
     }
     i64toi32_i32$1 = 0;
     $6_1 = 0;
     $6$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$1 = $1151() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $41_1 = i64toi32_i32$1;
    $41$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$1 = $41$hi;
    i64toi32_i32$3 = $41_1;
    if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
     $15_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $16_1 = 0
      } else {
       $16_1 = 1
      }
      $17_1 = $16_1;
     } else {
      $17_1 = 0
     }
     $15_1 = $17_1;
    }
    if ($15_1) {
     break label$2
    }
    i64toi32_i32$2 = $1152() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $43$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$0 = $43$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$1 = $6_1;
    if ((i64toi32_i32$0 | 0) > ($6$hi | 0)) {
     $18_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
       $19_1 = 0
      } else {
       $19_1 = 1
      }
      $20_1 = $19_1;
     } else {
      $20_1 = 0
     }
     $18_1 = $20_1;
    }
    if ($18_1) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = 4;
   label$8 : {
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $21_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
       $22_1 = 0
      } else {
       $22_1 = 1
      }
      $23_1 = $22_1;
     } else {
      $23_1 = 0
     }
     $21_1 = $23_1;
    }
    if ($21_1) {
     break label$8
    }
    i64toi32_i32$1 = $1152() | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $6_1 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$3;
    break label$1;
   }
   i64toi32_i32$3 = $1151() | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$3;
   $6$hi = i64toi32_i32$1;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$3 | 0;
 }
 
 function $234($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $235($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $235($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $221($3_1 | 0) | 0;
  $2_1 = $222($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $223($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $224($6_1 + 192 | 0 | 0) | 0;
  $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
  $0_1 = $227($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($212($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($89($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $89($3_1 | 0) | 0;
     $226($3_1 | 0, ($89($3_1 | 0) | 0) << 1 | 0 | 0);
     $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
     $0_1 = $227($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($228($214($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $216($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($89($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP16[$5_1 >> 1] = $236($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $230($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($213($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1371($3_1 | 0) | 0;
  $1371($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $236($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $6_1 = 0, $53$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = HEAP32[($57() | 0) >> 2] | 0;
        HEAP32[($57() | 0) >> 2] = 0;
        i64toi32_i32$0 = $177($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $260() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[($57() | 0) >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[($57() | 0) >> 2] = $6_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break label$1;
     }
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = 0;
     $53$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$0 = $53$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $7_1 >>> 0 <= ($1155() | 0) >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $1155() | 0;
    break label$1;
   }
   $0_1 = $7_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 & 65535 | 0 | 0;
 }
 
 function $237($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $238($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $238($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $221($3_1 | 0) | 0;
  $2_1 = $222($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $223($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $224($6_1 + 192 | 0 | 0) | 0;
  $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
  $0_1 = $227($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($212($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($89($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $89($3_1 | 0) | 0;
     $226($3_1 | 0, ($89($3_1 | 0) | 0) << 1 | 0 | 0);
     $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
     $0_1 = $227($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($228($214($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $216($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($89($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $239($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $230($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($213($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1371($3_1 | 0) | 0;
  $1371($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $239($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $6_1 = 0, $53$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = HEAP32[($57() | 0) >> 2] | 0;
        HEAP32[($57() | 0) >> 2] = 0;
        i64toi32_i32$0 = $177($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $260() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[($57() | 0) >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[($57() | 0) >> 2] = $6_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break label$1;
     }
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = 0;
     $53$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$0 = $53$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $7_1 >>> 0 <= ($656() | 0) >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $656() | 0;
    break label$1;
   }
   $0_1 = $7_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $240($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $241($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $241($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $221($3_1 | 0) | 0;
  $2_1 = $222($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $223($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $224($6_1 + 192 | 0 | 0) | 0;
  $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
  $0_1 = $227($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($212($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($89($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $89($3_1 | 0) | 0;
     $226($3_1 | 0, ($89($3_1 | 0) | 0) << 1 | 0 | 0);
     $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
     $0_1 = $227($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($228($214($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $216($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($89($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $242($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $230($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($213($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1371($3_1 | 0) | 0;
  $1371($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $242($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $6_1 = 0, $53$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = HEAP32[($57() | 0) >> 2] | 0;
        HEAP32[($57() | 0) >> 2] = 0;
        i64toi32_i32$0 = $177($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $260() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[($57() | 0) >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[($57() | 0) >> 2] = $6_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break label$1;
     }
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = 0;
     $53$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$0 = $53$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $7_1 >>> 0 <= ($580() | 0) >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $580() | 0;
    break label$1;
   }
   $0_1 = $7_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $243($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $244($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $244($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $114_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $1_1 = $221($3_1 | 0) | 0;
  $2_1 = $222($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $223($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 255 | 0 | 0);
  $3_1 = $224($6_1 + 192 | 0 | 0) | 0;
  $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
  $0_1 = $227($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($212($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($89($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $89($3_1 | 0) | 0;
     $226($3_1 | 0, ($89($3_1 | 0) | 0) << 1 | 0 | 0);
     $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
     $0_1 = $227($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($228($214($6_1 + 264 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 255 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $216($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($89($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $245($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $114_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $230($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($213($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1371($3_1 | 0) | 0;
  $1371($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $0_1 | 0;
 }
 
 function $245($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7$hi = 0, $7_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $4_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $6_1 = 0, $51$hi = 0, $57$hi = 0, $16_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break label$6
        }
        label$7 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break label$7
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break label$7
         }
         HEAP32[$2_1 >> 2] = 4;
         break label$5;
        }
        $6_1 = HEAP32[($57() | 0) >> 2] | 0;
        HEAP32[($57() | 0) >> 2] = 0;
        i64toi32_i32$0 = $177($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $260() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $7_1 = i64toi32_i32$0;
        $7$hi = i64toi32_i32$1;
        label$8 : {
         label$9 : {
          $0_1 = HEAP32[($57() | 0) >> 2] | 0;
          if (!$0_1) {
           break label$9
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break label$8
          }
          if (($0_1 | 0) == (68 | 0)) {
           break label$3
          }
          break label$4;
         }
         HEAP32[($57() | 0) >> 2] = $6_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break label$4
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break label$5;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      i64toi32_i32$1 = 0;
      $7_1 = 0;
      $7$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $1158() | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $51$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$0 = $51$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$3 = $7_1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= $7_1 >>> 0 | 0) | 0) {
      break label$2
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    i64toi32_i32$2 = $1158() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $7_1 = i64toi32_i32$2;
    $7$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + $7$hi | 0;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   $57$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $7$hi;
   i64toi32_i32$2 = ($5_1 | 0) == (45 | 0);
   i64toi32_i32$5 = $57$hi;
   $16_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$1 = i64toi32_i32$2 ? $16_1 : i64toi32_i32$1;
   i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$5 : $7$hi;
   $7_1 = i64toi32_i32$1;
   $7$hi = i64toi32_i32$0;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $246($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $247($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $247($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $248($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 223 | 0 | 0, $6_1 + 222 | 0 | 0);
  $3_1 = $224($6_1 + 192 | 0 | 0) | 0;
  $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
  $1_1 = $227($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($212($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($89($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $89($3_1 | 0) | 0;
     $226($3_1 | 0, ($89($3_1 | 0) | 0) << 1 | 0 | 0);
     $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
     $1_1 = $227($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($249($214($6_1 + 264 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, HEAP8[($6_1 + 223 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 222 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $216($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($89($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF32[$5_1 >> 2] = Math_fround($250($1_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0));
  $230($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($213($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1371($3_1 | 0) | 0;
  $1371($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $1_1 | 0;
 }
 
 function $248($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $42($5_1 + 8 | 0 | 0, $1_1 | 0);
  $258($37($5_1 + 8 | 0 | 0) | 0 | 0, 7008 | 0, 7040 | 0, $2_1 | 0) | 0;
  $2_1 = $204($5_1 + 8 | 0 | 0) | 0;
  HEAP8[$3_1 >> 0] = $314($2_1 | 0) | 0;
  HEAP8[$4_1 >> 0] = $315($2_1 | 0) | 0;
  $316($0_1 | 0, $2_1 | 0);
  $203($5_1 + 8 | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $249($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $12_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP8[($12_1 + 15 | 0) >> 0] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$3
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     HEAP8[$1_1 >> 0] = 0;
     $11_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = 46;
     if (!($89($7_1 | 0) | 0)) {
      break label$1
     }
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $5_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $5_1;
     break label$1;
    }
    label$4 : {
     if (($0_1 | 0) != ($6_1 | 0)) {
      break label$4
     }
     if (!($89($7_1 | 0) | 0)) {
      break label$4
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $0_1;
     $0_1 = 0;
     HEAP32[$10_1 >> 2] = 0;
     break label$1;
    }
    $0_1 = -1;
    $11_1 = ($317($11_1 | 0, $11_1 + 32 | 0 | 0, $12_1 + 15 | 0 | 0) | 0) - $11_1 | 0;
    if (($11_1 | 0) > (31 | 0)) {
     break label$1
    }
    $5_1 = HEAPU8[($11_1 + 7008 | 0) >> 0] | 0;
    label$5 : {
     label$6 : {
      switch (($11_1 & -2 | 0) + -22 | 0 | 0) {
      case 2:
       label$9 : {
        $11_1 = HEAP32[$4_1 >> 2] | 0;
        if (($11_1 | 0) == ($3_1 | 0)) {
         break label$9
        }
        $0_1 = -1;
        if (((HEAPU8[($11_1 + -1 | 0) >> 0] | 0) & 95 | 0 | 0) != ((HEAPU8[$2_1 >> 0] | 0) & 127 | 0 | 0)) {
         break label$1
        }
       }
       HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
       HEAP8[$11_1 >> 0] = $5_1;
       $0_1 = 0;
       break label$1;
      case 0:
       HEAP8[$2_1 >> 0] = 80;
       break label$5;
      default:
       break label$6;
      };
     }
     $0_1 = HEAP8[$2_1 >> 0] | 0;
     if (($5_1 & 95 | 0 | 0) != ($0_1 | 0)) {
      break label$5
     }
     HEAP8[$2_1 >> 0] = $0_1 | 128 | 0;
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$5
     }
     HEAP8[$1_1 >> 0] = 0;
     if (!($89($7_1 | 0) | 0)) {
      break label$5
     }
     $0_1 = HEAP32[$9_1 >> 2] | 0;
     if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$5
     }
     $1_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = $1_1;
    }
    $0_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = $5_1;
    $0_1 = 0;
    if (($11_1 | 0) > (21 | 0)) {
     break label$1
    }
    HEAP32[$10_1 >> 2] = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
    break label$1;
   }
   $0_1 = -1;
  }
  global$0 = $12_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $250($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($0_1 | 0) == ($1_1 | 0)) {
       break label$4
      }
      $4_1 = HEAP32[($57() | 0) >> 2] | 0;
      HEAP32[($57() | 0) >> 2] = 0;
      $5_1 = Math_fround($1160($0_1 | 0, $3_1 + 12 | 0 | 0));
      $0_1 = HEAP32[($57() | 0) >> 2] | 0;
      if (!$0_1) {
       break label$3
      }
      $6_1 = Math_fround(0.0);
      if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
       break label$2
      }
      $6_1 = $5_1;
      if (($0_1 | 0) != (68 | 0)) {
       break label$1
      }
      break label$2;
     }
     HEAP32[$2_1 >> 2] = 4;
     $5_1 = Math_fround(0.0);
     break label$1;
    }
    HEAP32[($57() | 0) >> 2] = $4_1;
    $6_1 = Math_fround(0.0);
    if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = 4;
   $5_1 = $6_1;
  }
  global$0 = $3_1 + 16 | 0;
  return Math_fround($5_1);
 }
 
 function $251($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $252($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $252($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $248($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 223 | 0 | 0, $6_1 + 222 | 0 | 0);
  $3_1 = $224($6_1 + 192 | 0 | 0) | 0;
  $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
  $1_1 = $227($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($212($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($89($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $89($3_1 | 0) | 0;
     $226($3_1 | 0, ($89($3_1 | 0) | 0) << 1 | 0 | 0);
     $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
     $1_1 = $227($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($249($214($6_1 + 264 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, HEAP8[($6_1 + 223 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 222 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $216($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($89($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF64[$5_1 >> 3] = +$253($1_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0);
  $230($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($213($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1371($3_1 | 0) | 0;
  $1371($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $1_1 | 0;
 }
 
 function $253($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0.0, $6_1 = 0.0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($0_1 | 0) == ($1_1 | 0)) {
       break label$4
      }
      $4_1 = HEAP32[($57() | 0) >> 2] | 0;
      HEAP32[($57() | 0) >> 2] = 0;
      $5_1 = +$1161($0_1 | 0, $3_1 + 12 | 0 | 0);
      $0_1 = HEAP32[($57() | 0) >> 2] | 0;
      if (!$0_1) {
       break label$3
      }
      $6_1 = 0.0;
      if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
       break label$2
      }
      $6_1 = $5_1;
      if (($0_1 | 0) != (68 | 0)) {
       break label$1
      }
      break label$2;
     }
     HEAP32[$2_1 >> 2] = 4;
     $5_1 = 0.0;
     break label$1;
    }
    HEAP32[($57() | 0) >> 2] = $4_1;
    $6_1 = 0.0;
    if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = 4;
   $5_1 = $6_1;
  }
  global$0 = $3_1 + 16 | 0;
  return +$5_1;
 }
 
 function $254($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $255($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $255($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $7$hi = 0, $127_1 = 0;
  $6_1 = global$0 - 288 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 272 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 280 | 0) >> 2] = $1_1;
  $248($6_1 + 224 | 0 | 0, $3_1 | 0, $6_1 + 240 | 0 | 0, $6_1 + 239 | 0 | 0, $6_1 + 238 | 0 | 0);
  $3_1 = $224($6_1 + 208 | 0 | 0) | 0;
  $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
  $1_1 = $227($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 204 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 32 | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 0;
  HEAP8[($6_1 + 23 | 0) >> 0] = 1;
  HEAP8[($6_1 + 22 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($212($6_1 + 280 | 0 | 0, $6_1 + 272 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0) != ($1_1 + ($89($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $89($3_1 | 0) | 0;
     $226($3_1 | 0, ($89($3_1 | 0) | 0) << 1 | 0 | 0);
     $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
     $1_1 = $227($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 204 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($249($214($6_1 + 280 | 0 | 0) | 0 | 0, $6_1 + 23 | 0 | 0, $6_1 + 22 | 0 | 0, $1_1 | 0, $6_1 + 204 | 0 | 0, HEAP8[($6_1 + 239 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 238 | 0) >> 0] | 0 | 0, $6_1 + 224 | 0 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 240 | 0 | 0) | 0) {
     break label$1
    }
    $216($6_1 + 280 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($89($6_1 + 224 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 23 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 32 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  }
  $256($6_1 | 0, $1_1 | 0, HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0, $4_1 | 0);
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $6_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $127_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $127_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $7_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $230($6_1 + 224 | 0 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($213($6_1 + 280 | 0 | 0, $6_1 + 272 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 280 | 0) >> 2] | 0;
  $1371($3_1 | 0) | 0;
  $1371($6_1 + 224 | 0 | 0) | 0;
  global$0 = $6_1 + 288 | 0;
  return $1_1 | 0;
 }
 
 function $256($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $6$hi = 0, $7_1 = 0, $7$hi = 0, i64toi32_i32$2 = 0, $8_1 = 0, $8$hi = 0, $9_1 = 0, $9$hi = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($1_1 | 0) == ($2_1 | 0)) {
       break label$4
      }
      $5_1 = HEAP32[($57() | 0) >> 2] | 0;
      HEAP32[($57() | 0) >> 2] = 0;
      $1162($4_1 + 8 | 0 | 0, $1_1 | 0, $4_1 + 28 | 0 | 0);
      i64toi32_i32$2 = $4_1 + 16 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $6_1 = i64toi32_i32$0;
      $6$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      $7_1 = i64toi32_i32$1;
      $7$hi = i64toi32_i32$0;
      $1_1 = HEAP32[($57() | 0) >> 2] | 0;
      if (!$1_1) {
       break label$3
      }
      i64toi32_i32$0 = 0;
      $8_1 = 0;
      $8$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $9_1 = 0;
      $9$hi = i64toi32_i32$0;
      if ((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$2
      }
      i64toi32_i32$0 = $7$hi;
      $8_1 = $7_1;
      $8$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $6$hi;
      $9_1 = $6_1;
      $9$hi = i64toi32_i32$0;
      if (($1_1 | 0) != (68 | 0)) {
       break label$1
      }
      break label$2;
     }
     HEAP32[$3_1 >> 2] = 4;
     i64toi32_i32$0 = 0;
     $7_1 = 0;
     $7$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $6_1 = 0;
     $6$hi = i64toi32_i32$0;
     break label$1;
    }
    HEAP32[($57() | 0) >> 2] = $5_1;
    i64toi32_i32$0 = 0;
    $8_1 = 0;
    $8$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $9_1 = 0;
    $9$hi = i64toi32_i32$0;
    if ((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
     break label$1
    }
   }
   HEAP32[$3_1 >> 2] = 4;
   i64toi32_i32$0 = $8$hi;
   $7_1 = $8_1;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $9$hi;
   $6_1 = $9_1;
   $6$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $7_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 32 | 0;
 }
 
 function $257($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  $2_1 = $224($6_1 + 208 | 0 | 0) | 0;
  $42($6_1 + 16 | 0 | 0, $3_1 | 0);
  $258($37($6_1 + 16 | 0 | 0) | 0 | 0, 7008 | 0, 7034 | 0, $6_1 + 224 | 0 | 0) | 0;
  $203($6_1 + 16 | 0 | 0) | 0;
  $3_1 = $224($6_1 + 192 | 0 | 0) | 0;
  $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
  $1_1 = $227($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($212($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($89($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $89($3_1 | 0) | 0;
     $226($3_1 | 0, ($89($3_1 | 0) | 0) << 1 | 0 | 0);
     $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
     $1_1 = $227($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $1_1 | 0;
    }
    if ($228($214($6_1 + 264 | 0 | 0) | 0 | 0, 16 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, 0 | 0, $2_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $216($6_1 + 264 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $226($3_1 | 0, (HEAP32[($6_1 + 188 | 0) >> 2] | 0) - $1_1 | 0 | 0);
  $1_1 = $259($3_1 | 0) | 0;
  $7_1 = $260() | 0;
  HEAP32[$6_1 >> 2] = $5_1;
  label$4 : {
   if (($261($1_1 | 0, $7_1 | 0, 1295 | 0, $6_1 | 0) | 0 | 0) == (1 | 0)) {
    break label$4
   }
   HEAP32[$4_1 >> 2] = 4;
  }
  label$5 : {
   if (!($213($6_1 + 264 | 0 | 0, $6_1 + 256 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 264 | 0) >> 2] | 0;
  $1371($3_1 | 0) | 0;
  $1371($2_1 | 0) | 0;
  global$0 = $6_1 + 272 | 0;
  return $1_1 | 0;
 }
 
 function $258($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $259($0_1) {
  $0_1 = $0_1 | 0;
  return $15($0_1 | 0) | 0 | 0;
 }
 
 function $260() {
  label$1 : {
   if ((HEAPU8[(0 + 15212 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(15212 | 0) | 0)) {
    break label$1
   }
   HEAP32[(0 + 15208 | 0) >> 2] = $150(2147483647 | 0, 1588 | 0, 0 | 0) | 0;
   $1411(15212 | 0);
  }
  return HEAP32[(0 + 15208 | 0) >> 2] | 0 | 0;
 }
 
 function $261($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
  $1_1 = $268($4_1 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $140($0_1 | 0, $2_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $269($1_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $262($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[(($32($0_1 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
 }
 
 function $263($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($29($0_1 | 0) | 0)) {
    break label$1
   }
   return $546($0_1 | 0) | 0 | 0;
  }
  return $549($0_1 | 0) | 0 | 0;
 }
 
 function $264($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($1163($0_1 | 0) | 0) ^ ($1163($1_1 | 0) | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $265($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = (HEAPU8[$2_1 >> 0] | 0) & 255 | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $266($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  return $1108(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $267($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 1 | 0;
  return $1108(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $268($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $172(HEAP32[$1_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $269($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $172($1_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $270($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($7($3_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[$6_1 >> 2] = -1;
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $6_1) | 0;
    HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
    label$3 : {
     switch (HEAP32[$6_1 >> 2] | 0 | 0) {
     case 0:
      HEAP8[$5_1 >> 0] = 0;
      break label$1;
     case 1:
      HEAP8[$5_1 >> 0] = 1;
      break label$1;
     default:
      break label$3;
     };
    }
    HEAP8[$5_1 >> 0] = 1;
    HEAP32[$4_1 >> 2] = 4;
    break label$1;
   }
   $42($6_1 | 0, $3_1 | 0);
   $1_1 = $271($6_1 | 0) | 0;
   $203($6_1 | 0) | 0;
   $42($6_1 | 0, $3_1 | 0);
   $3_1 = $272($6_1 | 0) | 0;
   $203($6_1 | 0) | 0;
   $273($6_1 | 0, $3_1 | 0);
   $274($6_1 | 12 | 0 | 0, $3_1 | 0);
   $3_1 = $6_1 + 24 | 0;
   HEAP8[$5_1 >> 0] = ($275($6_1 + 24 | 0 | 0, $2_1 | 0, $6_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 | 0, 1 | 0) | 0 | 0) == ($6_1 | 0);
   $1_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
   label$6 : while (1) {
    $3_1 = $1385($3_1 + -12 | 0 | 0) | 0;
    if (($3_1 | 0) != ($6_1 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $271($0_1) {
  $0_1 = $0_1 | 0;
  return $208($0_1 | 0, 15244 | 0) | 0 | 0;
 }
 
 function $272($0_1) {
  $0_1 = $0_1 | 0;
  return $208($0_1 | 0, 15300 | 0) | 0 | 0;
 }
 
 function $273($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $274($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $275($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0, $10_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 120 | 0) >> 2] = $1_1;
  $8_1 = $276($2_1 | 0, $3_1 | 0) | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = 10;
  $9_1 = 0;
  $10_1 = $210($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $11_1 = $7_1 + 16 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 101 >>> 0) {
     break label$2
    }
    $11_1 = $1448($8_1 | 0) | 0;
    if (!$11_1) {
     break label$1
    }
    $211($10_1 | 0, $11_1 | 0);
   }
   $12_1 = $11_1;
   $1_1 = $2_1;
   label$3 : while (1) {
    label$4 : {
     if (($1_1 | 0) != ($3_1 | 0)) {
      break label$4
     }
     $13_1 = 0;
     label$5 : {
      label$6 : while (1) {
       label$7 : {
        label$8 : {
         if (!($277($0_1 | 0, $7_1 + 120 | 0 | 0) | 0)) {
          break label$8
         }
         if ($8_1) {
          break label$7
         }
        }
        label$9 : {
         if (!($278($0_1 | 0, $7_1 + 120 | 0 | 0) | 0)) {
          break label$9
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
        }
        break label$5;
       }
       $14_1 = $279($0_1 | 0) | 0;
       label$10 : {
        if ($6_1) {
         break label$10
        }
        $14_1 = $280($4_1 | 0, $14_1 | 0) | 0;
       }
       $15_1 = $13_1 + 1 | 0;
       $16_1 = 0;
       $12_1 = $11_1;
       $1_1 = $2_1;
       label$11 : while (1) {
        label$12 : {
         if (($1_1 | 0) != ($3_1 | 0)) {
          break label$12
         }
         $13_1 = $15_1;
         if (!($16_1 & 1 | 0)) {
          continue label$6
         }
         $281($0_1 | 0) | 0;
         $13_1 = $15_1;
         $12_1 = $11_1;
         $1_1 = $2_1;
         if (($9_1 + $8_1 | 0) >>> 0 < 2 >>> 0) {
          continue label$6
         }
         label$13 : while (1) {
          label$14 : {
           if (($1_1 | 0) != ($3_1 | 0)) {
            break label$14
           }
           $13_1 = $15_1;
           continue label$6;
          }
          label$15 : {
           if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (2 | 0)) {
            break label$15
           }
           if (($282($1_1 | 0) | 0 | 0) == ($15_1 | 0)) {
            break label$15
           }
           HEAP8[$12_1 >> 0] = 0;
           $9_1 = $9_1 + -1 | 0;
          }
          $12_1 = $12_1 + 1 | 0;
          $1_1 = $1_1 + 12 | 0;
          continue label$13;
         };
        }
        label$16 : {
         if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (1 | 0)) {
          break label$16
         }
         $17_1 = HEAP32[($283($1_1 | 0, $13_1 | 0) | 0) >> 2] | 0;
         label$17 : {
          if ($6_1) {
           break label$17
          }
          $17_1 = $280($4_1 | 0, $17_1 | 0) | 0;
         }
         label$18 : {
          label$19 : {
           if (($14_1 | 0) != ($17_1 | 0)) {
            break label$19
           }
           $16_1 = 1;
           if (($282($1_1 | 0) | 0 | 0) != ($15_1 | 0)) {
            break label$16
           }
           HEAP8[$12_1 >> 0] = 2;
           $16_1 = 1;
           $9_1 = $9_1 + 1 | 0;
           break label$18;
          }
          HEAP8[$12_1 >> 0] = 0;
         }
         $8_1 = $8_1 + -1 | 0;
        }
        $12_1 = $12_1 + 1 | 0;
        $1_1 = $1_1 + 12 | 0;
        continue label$11;
       };
      };
     }
     label$20 : {
      label$21 : {
       label$22 : while (1) {
        if (($2_1 | 0) == ($3_1 | 0)) {
         break label$21
        }
        label$23 : {
         if ((HEAPU8[$11_1 >> 0] | 0 | 0) == (2 | 0)) {
          break label$23
         }
         $11_1 = $11_1 + 1 | 0;
         $2_1 = $2_1 + 12 | 0;
         continue label$22;
        }
        break label$22;
       };
       $3_1 = $2_1;
       break label$20;
      }
      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
     }
     $218($10_1 | 0) | 0;
     global$0 = $7_1 + 128 | 0;
     return $3_1 | 0;
    }
    label$24 : {
     label$25 : {
      if ($284($1_1 | 0) | 0) {
       break label$25
      }
      HEAP8[$12_1 >> 0] = 1;
      break label$24;
     }
     HEAP8[$12_1 >> 0] = 2;
     $9_1 = $9_1 + 1 | 0;
     $8_1 = $8_1 + -1 | 0;
    }
    $12_1 = $12_1 + 1 | 0;
    $1_1 = $1_1 + 12 | 0;
    continue label$3;
   };
  }
  $1301();
  abort();
 }
 
 function $276($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1164($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $277($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($310($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $278($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $310($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $279($0_1) {
  $0_1 = $0_1 | 0;
  return $312(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $280($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $281($0_1) {
  $0_1 = $0_1 | 0;
  $313(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $282($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($432($0_1 | 0) | 0)) {
    break label$1
   }
   return $433($0_1 | 0) | 0 | 0;
  }
  return $434($0_1 | 0) | 0 | 0;
 }
 
 function $283($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($429($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $284($0_1) {
  $0_1 = $0_1 | 0;
  return !($282($0_1 | 0) | 0) | 0;
 }
 
 function $285($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $286($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $286($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $221($3_1 | 0) | 0;
  $2_1 = $287($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $288($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $224($6_1 + 192 | 0 | 0) | 0;
  $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
  $0_1 = $227($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($277($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($89($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $89($3_1 | 0) | 0;
     $226($3_1 | 0, ($89($3_1 | 0) | 0) << 1 | 0 | 0);
     $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
     $0_1 = $227($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($289($279($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $281($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($89($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $229($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $230($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($278($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1371($3_1 | 0) | 0;
  $1371($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $287($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $323($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $288($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $42($3_1 + 8 | 0 | 0, $1_1 | 0);
  $1_1 = $272($3_1 + 8 | 0 | 0) | 0;
  HEAP32[$2_1 >> 2] = $320($1_1 | 0) | 0;
  $321($0_1 | 0, $1_1 | 0);
  $203($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $289($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
     }
     $11_1 = 43;
     label$4 : {
      if ((HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
       break label$4
      }
      $11_1 = 45;
      if ((HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
       break label$3
      }
     }
     HEAP32[$3_1 >> 2] = $2_1 + 1 | 0;
     HEAP8[$2_1 >> 0] = $11_1;
     break label$2;
    }
    label$5 : {
     if (!($89($6_1 | 0) | 0)) {
      break label$5
     }
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$5
     }
     $0_1 = 0;
     $9_1 = HEAP32[$8_1 >> 2] | 0;
     if (($9_1 - $7_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$8_1 >> 2] = $9_1 + 4 | 0;
     HEAP32[$9_1 >> 2] = $0_1;
     break label$2;
    }
    $0_1 = -1;
    $9_1 = ($311($9_1 | 0, $9_1 + 104 | 0 | 0, $10_1 + 12 | 0 | 0) | 0) - $9_1 | 0;
    if (($9_1 | 0) > (92 | 0)) {
     break label$1
    }
    $6_1 = $9_1 >> 2 | 0;
    label$6 : {
     label$7 : {
      switch ($1_1 + -8 | 0 | 0) {
      case 0:
      case 2:
       if (($6_1 | 0) < ($1_1 | 0)) {
        break label$6
       }
       break label$1;
      case 1:
       break label$6;
      default:
       break label$7;
      };
     }
     if (($1_1 | 0) != (16 | 0)) {
      break label$6
     }
     if (($9_1 | 0) < (88 | 0)) {
      break label$6
     }
     $9_1 = HEAP32[$3_1 >> 2] | 0;
     if (($9_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     if (($9_1 - $2_1 | 0 | 0) > (2 | 0)) {
      break label$1
     }
     $0_1 = -1;
     if ((HEAPU8[($9_1 + -1 | 0) >> 0] | 0 | 0) != (48 | 0)) {
      break label$1
     }
     $0_1 = 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$3_1 >> 2] = $9_1 + 1 | 0;
     HEAP8[$9_1 >> 0] = HEAPU8[($6_1 + 7008 | 0) >> 0] | 0;
     break label$1;
    }
    $0_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[$3_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = HEAPU8[($6_1 + 7008 | 0) >> 0] | 0;
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    $0_1 = 0;
    break label$1;
   }
   $0_1 = 0;
   HEAP32[$4_1 >> 2] = 0;
  }
  global$0 = $10_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $290($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $291($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $291($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $114_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $221($3_1 | 0) | 0;
  $2_1 = $287($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $288($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $224($6_1 + 192 | 0 | 0) | 0;
  $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
  $0_1 = $227($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($277($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($89($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $89($3_1 | 0) | 0;
     $226($3_1 | 0, ($89($3_1 | 0) | 0) << 1 | 0 | 0);
     $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
     $0_1 = $227($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($289($279($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $281($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($89($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $233($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $114_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $230($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($278($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1371($3_1 | 0) | 0;
  $1371($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $292($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $293($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $293($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $221($3_1 | 0) | 0;
  $2_1 = $287($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $288($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $224($6_1 + 192 | 0 | 0) | 0;
  $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
  $0_1 = $227($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($277($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($89($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $89($3_1 | 0) | 0;
     $226($3_1 | 0, ($89($3_1 | 0) | 0) << 1 | 0 | 0);
     $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
     $0_1 = $227($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($289($279($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $281($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($89($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP16[$5_1 >> 1] = $236($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $230($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($278($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1371($3_1 | 0) | 0;
  $1371($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $294($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $295($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $295($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $221($3_1 | 0) | 0;
  $2_1 = $287($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $288($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $224($6_1 + 192 | 0 | 0) | 0;
  $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
  $0_1 = $227($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($277($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($89($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $89($3_1 | 0) | 0;
     $226($3_1 | 0, ($89($3_1 | 0) | 0) << 1 | 0 | 0);
     $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
     $0_1 = $227($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($289($279($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $281($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($89($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $239($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $230($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($278($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1371($3_1 | 0) | 0;
  $1371($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $296($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $297($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $297($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $221($3_1 | 0) | 0;
  $2_1 = $287($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $288($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $224($6_1 + 192 | 0 | 0) | 0;
  $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
  $0_1 = $227($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($277($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($89($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $89($3_1 | 0) | 0;
     $226($3_1 | 0, ($89($3_1 | 0) | 0) << 1 | 0 | 0);
     $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
     $0_1 = $227($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($289($279($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $281($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($89($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $242($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $230($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($278($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1371($3_1 | 0) | 0;
  $1371($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $298($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $299($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $299($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $114_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $1_1 = $221($3_1 | 0) | 0;
  $2_1 = $287($0_1 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0) | 0;
  $288($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 332 | 0 | 0);
  $3_1 = $224($6_1 + 192 | 0 | 0) | 0;
  $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
  $0_1 = $227($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($277($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($0_1 + ($89($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $89($3_1 | 0) | 0;
     $226($3_1 | 0, ($89($3_1 | 0) | 0) << 1 | 0 | 0);
     $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
     $0_1 = $227($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $0_1 | 0;
    }
    if ($289($279($6_1 + 344 | 0 | 0) | 0 | 0, $1_1 | 0, $0_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 332 | 0) >> 2] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0) | 0) {
     break label$1
    }
    $281($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($89($6_1 + 208 | 0 | 0) | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $245($0_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $114_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $230($6_1 + 208 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($278($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $0_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1371($3_1 | 0) | 0;
  $1371($6_1 + 208 | 0 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $0_1 | 0;
 }
 
 function $300($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $301($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $301($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 368 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 352 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 360 | 0) >> 2] = $1_1;
  $302($6_1 + 200 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 216 | 0 | 0);
  $3_1 = $224($6_1 + 184 | 0 | 0) | 0;
  $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
  $1_1 = $227($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($277($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($1_1 + ($89($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $89($3_1 | 0) | 0;
     $226($3_1 | 0, ($89($3_1 | 0) | 0) << 1 | 0 | 0);
     $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
     $1_1 = $227($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($303($279($6_1 + 360 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 180 | 0 | 0, HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 216 | 0) >> 2] | 0 | 0, $6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $281($6_1 + 360 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($89($6_1 + 200 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF32[$5_1 >> 2] = Math_fround($250($1_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0));
  $230($6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($278($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 360 | 0) >> 2] | 0;
  $1371($3_1 | 0) | 0;
  $1371($6_1 + 200 | 0 | 0) | 0;
  global$0 = $6_1 + 368 | 0;
  return $1_1 | 0;
 }
 
 function $302($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $42($5_1 + 8 | 0 | 0, $1_1 | 0);
  $309($271($5_1 + 8 | 0 | 0) | 0 | 0, 7008 | 0, 7040 | 0, $2_1 | 0) | 0;
  $2_1 = $272($5_1 + 8 | 0 | 0) | 0;
  HEAP32[$3_1 >> 2] = $319($2_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = $320($2_1 | 0) | 0;
  $321($0_1 | 0, $2_1 | 0);
  $203($5_1 + 8 | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $303($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $12_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP32[($12_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) != ($5_1 | 0)) {
      break label$3
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     HEAP8[$1_1 >> 0] = 0;
     $11_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = 46;
     if (!($89($7_1 | 0) | 0)) {
      break label$1
     }
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $1_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $1_1;
     break label$1;
    }
    label$4 : {
     if (($0_1 | 0) != ($6_1 | 0)) {
      break label$4
     }
     if (!($89($7_1 | 0) | 0)) {
      break label$4
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$2
     }
     $0_1 = 0;
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $0_1;
     $0_1 = 0;
     HEAP32[$10_1 >> 2] = 0;
     break label$1;
    }
    $0_1 = -1;
    $11_1 = ($322($11_1 | 0, $11_1 + 128 | 0 | 0, $12_1 + 12 | 0 | 0) | 0) - $11_1 | 0;
    if (($11_1 | 0) > (124 | 0)) {
     break label$1
    }
    $5_1 = HEAPU8[(($11_1 >> 2 | 0) + 7008 | 0) >> 0] | 0;
    label$5 : {
     label$6 : {
      label$7 : {
       $0_1 = $11_1 & -5 | 0;
       if (($0_1 | 0) == (88 | 0)) {
        break label$7
       }
       if (($0_1 | 0) != (96 | 0)) {
        break label$6
       }
       label$8 : {
        $11_1 = HEAP32[$4_1 >> 2] | 0;
        if (($11_1 | 0) == ($3_1 | 0)) {
         break label$8
        }
        $0_1 = -1;
        if (((HEAPU8[($11_1 + -1 | 0) >> 0] | 0) & 95 | 0 | 0) != ((HEAPU8[$2_1 >> 0] | 0) & 127 | 0 | 0)) {
         break label$1
        }
       }
       HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
       HEAP8[$11_1 >> 0] = $5_1;
       $0_1 = 0;
       break label$1;
      }
      HEAP8[$2_1 >> 0] = 80;
      break label$5;
     }
     $0_1 = HEAP8[$2_1 >> 0] | 0;
     if (($5_1 & 95 | 0 | 0) != ($0_1 | 0)) {
      break label$5
     }
     HEAP8[$2_1 >> 0] = $0_1 | 128 | 0;
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$5
     }
     HEAP8[$1_1 >> 0] = 0;
     if (!($89($7_1 | 0) | 0)) {
      break label$5
     }
     $0_1 = HEAP32[$9_1 >> 2] | 0;
     if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break label$5
     }
     $1_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = $1_1;
    }
    $0_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = $5_1;
    $0_1 = 0;
    if (($11_1 | 0) > (84 | 0)) {
     break label$1
    }
    HEAP32[$10_1 >> 2] = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
    break label$1;
   }
   $0_1 = -1;
  }
  global$0 = $12_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $304($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $305($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $305($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 368 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 352 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 360 | 0) >> 2] = $1_1;
  $302($6_1 + 200 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 216 | 0 | 0);
  $3_1 = $224($6_1 + 184 | 0 | 0) | 0;
  $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
  $1_1 = $227($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($277($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($1_1 + ($89($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $89($3_1 | 0) | 0;
     $226($3_1 | 0, ($89($3_1 | 0) | 0) << 1 | 0 | 0);
     $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
     $1_1 = $227($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($303($279($6_1 + 360 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 180 | 0 | 0, HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 216 | 0) >> 2] | 0 | 0, $6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $281($6_1 + 360 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($89($6_1 + 200 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 7 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAPF64[$5_1 >> 3] = +$253($1_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0);
  $230($6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($278($6_1 + 360 | 0 | 0, $6_1 + 352 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 360 | 0) >> 2] | 0;
  $1371($3_1 | 0) | 0;
  $1371($6_1 + 200 | 0 | 0) | 0;
  global$0 = $6_1 + 368 | 0;
  return $1_1 | 0;
 }
 
 function $306($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $307($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $307($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $7$hi = 0, $127_1 = 0;
  $6_1 = global$0 - 384 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 368 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 376 | 0) >> 2] = $1_1;
  $302($6_1 + 216 | 0 | 0, $3_1 | 0, $6_1 + 240 | 0 | 0, $6_1 + 236 | 0 | 0, $6_1 + 232 | 0 | 0);
  $3_1 = $224($6_1 + 200 | 0 | 0) | 0;
  $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
  $1_1 = $227($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 196 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 32 | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 0;
  HEAP8[($6_1 + 23 | 0) >> 0] = 1;
  HEAP8[($6_1 + 22 | 0) >> 0] = 69;
  label$1 : {
   label$2 : while (1) {
    if (!($277($6_1 + 376 | 0 | 0, $6_1 + 368 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 196 | 0) >> 2] | 0 | 0) != ($1_1 + ($89($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $2_1 = $89($3_1 | 0) | 0;
     $226($3_1 | 0, ($89($3_1 | 0) | 0) << 1 | 0 | 0);
     $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
     $1_1 = $227($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 196 | 0) >> 2] = $2_1 + $1_1 | 0;
    }
    if ($303($279($6_1 + 376 | 0 | 0) | 0 | 0, $6_1 + 23 | 0 | 0, $6_1 + 22 | 0 | 0, $1_1 | 0, $6_1 + 196 | 0 | 0, HEAP32[($6_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 232 | 0) >> 2] | 0 | 0, $6_1 + 216 | 0 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 240 | 0 | 0) | 0) {
     break label$1
    }
    $281($6_1 + 376 | 0 | 0) | 0;
    continue label$2;
   };
  }
  label$4 : {
   if (!($89($6_1 + 216 | 0 | 0) | 0)) {
    break label$4
   }
   if (!((HEAPU8[($6_1 + 23 | 0) >> 0] | 0) & 255 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
   if (($2_1 - ($6_1 + 32 | 0) | 0 | 0) > (159 | 0)) {
    break label$4
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = $2_1 + 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  }
  $256($6_1 | 0, $1_1 | 0, HEAP32[($6_1 + 196 | 0) >> 2] | 0 | 0, $4_1 | 0);
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $6_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $127_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $127_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $7_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $230($6_1 + 216 | 0 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $4_1 | 0);
  label$5 : {
   if (!($278($6_1 + 376 | 0 | 0, $6_1 + 368 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 376 | 0) >> 2] | 0;
  $1371($3_1 | 0) | 0;
  $1371($6_1 + 216 | 0 | 0) | 0;
  global$0 = $6_1 + 384 | 0;
  return $1_1 | 0;
 }
 
 function $308($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 336 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $1_1;
  $2_1 = $224($6_1 + 208 | 0 | 0) | 0;
  $42($6_1 + 16 | 0 | 0, $3_1 | 0);
  $309($271($6_1 + 16 | 0 | 0) | 0 | 0, 7008 | 0, 7034 | 0, $6_1 + 224 | 0 | 0) | 0;
  $203($6_1 + 16 | 0 | 0) | 0;
  $3_1 = $224($6_1 + 192 | 0 | 0) | 0;
  $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
  $1_1 = $227($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!($277($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($89($3_1 | 0) | 0) | 0 | 0)) {
      break label$3
     }
     $7_1 = $89($3_1 | 0) | 0;
     $226($3_1 | 0, ($89($3_1 | 0) | 0) << 1 | 0 | 0);
     $226($3_1 | 0, $225($3_1 | 0) | 0 | 0);
     $1_1 = $227($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $1_1 | 0;
    }
    if ($289($279($6_1 + 344 | 0 | 0) | 0 | 0, 16 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, $6_1 + 8 | 0 | 0, 0 | 0, $2_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
     break label$1
    }
    $281($6_1 + 344 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $226($3_1 | 0, (HEAP32[($6_1 + 188 | 0) >> 2] | 0) - $1_1 | 0 | 0);
  $1_1 = $259($3_1 | 0) | 0;
  $7_1 = $260() | 0;
  HEAP32[$6_1 >> 2] = $5_1;
  label$4 : {
   if (($261($1_1 | 0, $7_1 | 0, 1295 | 0, $6_1 | 0) | 0 | 0) == (1 | 0)) {
    break label$4
   }
   HEAP32[$4_1 >> 2] = 4;
  }
  label$5 : {
   if (!($278($6_1 + 344 | 0 | 0, $6_1 + 336 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 344 | 0) >> 2] | 0;
  $1371($3_1 | 0) | 0;
  $1371($2_1 | 0) | 0;
  global$0 = $6_1 + 352 | 0;
  return $1_1 | 0;
 }
 
 function $309($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $310($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($1165($0_1 | 0) | 0) ^ ($1165($1_1 | 0) | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $311($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = HEAP32[$2_1 >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $312($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  return $1166(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $313($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 4 | 0;
  return $1166(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $314($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $315($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $316($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $317($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = (HEAPU8[$2_1 >> 0] | 0) & 255 | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $318($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return 7008 | 0;
 }
 
 function $319($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $320($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $321($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $322($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2_1 = HEAP32[$2_1 >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($0_1 | 0) == ($1_1 | 0)) {
      break label$3
     }
     if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$2
     }
     $1_1 = $0_1;
    }
    return $1_1 | 0;
   }
   $0_1 = $0_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $323($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $42($3_1 + 8 | 0 | 0, $1_1 | 0);
  $309($271($3_1 + 8 | 0 | 0) | 0 | 0, 7008 | 0, 7034 | 0, $2_1 | 0) | 0;
  $203($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $324($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($7($2_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0;
    break label$1;
   }
   $42($5_1 + 24 | 0 | 0, $2_1 | 0);
   $2_1 = $204($5_1 + 24 | 0 | 0) | 0;
   $203($5_1 + 24 | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!$4_1) {
      break label$4
     }
     $205($5_1 + 24 | 0 | 0, $2_1 | 0);
     break label$3;
    }
    $206($5_1 + 24 | 0 | 0, $2_1 | 0);
   }
   HEAP32[($5_1 + 16 | 0) >> 2] = $325($5_1 + 24 | 0 | 0) | 0;
   label$5 : while (1) {
    HEAP32[($5_1 + 8 | 0) >> 2] = $326($5_1 + 24 | 0 | 0) | 0;
    label$6 : {
     if ($327($5_1 + 16 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) {
      break label$6
     }
     $2_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
     $1371($5_1 + 24 | 0 | 0) | 0;
     break label$1;
    }
    $2_1 = HEAP8[($328($5_1 + 16 | 0 | 0) | 0) >> 0] | 0;
    $330($329($5_1 + 40 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $331($5_1 + 16 | 0 | 0) | 0;
    $332($5_1 + 40 | 0 | 0) | 0;
    continue label$5;
   };
  }
  global$0 = $5_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $325($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($333($1_1 + 8 | 0 | 0, $263($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $326($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($333($1_1 + 8 | 0 | 0, ($263($0_1 | 0) | 0) + ($89($0_1 | 0) | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $327($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($334($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $328($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $329($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $330($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   if (!($19($335($2_1 | 0, $1_1 | 0) | 0 | 0, $18() | 0 | 0) | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return $0_1 | 0;
 }
 
 function $331($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  return $0_1 | 0;
 }
 
 function $332($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $333($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $334($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($574($0_1 | 0) | 0 | 0) == ($574($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $335($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return (((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $1108($1_1 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0;
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = $2_1 + 1 | 0;
  HEAP8[$2_1 >> 0] = $1_1;
  return $1108($1_1 | 0) | 0 | 0;
 }
 
 function $336($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $8_1 = 0, $11_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  $12_1 = 0;
  HEAP16[($6_1 + 28 | 0) >> 1] = HEAPU8[($12_1 + 7045 | 0) >> 0] | 0 | ((HEAPU8[($12_1 + 7046 | 0) >> 0] | 0) << 8 | 0) | 0;
  $11_1 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAPU8[($11_1 + 7041 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 7042 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 7043 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 7044 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $337($6_1 + 24 | 0 | 1 | 0 | 0, 1383 | 0, 1 | 0, $7($2_1 | 0) | 0 | 0);
  $7_1 = $7($2_1 | 0) | 0;
  $8_1 = $6_1 + -16 | 0;
  global$0 = $8_1;
  $10_1 = $260() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $7_1 = $8_1 + ($338($8_1 | 0, (($7_1 >>> 9 | 0) & 1 | 0) + 13 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $10_1 = $339($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
  $4_1 = $8_1 + -32 | 0;
  global$0 = $4_1;
  $42($6_1 + 8 | 0 | 0, $2_1 | 0);
  $340($8_1 | 0, $10_1 | 0, $7_1 | 0, $4_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $203($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $9($1_1 | 0, $4_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $337($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   if (!($3_1 & 2048 | 0)) {
    break label$1
   }
   HEAP8[$0_1 >> 0] = 43;
   $0_1 = $0_1 + 1 | 0;
  }
  label$2 : {
   if (!($3_1 & 512 | 0)) {
    break label$2
   }
   HEAP8[$0_1 >> 0] = 35;
   $0_1 = $0_1 + 1 | 0;
  }
  label$3 : {
   label$4 : while (1) {
    $4_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$4_1) {
     break label$3
    }
    HEAP8[$0_1 >> 0] = $4_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$4;
   };
  }
  label$5 : {
   label$6 : {
    $1_1 = $3_1 & 74 | 0;
    if (($1_1 | 0) != (64 | 0)) {
     break label$6
    }
    $1_1 = 111;
    break label$5;
   }
   label$7 : {
    if (($1_1 | 0) != (8 | 0)) {
     break label$7
    }
    $1_1 = $3_1 & 16384 | 0 ? 88 : 120;
    break label$5;
   }
   $1_1 = $2_1 ? 100 : 117;
  }
  HEAP8[$0_1 >> 0] = $1_1;
 }
 
 function $338($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
  $2_1 = $268($5_1 | 0, $5_1 + 12 | 0 | 0) | 0;
  $0_1 = $85($0_1 | 0, $1_1 | 0, $3_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $269($2_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $339($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   $2_1 = ($7($2_1 | 0) | 0) & 176 | 0;
   if (($2_1 | 0) != (32 | 0)) {
    break label$1
   }
   return $1_1 | 0;
  }
  label$2 : {
   if (($2_1 | 0) != (16 | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     $2_1 = HEAPU8[$0_1 >> 0] | 0;
     switch ($2_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$4;
     default:
      break label$3;
     };
    }
    return $0_1 + 1 | 0 | 0;
   }
   if (($1_1 - $0_1 | 0 | 0) < (2 | 0)) {
    break label$2
   }
   if (($2_1 | 0) != (48 | 0)) {
    break label$2
   }
   if ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
    break label$2
   }
   $0_1 = $0_1 + 2 | 0;
  }
  return $0_1 | 0;
 }
 
 function $340($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $10_1 = 0, $11_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $12_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $37($6_1 | 0) | 0;
  $6_1 = $204($6_1 | 0) | 0;
  $316($7_1 | 0, $6_1 | 0);
  label$1 : {
   label$2 : {
    if (!($88($7_1 | 0) | 0)) {
     break label$2
    }
    $258($8_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $6_1 = $3_1 + ($2_1 - $0_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
   $9_1 = $0_1;
   label$3 : {
    label$4 : {
     $10_1 = HEAPU8[$9_1 >> 0] | 0;
     switch ($10_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$4;
     default:
      break label$3;
     };
    }
    $10_1 = $38($8_1 | 0, ($10_1 << 24 | 0) >> 24 | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $9_1 = $0_1 + 1 | 0;
   }
   label$5 : {
    if (($2_1 - $9_1 | 0 | 0) < (2 | 0)) {
     break label$5
    }
    if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$5
    }
    if ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$5
    }
    $10_1 = $38($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $10_1 = $38($8_1 | 0, HEAP8[($9_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $9_1 = $9_1 + 2 | 0;
   }
   $341($9_1 | 0, $2_1 | 0);
   $10_1 = 0;
   $12_1 = $315($6_1 | 0) | 0;
   $11_1 = 0;
   $6_1 = $9_1;
   label$6 : while (1) {
    label$7 : {
     if ($6_1 >>> 0 < $2_1 >>> 0) {
      break label$7
     }
     $341($3_1 + ($9_1 - $0_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     break label$1;
    }
    label$8 : {
     if (!(HEAPU8[($227($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0)) {
      break label$8
     }
     if (($10_1 | 0) != (HEAP8[($227($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$8
     }
     $10_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $10_1 + 1 | 0;
     HEAP8[$10_1 >> 0] = $12_1;
     $11_1 = $11_1 + ($11_1 >>> 0 < (($89($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $10_1 = 0;
    }
    $13_1 = $38($8_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $14_1 + 1 | 0;
    HEAP8[$14_1 >> 0] = $13_1;
    $6_1 = $6_1 + 1 | 0;
    $10_1 = $10_1 + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + ($1_1 - $0_1 | 0) | 0;
  $1371($7_1 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $341($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $395($0_1 | 0, $1_1 | 0);
 }
 
 function $342($0_1) {
  $0_1 = $0_1 | 0;
  return $1052($263($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $343($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 37;
  HEAP32[($6_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $337($6_1 + 24 | 0 | 1 | 0 | 0, 1376 | 0, 1 | 0, $7($2_1 | 0) | 0 | 0);
  $7_1 = $7($2_1 | 0) | 0;
  $8_1 = $6_1 + -32 | 0;
  global$0 = $8_1;
  $10_1 = $260() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $10_1 = $8_1 + ($338($8_1 | 0, (($7_1 >>> 9 | 0) & 1 | 0) + 23 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $11_1 = $339($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
  $7_1 = $8_1 + -48 | 0;
  global$0 = $7_1;
  $42($6_1 + 8 | 0 | 0, $2_1 | 0);
  $340($8_1 | 0, $11_1 | 0, $10_1 | 0, $7_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $203($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $9($1_1 | 0, $7_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $344($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $8_1 = 0, $11_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  $12_1 = 0;
  HEAP16[($6_1 + 28 | 0) >> 1] = HEAPU8[($12_1 + 7045 | 0) >> 0] | 0 | ((HEAPU8[($12_1 + 7046 | 0) >> 0] | 0) << 8 | 0) | 0;
  $11_1 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAPU8[($11_1 + 7041 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 7042 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 7043 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 7044 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $337($6_1 + 24 | 0 | 1 | 0 | 0, 1383 | 0, 0 | 0, $7($2_1 | 0) | 0 | 0);
  $7_1 = $7($2_1 | 0) | 0;
  $8_1 = $6_1 + -16 | 0;
  global$0 = $8_1;
  $10_1 = $260() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $7_1 = $8_1 + ($338($8_1 | 0, ($7_1 >>> 9 | 0) & 1 | 0 | 12 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $10_1 = $339($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
  $4_1 = $8_1 + -32 | 0;
  global$0 = $4_1;
  $42($6_1 + 8 | 0 | 0, $2_1 | 0);
  $340($8_1 | 0, $10_1 | 0, $7_1 | 0, $4_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $203($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $9($1_1 | 0, $4_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $345($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 37;
  HEAP32[($6_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $337($6_1 + 24 | 0 | 1 | 0 | 0, 1376 | 0, 0 | 0, $7($2_1 | 0) | 0 | 0);
  $7_1 = $7($2_1 | 0) | 0;
  $8_1 = $6_1 + -32 | 0;
  global$0 = $8_1;
  $10_1 = $260() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $10_1 = $8_1 + ($338($8_1 | 0, (($7_1 >>> 9 | 0) & 1 | 0) + 23 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $11_1 = $339($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
  $7_1 = $8_1 + -48 | 0;
  global$0 = $7_1;
  $42($6_1 + 8 | 0 | 0, $2_1 | 0);
  $340($8_1 | 0, $11_1 | 0, $10_1 | 0, $7_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $203($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $9($1_1 | 0, $7_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $346($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  var $5_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 200 | 0) >> 2] = 37;
  HEAP32[($5_1 + 204 | 0) >> 2] = 0;
  $6_1 = $347($5_1 + 200 | 0 | 1 | 0 | 0, 1661 | 0, $7($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($5_1 + 156 | 0) >> 2] = $5_1 + 160 | 0;
  $7_1 = $260() | 0;
  label$1 : {
   label$2 : {
    if (!$6_1) {
     break label$2
    }
    $8_1 = $348($2_1 | 0) | 0;
    HEAPF64[($5_1 + 40 | 0) >> 3] = $4_1;
    HEAP32[($5_1 + 32 | 0) >> 2] = $8_1;
    $7_1 = $338($5_1 + 160 | 0 | 0, 30 | 0, $7_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 32 | 0 | 0) | 0;
    break label$1;
   }
   HEAPF64[($5_1 + 48 | 0) >> 3] = $4_1;
   $7_1 = $338($5_1 + 160 | 0 | 0, 30 | 0, $7_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 48 | 0 | 0) | 0;
  }
  HEAP32[($5_1 + 80 | 0) >> 2] = 10;
  $9_1 = $349($5_1 + 144 | 0 | 0, 0 | 0, $5_1 + 80 | 0 | 0) | 0;
  $10_1 = $5_1 + 160 | 0;
  $8_1 = $10_1;
  label$3 : {
   label$4 : {
    if (($7_1 | 0) < (30 | 0)) {
     break label$4
    }
    $7_1 = $260() | 0;
    label$5 : {
     label$6 : {
      if (!$6_1) {
       break label$6
      }
      $8_1 = $348($2_1 | 0) | 0;
      HEAPF64[($5_1 + 8 | 0) >> 3] = $4_1;
      HEAP32[$5_1 >> 2] = $8_1;
      $7_1 = $350($5_1 + 156 | 0 | 0, $7_1 | 0, $5_1 + 200 | 0 | 0, $5_1 | 0) | 0;
      break label$5;
     }
     HEAPF64[($5_1 + 16 | 0) >> 3] = $4_1;
     $7_1 = $350($5_1 + 156 | 0 | 0, $7_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 16 | 0 | 0) | 0;
    }
    if (($7_1 | 0) == (-1 | 0)) {
     break label$3
    }
    $351($9_1 | 0, HEAP32[($5_1 + 156 | 0) >> 2] | 0 | 0);
    $8_1 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
   }
   $6_1 = $8_1 + $7_1 | 0;
   $11_1 = $339($8_1 | 0, $6_1 | 0, $2_1 | 0) | 0;
   HEAP32[($5_1 + 80 | 0) >> 2] = 10;
   $8_1 = $349($5_1 + 72 | 0 | 0, 0 | 0, $5_1 + 80 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($5_1 + 156 | 0) >> 2] | 0 | 0) != ($5_1 + 160 | 0 | 0)) {
      break label$8
     }
     $7_1 = $5_1 + 80 | 0;
     break label$7;
    }
    $7_1 = $1448($7_1 << 1 | 0 | 0) | 0;
    if (!$7_1) {
     break label$3
    }
    $351($8_1 | 0, $7_1 | 0);
    $10_1 = HEAP32[($5_1 + 156 | 0) >> 2] | 0;
   }
   $42($5_1 + 56 | 0 | 0, $2_1 | 0);
   $352($10_1 | 0, $11_1 | 0, $6_1 | 0, $7_1 | 0, $5_1 + 68 | 0 | 0, $5_1 + 64 | 0 | 0, $5_1 + 56 | 0 | 0);
   $203($5_1 + 56 | 0 | 0) | 0;
   $2_1 = $9($1_1 | 0, $7_1 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $353($8_1 | 0) | 0;
   $353($9_1 | 0) | 0;
   global$0 = $5_1 + 208 | 0;
   return $2_1 | 0;
  }
  $1301();
  abort();
 }
 
 function $347($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!($2_1 & 2048 | 0)) {
    break label$1
   }
   HEAP8[$0_1 >> 0] = 43;
   $0_1 = $0_1 + 1 | 0;
  }
  label$2 : {
   if (!($2_1 & 1024 | 0)) {
    break label$2
   }
   HEAP8[$0_1 >> 0] = 35;
   $0_1 = $0_1 + 1 | 0;
  }
  label$3 : {
   $3_1 = $2_1 & 260 | 0;
   if (($3_1 | 0) == (260 | 0)) {
    break label$3
   }
   $5_1 = 10798;
   HEAP8[$0_1 >> 0] = $5_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $5_1 >>> 8 | 0;
   $0_1 = $0_1 + 2 | 0;
  }
  $4_1 = $2_1 & 16384 | 0;
  label$4 : {
   label$5 : while (1) {
    $2_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$2_1) {
     break label$4
    }
    HEAP8[$0_1 >> 0] = $2_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$5;
   };
  }
  label$6 : {
   label$7 : {
    label$8 : {
     if (($3_1 | 0) == (256 | 0)) {
      break label$8
     }
     if (($3_1 | 0) != (4 | 0)) {
      break label$7
     }
     $1_1 = $4_1 ? 70 : 102;
     break label$6;
    }
    $1_1 = $4_1 ? 69 : 101;
    break label$6;
   }
   label$9 : {
    if (($3_1 | 0) != (260 | 0)) {
     break label$9
    }
    $1_1 = $4_1 ? 65 : 97;
    break label$6;
   }
   $1_1 = $4_1 ? 71 : 103;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return ($3_1 | 0) != (260 | 0) | 0;
 }
 
 function $348($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $349($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $354($0_1 | 0, $3_1 + 12 | 0 | 0, $50($2_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $350($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
  $1_1 = $268($4_1 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $151($0_1 | 0, $2_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $269($1_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $351($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($355($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($355($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($356($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $352($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $11_1 = 0, $10_1 = 0, $12_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $9_1 = 0, $16_1 = 0, $13_1 = 0, $15_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $37($6_1 | 0) | 0;
  $9_1 = $204($6_1 | 0) | 0;
  $316($7_1 | 0, $9_1 | 0);
  HEAP32[$5_1 >> 2] = $3_1;
  $10_1 = $0_1;
  label$1 : {
   label$2 : {
    $6_1 = HEAPU8[$10_1 >> 0] | 0;
    switch ($6_1 + -43 | 0 | 0) {
    case 0:
    case 2:
     break label$2;
    default:
     break label$1;
    };
   }
   $6_1 = $38($8_1 | 0, ($6_1 << 24 | 0) >> 24 | 0 | 0) | 0;
   $11_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
   HEAP8[$11_1 >> 0] = $6_1;
   $10_1 = $0_1 + 1 | 0;
  }
  $6_1 = $10_1;
  label$3 : {
   label$4 : {
    if (($2_1 - $6_1 | 0 | 0) <= (1 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$4
    }
    $6_1 = $38($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $6_1;
    $6_1 = $38($8_1 | 0, HEAP8[($10_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $6_1;
    $10_1 = $10_1 + 2 | 0;
    $6_1 = $10_1;
    label$5 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if (!($153(HEAP8[$6_1 >> 0] | 0 | 0, $260() | 0 | 0) | 0)) {
      break label$3
     }
     $6_1 = $6_1 + 1 | 0;
     continue label$5;
    };
   }
   label$6 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$3
    }
    if (!($64(HEAP8[$6_1 >> 0] | 0 | 0, $260() | 0 | 0) | 0)) {
     break label$3
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$6;
   };
  }
  label$7 : {
   label$8 : {
    if (!($88($7_1 | 0) | 0)) {
     break label$8
    }
    $258($8_1 | 0, $10_1 | 0, $6_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + ($6_1 - $10_1 | 0) | 0;
    break label$7;
   }
   $341($10_1 | 0, $6_1 | 0);
   $12_1 = 0;
   $13_1 = $315($9_1 | 0) | 0;
   $14_1 = 0;
   $11_1 = $10_1;
   label$9 : while (1) {
    label$10 : {
     if ($11_1 >>> 0 < $6_1 >>> 0) {
      break label$10
     }
     $341($3_1 + ($10_1 - $0_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     break label$7;
    }
    label$11 : {
     if ((HEAP8[($227($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break label$11
     }
     if (($12_1 | 0) != (HEAP8[($227($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$11
     }
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
     HEAP8[$12_1 >> 0] = $13_1;
     $14_1 = $14_1 + ($14_1 >>> 0 < (($89($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $12_1 = 0;
    }
    $15_1 = $38($8_1 | 0, HEAP8[$11_1 >> 0] | 0 | 0) | 0;
    $16_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $16_1 + 1 | 0;
    HEAP8[$16_1 >> 0] = $15_1;
    $11_1 = $11_1 + 1 | 0;
    $12_1 = $12_1 + 1 | 0;
    continue label$9;
   };
  }
  label$12 : while (1) {
   label$13 : {
    label$14 : {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$14
     }
     $11_1 = HEAPU8[$6_1 >> 0] | 0;
     if (($11_1 | 0) != (46 | 0)) {
      break label$13
     }
     $11_1 = $314($9_1 | 0) | 0;
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
     HEAP8[$12_1 >> 0] = $11_1;
     $6_1 = $6_1 + 1 | 0;
    }
    $258($8_1 | 0, $6_1 | 0, $2_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    $6_1 = (HEAP32[$5_1 >> 2] | 0) + ($2_1 - $6_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + ($1_1 - $0_1 | 0) | 0;
    $1371($7_1 | 0) | 0;
    global$0 = $7_1 + 16 | 0;
    return;
   }
   $11_1 = $38($8_1 | 0, ($11_1 << 24 | 0) >> 24 | 0 | 0) | 0;
   $12_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
   HEAP8[$12_1 >> 0] = $11_1;
   $6_1 = $6_1 + 1 | 0;
   continue label$12;
  };
 }
 
 function $353($0_1) {
  $0_1 = $0_1 | 0;
  $351($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $354($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1168($0_1 | 0, $1167($1_1 | 0) | 0 | 0) | 0;
  $55($0_1 + 4 | 0 | 0, $54($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $355($0_1) {
  $0_1 = $0_1 | 0;
  return $1169($0_1 | 0) | 0 | 0;
 }
 
 function $356($0_1) {
  $0_1 = $0_1 | 0;
  return $56($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $357($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var $6_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $7_1 = 0, $11_1 = 0, $10_1 = 0, $12_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 248 | 0) >> 2] = 37;
  HEAP32[($6_1 + 252 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = $347($6_1 + 248 | 0 | 1 | 0 | 0, 1577 | 0, $7($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($6_1 + 204 | 0) >> 2] = $6_1 + 208 | 0;
  $8_1 = $260() | 0;
  label$1 : {
   label$2 : {
    if (!$7_1) {
     break label$2
    }
    $9_1 = $348($2_1 | 0) | 0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $6_1 + 64 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $5_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $6_1;
    HEAP32[($6_1 + 56 | 0) >> 2] = $4_1;
    HEAP32[($6_1 + 60 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($6_1 + 48 | 0) >> 2] = $9_1;
    $8_1 = $338($6_1 + 208 | 0 | 0, 30 | 0, $8_1 | 0, $6_1 + 248 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 80 | 0) >> 2] = $4_1;
   HEAP32[($6_1 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 88 | 0) >> 2] = $5_1;
   HEAP32[($6_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   $8_1 = $338($6_1 + 208 | 0 | 0, 30 | 0, $8_1 | 0, $6_1 + 248 | 0 | 0, $6_1 + 80 | 0 | 0) | 0;
  }
  HEAP32[($6_1 + 128 | 0) >> 2] = 10;
  $10_1 = $349($6_1 + 192 | 0 | 0, 0 | 0, $6_1 + 128 | 0 | 0) | 0;
  $11_1 = $6_1 + 208 | 0;
  $9_1 = $11_1;
  label$3 : {
   label$4 : {
    if (($8_1 | 0) < (30 | 0)) {
     break label$4
    }
    $8_1 = $260() | 0;
    label$5 : {
     label$6 : {
      if (!$7_1) {
       break label$6
      }
      $9_1 = $348($2_1 | 0) | 0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $6_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $6_1;
      HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
      HEAP32[($6_1 + 12 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[$6_1 >> 2] = $9_1;
      $8_1 = $350($6_1 + 204 | 0 | 0, $8_1 | 0, $6_1 + 248 | 0 | 0, $6_1 | 0) | 0;
      break label$5;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[($6_1 + 32 | 0) >> 2] = $4_1;
     HEAP32[($6_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[($6_1 + 40 | 0) >> 2] = $5_1;
     HEAP32[($6_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     $8_1 = $350($6_1 + 204 | 0 | 0, $8_1 | 0, $6_1 + 248 | 0 | 0, $6_1 + 32 | 0 | 0) | 0;
    }
    if (($8_1 | 0) == (-1 | 0)) {
     break label$3
    }
    $351($10_1 | 0, HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0);
    $9_1 = HEAP32[($6_1 + 204 | 0) >> 2] | 0;
   }
   $7_1 = $9_1 + $8_1 | 0;
   $12_1 = $339($9_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
   HEAP32[($6_1 + 128 | 0) >> 2] = 10;
   $9_1 = $349($6_1 + 120 | 0 | 0, 0 | 0, $6_1 + 128 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0) != ($6_1 + 208 | 0 | 0)) {
      break label$8
     }
     $8_1 = $6_1 + 128 | 0;
     break label$7;
    }
    $8_1 = $1448($8_1 << 1 | 0 | 0) | 0;
    if (!$8_1) {
     break label$3
    }
    $351($9_1 | 0, $8_1 | 0);
    $11_1 = HEAP32[($6_1 + 204 | 0) >> 2] | 0;
   }
   $42($6_1 + 104 | 0 | 0, $2_1 | 0);
   $352($11_1 | 0, $12_1 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 116 | 0 | 0, $6_1 + 112 | 0 | 0, $6_1 + 104 | 0 | 0);
   $203($6_1 + 104 | 0 | 0) | 0;
   $2_1 = $9($1_1 | 0, $8_1 | 0, HEAP32[($6_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 112 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $353($9_1 | 0) | 0;
   $353($10_1 | 0) | 0;
   global$0 = $6_1 + 256 | 0;
   return $2_1 | 0;
  }
  $1301();
  abort();
 }
 
 function $358($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $9_1 = 0, $6_1 = 0, $10_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  $10_1 = 0;
  HEAP16[($5_1 + 92 | 0) >> 1] = HEAPU8[($10_1 + 7051 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 7052 | 0) >> 0] | 0) << 8 | 0) | 0;
  $9_1 = 0;
  HEAP32[($5_1 + 88 | 0) >> 2] = HEAPU8[($9_1 + 7047 | 0) >> 0] | 0 | ((HEAPU8[($9_1 + 7048 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($9_1 + 7049 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($9_1 + 7050 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $6_1 = $260() | 0;
  HEAP32[$5_1 >> 2] = $4_1;
  $7_1 = $338($5_1 + 64 | 0 | 0, 20 | 0, $6_1 | 0, $5_1 + 88 | 0 | 0, $5_1 | 0) | 0;
  $4_1 = ($5_1 + 64 | 0) + $7_1 | 0;
  $6_1 = $339($5_1 + 64 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
  $42($5_1 + 16 | 0 | 0, $2_1 | 0);
  $8_1 = $37($5_1 + 16 | 0 | 0) | 0;
  $203($5_1 + 16 | 0 | 0) | 0;
  $258($8_1 | 0, $5_1 + 64 | 0 | 0, $4_1 | 0, $5_1 + 16 | 0 | 0) | 0;
  $7_1 = $7_1 + ($5_1 + 16 | 0) | 0;
  $2_1 = $9($1_1 | 0, $5_1 + 16 | 0 | 0, (($6_1 | 0) == ($4_1 | 0) ? $7_1 : ($5_1 + 16 | 0) + ($6_1 - ($5_1 + 64 | 0) | 0) | 0) | 0, $7_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $5_1 + 96 | 0;
  return $2_1 | 0;
 }
 
 function $359($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (($7($2_1 | 0) | 0) & 1 | 0) {
     break label$2
    }
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0;
    break label$1;
   }
   $42($5_1 + 24 | 0 | 0, $2_1 | 0);
   $2_1 = $272($5_1 + 24 | 0 | 0) | 0;
   $203($5_1 + 24 | 0 | 0) | 0;
   label$3 : {
    label$4 : {
     if (!$4_1) {
      break label$4
     }
     $273($5_1 + 24 | 0 | 0, $2_1 | 0);
     break label$3;
    }
    $274($5_1 + 24 | 0 | 0, $2_1 | 0);
   }
   HEAP32[($5_1 + 16 | 0) >> 2] = $360($5_1 + 24 | 0 | 0) | 0;
   label$5 : while (1) {
    HEAP32[($5_1 + 8 | 0) >> 2] = $361($5_1 + 24 | 0 | 0) | 0;
    label$6 : {
     if ($362($5_1 + 16 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) {
      break label$6
     }
     $2_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
     $1385($5_1 + 24 | 0 | 0) | 0;
     break label$1;
    }
    $2_1 = HEAP32[($363($5_1 + 16 | 0 | 0) | 0) >> 2] | 0;
    $365($364($5_1 + 40 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $366($5_1 + 16 | 0 | 0) | 0;
    $367($5_1 + 40 | 0 | 0) | 0;
    continue label$5;
   };
  }
  global$0 = $5_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $360($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($369($1_1 + 8 | 0 | 0, $368($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $361($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($369($1_1 + 8 | 0 | 0, ($368($0_1 | 0) | 0) + (($282($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $362($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($370($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $363($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $364($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $365($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   if (!($373($371($2_1 | 0, $1_1 | 0) | 0 | 0, $372() | 0 | 0) | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return $0_1 | 0;
 }
 
 function $366($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 4 | 0;
  return $0_1 | 0;
 }
 
 function $367($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $368($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($432($0_1 | 0) | 0)) {
    break label$1
   }
   return $609($0_1 | 0) | 0 | 0;
  }
  return $612($0_1 | 0) | 0 | 0;
 }
 
 function $369($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $370($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($635($0_1 | 0) | 0 | 0) == ($635($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $371($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   return (((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $1166($1_1 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0;
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = $2_1 + 4 | 0;
  HEAP32[$2_1 >> 2] = $1_1;
  return $1166($1_1 | 0) | 0 | 0;
 }
 
 function $372() {
  return -1 | 0;
 }
 
 function $373($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($0_1 | 0) == ($1_1 | 0) | 0;
 }
 
 function $374($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $8_1 = 0, $11_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  $12_1 = 0;
  HEAP16[($6_1 + 28 | 0) >> 1] = HEAPU8[($12_1 + 7045 | 0) >> 0] | 0 | ((HEAPU8[($12_1 + 7046 | 0) >> 0] | 0) << 8 | 0) | 0;
  $11_1 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAPU8[($11_1 + 7041 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 7042 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 7043 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 7044 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $337($6_1 + 24 | 0 | 1 | 0 | 0, 1383 | 0, 1 | 0, $7($2_1 | 0) | 0 | 0);
  $7_1 = $7($2_1 | 0) | 0;
  $8_1 = $6_1 + -16 | 0;
  global$0 = $8_1;
  $10_1 = $260() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $4_1 = ($7_1 >>> 9 | 0) & 1 | 0;
  $7_1 = $8_1 + ($338($8_1 | 0, $4_1 + 13 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $10_1 = $339($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
  $4_1 = $8_1 - ((($4_1 << 3 | 0) + 107 | 0) & 112 | 0) | 0;
  global$0 = $4_1;
  $42($6_1 + 8 | 0 | 0, $2_1 | 0);
  $375($8_1 | 0, $10_1 | 0, $7_1 | 0, $4_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $203($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $376($1_1 | 0, $4_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $375($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $10_1 = 0, $11_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $12_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $271($6_1 | 0) | 0;
  $6_1 = $272($6_1 | 0) | 0;
  $321($7_1 | 0, $6_1 | 0);
  label$1 : {
   label$2 : {
    if (!($88($7_1 | 0) | 0)) {
     break label$2
    }
    $309($8_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $6_1 = $3_1 + (($2_1 - $0_1 | 0) << 2 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
   $9_1 = $0_1;
   label$3 : {
    label$4 : {
     $10_1 = HEAPU8[$9_1 >> 0] | 0;
     switch ($10_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$4;
     default:
      break label$3;
     };
    }
    $10_1 = $377($8_1 | 0, ($10_1 << 24 | 0) >> 24 | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $9_1 = $0_1 + 1 | 0;
   }
   label$5 : {
    if (($2_1 - $9_1 | 0 | 0) < (2 | 0)) {
     break label$5
    }
    if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$5
    }
    if ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$5
    }
    $10_1 = $377($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $10_1 = $377($8_1 | 0, HEAP8[($9_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $9_1 = $9_1 + 2 | 0;
   }
   $341($9_1 | 0, $2_1 | 0);
   $10_1 = 0;
   $12_1 = $320($6_1 | 0) | 0;
   $11_1 = 0;
   $6_1 = $9_1;
   label$6 : while (1) {
    label$7 : {
     if ($6_1 >>> 0 < $2_1 >>> 0) {
      break label$7
     }
     $378($3_1 + (($9_1 - $0_1 | 0) << 2 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     break label$1;
    }
    label$8 : {
     if (!(HEAPU8[($227($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0)) {
      break label$8
     }
     if (($10_1 | 0) != (HEAP8[($227($7_1 | 0, $11_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$8
     }
     $10_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $10_1 + 4 | 0;
     HEAP32[$10_1 >> 2] = $12_1;
     $11_1 = $11_1 + ($11_1 >>> 0 < (($89($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $10_1 = 0;
    }
    $13_1 = $377($8_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $14_1 + 4 | 0;
    HEAP32[$14_1 >> 2] = $13_1;
    $6_1 = $6_1 + 1 | 0;
    $10_1 = $10_1 + 1 | 0;
    continue label$6;
   };
  }
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + (($1_1 - $0_1 | 0) << 2 | 0) | 0;
  $1371($7_1 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $376($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $9_1 = 0, $8_1 = 0, $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    $7_1 = 0;
    break label$1;
   }
   $8_1 = $12($4_1 | 0) | 0;
   $7_1 = 0;
   label$3 : {
    $9_1 = $2_1 - $1_1 | 0;
    if (($9_1 | 0) < (1 | 0)) {
     break label$3
    }
    $9_1 = $9_1 >> 2 | 0;
    if (($379($0_1 | 0, $1_1 | 0, $9_1 | 0) | 0 | 0) != ($9_1 | 0)) {
     break label$1
    }
   }
   label$4 : {
    $7_1 = ($3_1 - $1_1 | 0) >> 2 | 0;
    $1_1 = ($8_1 | 0) > ($7_1 | 0) ? $8_1 - $7_1 | 0 : 0;
    if (($1_1 | 0) < (1 | 0)) {
     break label$4
    }
    $7_1 = $380($6_1 | 0, $1_1 | 0, $5_1 | 0) | 0;
    $8_1 = $379($0_1 | 0, $381($7_1 | 0) | 0 | 0, $1_1 | 0) | 0;
    $1385($7_1 | 0) | 0;
    $7_1 = 0;
    if (($8_1 | 0) != ($1_1 | 0)) {
     break label$1
    }
   }
   label$5 : {
    $1_1 = $3_1 - $2_1 | 0;
    if (($1_1 | 0) < (1 | 0)) {
     break label$5
    }
    $7_1 = 0;
    $1_1 = $1_1 >> 2 | 0;
    if (($379($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0) != ($1_1 | 0)) {
     break label$1
    }
   }
   $16($4_1 | 0, 0 | 0) | 0;
   $7_1 = $0_1;
  }
  global$0 = $6_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $377($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $378($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $396($0_1 | 0, $1_1 | 0);
 }
 
 function $379($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $380($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $199($0_1 | 0, $3_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $1393($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $381($0_1) {
  $0_1 = $0_1 | 0;
  return $1127($368($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $382($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 37;
  HEAP32[($6_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $337($6_1 + 24 | 0 | 1 | 0 | 0, 1376 | 0, 1 | 0, $7($2_1 | 0) | 0 | 0);
  $7_1 = $7($2_1 | 0) | 0;
  $8_1 = $6_1 + -32 | 0;
  global$0 = $8_1;
  $10_1 = $260() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = ($7_1 >>> 9 | 0) & 1 | 0;
  $10_1 = $8_1 + ($338($8_1 | 0, $7_1 + 23 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $11_1 = $339($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
  $7_1 = $8_1 - ((($7_1 << 3 | 0) + 187 | 0) & 240 | 0) | 0;
  global$0 = $7_1;
  $42($6_1 + 8 | 0 | 0, $2_1 | 0);
  $375($8_1 | 0, $11_1 | 0, $10_1 | 0, $7_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $203($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $376($1_1 | 0, $7_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $383($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $8_1 = 0, $11_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  $12_1 = 0;
  HEAP16[($6_1 + 28 | 0) >> 1] = HEAPU8[($12_1 + 7045 | 0) >> 0] | 0 | ((HEAPU8[($12_1 + 7046 | 0) >> 0] | 0) << 8 | 0) | 0;
  $11_1 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = HEAPU8[($11_1 + 7041 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 7042 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 7043 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 7044 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $337($6_1 + 24 | 0 | 1 | 0 | 0, 1383 | 0, 0 | 0, $7($2_1 | 0) | 0 | 0);
  $7_1 = $7($2_1 | 0) | 0;
  $8_1 = $6_1 + -16 | 0;
  global$0 = $8_1;
  $10_1 = $260() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $7_1 = $8_1 + ($338($8_1 | 0, ($7_1 >>> 9 | 0) & 1 | 0 | 12 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $10_1 = $339($8_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
  $4_1 = $8_1 + -96 | 0;
  global$0 = $4_1;
  $42($6_1 + 8 | 0 | 0, $2_1 | 0);
  $375($8_1 | 0, $10_1 | 0, $7_1 | 0, $4_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $203($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $376($1_1 | 0, $4_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $384($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 37;
  HEAP32[($6_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $337($6_1 + 24 | 0 | 1 | 0 | 0, 1376 | 0, 0 | 0, $7($2_1 | 0) | 0 | 0);
  $7_1 = $7($2_1 | 0) | 0;
  $8_1 = $6_1 + -32 | 0;
  global$0 = $8_1;
  $10_1 = $260() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = ($7_1 >>> 9 | 0) & 1 | 0;
  $10_1 = $8_1 + ($338($8_1 | 0, $7_1 + 23 | 0 | 0, $10_1 | 0, $6_1 + 24 | 0 | 0, $6_1 | 0) | 0) | 0;
  $11_1 = $339($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
  $7_1 = $8_1 - ((($7_1 << 3 | 0) + 187 | 0) & 240 | 0) | 0;
  global$0 = $7_1;
  $42($6_1 + 8 | 0 | 0, $2_1 | 0);
  $375($8_1 | 0, $11_1 | 0, $10_1 | 0, $7_1 | 0, $6_1 + 20 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0);
  $203($6_1 + 8 | 0 | 0) | 0;
  $2_1 = $376($1_1 | 0, $7_1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $385($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  var $5_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 384 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 376 | 0) >> 2] = 37;
  HEAP32[($5_1 + 380 | 0) >> 2] = 0;
  $6_1 = $347($5_1 + 376 | 0 | 1 | 0 | 0, 1661 | 0, $7($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($5_1 + 332 | 0) >> 2] = $5_1 + 336 | 0;
  $7_1 = $260() | 0;
  label$1 : {
   label$2 : {
    if (!$6_1) {
     break label$2
    }
    $8_1 = $348($2_1 | 0) | 0;
    HEAPF64[($5_1 + 40 | 0) >> 3] = $4_1;
    HEAP32[($5_1 + 32 | 0) >> 2] = $8_1;
    $7_1 = $338($5_1 + 336 | 0 | 0, 30 | 0, $7_1 | 0, $5_1 + 376 | 0 | 0, $5_1 + 32 | 0 | 0) | 0;
    break label$1;
   }
   HEAPF64[($5_1 + 48 | 0) >> 3] = $4_1;
   $7_1 = $338($5_1 + 336 | 0 | 0, 30 | 0, $7_1 | 0, $5_1 + 376 | 0 | 0, $5_1 + 48 | 0 | 0) | 0;
  }
  HEAP32[($5_1 + 80 | 0) >> 2] = 10;
  $9_1 = $349($5_1 + 320 | 0 | 0, 0 | 0, $5_1 + 80 | 0 | 0) | 0;
  $10_1 = $5_1 + 336 | 0;
  $8_1 = $10_1;
  label$3 : {
   label$4 : {
    if (($7_1 | 0) < (30 | 0)) {
     break label$4
    }
    $7_1 = $260() | 0;
    label$5 : {
     label$6 : {
      if (!$6_1) {
       break label$6
      }
      $8_1 = $348($2_1 | 0) | 0;
      HEAPF64[($5_1 + 8 | 0) >> 3] = $4_1;
      HEAP32[$5_1 >> 2] = $8_1;
      $7_1 = $350($5_1 + 332 | 0 | 0, $7_1 | 0, $5_1 + 376 | 0 | 0, $5_1 | 0) | 0;
      break label$5;
     }
     HEAPF64[($5_1 + 16 | 0) >> 3] = $4_1;
     $7_1 = $350($5_1 + 332 | 0 | 0, $7_1 | 0, $5_1 + 376 | 0 | 0, $5_1 + 16 | 0 | 0) | 0;
    }
    if (($7_1 | 0) == (-1 | 0)) {
     break label$3
    }
    $351($9_1 | 0, HEAP32[($5_1 + 332 | 0) >> 2] | 0 | 0);
    $8_1 = HEAP32[($5_1 + 332 | 0) >> 2] | 0;
   }
   $6_1 = $8_1 + $7_1 | 0;
   $11_1 = $339($8_1 | 0, $6_1 | 0, $2_1 | 0) | 0;
   HEAP32[($5_1 + 80 | 0) >> 2] = 10;
   $8_1 = $386($5_1 + 72 | 0 | 0, 0 | 0, $5_1 + 80 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($5_1 + 332 | 0) >> 2] | 0 | 0) != ($5_1 + 336 | 0 | 0)) {
      break label$8
     }
     $7_1 = $5_1 + 80 | 0;
     break label$7;
    }
    $7_1 = $1448($7_1 << 3 | 0 | 0) | 0;
    if (!$7_1) {
     break label$3
    }
    $387($8_1 | 0, $7_1 | 0);
    $10_1 = HEAP32[($5_1 + 332 | 0) >> 2] | 0;
   }
   $42($5_1 + 56 | 0 | 0, $2_1 | 0);
   $388($10_1 | 0, $11_1 | 0, $6_1 | 0, $7_1 | 0, $5_1 + 68 | 0 | 0, $5_1 + 64 | 0 | 0, $5_1 + 56 | 0 | 0);
   $203($5_1 + 56 | 0 | 0) | 0;
   $2_1 = $376($1_1 | 0, $7_1 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 64 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $389($8_1 | 0) | 0;
   $353($9_1 | 0) | 0;
   global$0 = $5_1 + 384 | 0;
   return $2_1 | 0;
  }
  $1301();
  abort();
 }
 
 function $386($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $390($0_1 | 0, $3_1 + 12 | 0 | 0, $50($2_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $387($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($391($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($391($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($392($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $388($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $11_1 = 0, $10_1 = 0, $12_1 = 0, $7_1 = 0, $14_1 = 0, $8_1 = 0, $9_1 = 0, $16_1 = 0, $13_1 = 0, $15_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $271($6_1 | 0) | 0;
  $9_1 = $272($6_1 | 0) | 0;
  $321($7_1 | 0, $9_1 | 0);
  HEAP32[$5_1 >> 2] = $3_1;
  $10_1 = $0_1;
  label$1 : {
   label$2 : {
    $6_1 = HEAPU8[$10_1 >> 0] | 0;
    switch ($6_1 + -43 | 0 | 0) {
    case 0:
    case 2:
     break label$2;
    default:
     break label$1;
    };
   }
   $6_1 = $377($8_1 | 0, ($6_1 << 24 | 0) >> 24 | 0 | 0) | 0;
   $11_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
   HEAP32[$11_1 >> 2] = $6_1;
   $10_1 = $0_1 + 1 | 0;
  }
  $6_1 = $10_1;
  label$3 : {
   label$4 : {
    if (($2_1 - $6_1 | 0 | 0) <= (1 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (48 | 0)) {
     break label$4
    }
    $6_1 = $10_1;
    if ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break label$4
    }
    $6_1 = $377($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $6_1;
    $6_1 = $377($8_1 | 0, HEAP8[($10_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $6_1;
    $10_1 = $10_1 + 2 | 0;
    $6_1 = $10_1;
    label$5 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if (!($153(HEAP8[$6_1 >> 0] | 0 | 0, $260() | 0 | 0) | 0)) {
      break label$3
     }
     $6_1 = $6_1 + 1 | 0;
     continue label$5;
    };
   }
   label$6 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$3
    }
    if (!($64(HEAP8[$6_1 >> 0] | 0 | 0, $260() | 0 | 0) | 0)) {
     break label$3
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$6;
   };
  }
  label$7 : {
   label$8 : {
    if (!($88($7_1 | 0) | 0)) {
     break label$8
    }
    $309($8_1 | 0, $10_1 | 0, $6_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + (($6_1 - $10_1 | 0) << 2 | 0) | 0;
    break label$7;
   }
   $341($10_1 | 0, $6_1 | 0);
   $12_1 = 0;
   $13_1 = $320($9_1 | 0) | 0;
   $14_1 = 0;
   $11_1 = $10_1;
   label$9 : while (1) {
    label$10 : {
     if ($11_1 >>> 0 < $6_1 >>> 0) {
      break label$10
     }
     $378($3_1 + (($10_1 - $0_1 | 0) << 2 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     break label$7;
    }
    label$11 : {
     if ((HEAP8[($227($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break label$11
     }
     if (($12_1 | 0) != (HEAP8[($227($7_1 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0)) {
      break label$11
     }
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 4 | 0;
     HEAP32[$12_1 >> 2] = $13_1;
     $14_1 = $14_1 + ($14_1 >>> 0 < (($89($7_1 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $12_1 = 0;
    }
    $15_1 = $377($8_1 | 0, HEAP8[$11_1 >> 0] | 0 | 0) | 0;
    $16_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $16_1 + 4 | 0;
    HEAP32[$16_1 >> 2] = $15_1;
    $11_1 = $11_1 + 1 | 0;
    $12_1 = $12_1 + 1 | 0;
    continue label$9;
   };
  }
  label$12 : {
   label$13 : {
    label$14 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$13
     }
     label$15 : {
      $11_1 = HEAPU8[$6_1 >> 0] | 0;
      if (($11_1 | 0) == (46 | 0)) {
       break label$15
      }
      $11_1 = $377($8_1 | 0, ($11_1 << 24 | 0) >> 24 | 0 | 0) | 0;
      $12_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $12_1 + 4 | 0;
      HEAP32[$12_1 >> 2] = $11_1;
      $6_1 = $6_1 + 1 | 0;
      continue label$14;
     }
     break label$14;
    };
    $12_1 = $319($9_1 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    $11_1 = $14_1 + 4 | 0;
    HEAP32[$5_1 >> 2] = $11_1;
    HEAP32[$14_1 >> 2] = $12_1;
    $6_1 = $6_1 + 1 | 0;
    break label$12;
   }
   $11_1 = HEAP32[$5_1 >> 2] | 0;
  }
  $309($8_1 | 0, $6_1 | 0, $2_1 | 0, $11_1 | 0) | 0;
  $6_1 = (HEAP32[$5_1 >> 2] | 0) + (($2_1 - $6_1 | 0) << 2 | 0) | 0;
  HEAP32[$5_1 >> 2] = $6_1;
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + (($1_1 - $0_1 | 0) << 2 | 0) | 0;
  $1371($7_1 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $389($0_1) {
  $0_1 = $0_1 | 0;
  $387($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $390($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1171($0_1 | 0, $1170($1_1 | 0) | 0 | 0) | 0;
  $55($0_1 + 4 | 0 | 0, $54($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $391($0_1) {
  $0_1 = $0_1 | 0;
  return $1172($0_1 | 0) | 0 | 0;
 }
 
 function $392($0_1) {
  $0_1 = $0_1 | 0;
  return $56($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $393($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var $6_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $7_1 = 0, $11_1 = 0, $10_1 = 0, $12_1 = 0;
  $6_1 = global$0 - 432 | 0;
  global$0 = $6_1;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 424 | 0) >> 2] = 37;
  HEAP32[($6_1 + 428 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = $347($6_1 + 424 | 0 | 1 | 0 | 0, 1577 | 0, $7($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($6_1 + 380 | 0) >> 2] = $6_1 + 384 | 0;
  $8_1 = $260() | 0;
  label$1 : {
   label$2 : {
    if (!$7_1) {
     break label$2
    }
    $9_1 = $348($2_1 | 0) | 0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $6_1 + 64 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $5_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $6_1;
    HEAP32[($6_1 + 56 | 0) >> 2] = $4_1;
    HEAP32[($6_1 + 60 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($6_1 + 48 | 0) >> 2] = $9_1;
    $8_1 = $338($6_1 + 384 | 0 | 0, 30 | 0, $8_1 | 0, $6_1 + 424 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
    break label$1;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 80 | 0) >> 2] = $4_1;
   HEAP32[($6_1 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 88 | 0) >> 2] = $5_1;
   HEAP32[($6_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   $8_1 = $338($6_1 + 384 | 0 | 0, 30 | 0, $8_1 | 0, $6_1 + 424 | 0 | 0, $6_1 + 80 | 0 | 0) | 0;
  }
  HEAP32[($6_1 + 128 | 0) >> 2] = 10;
  $10_1 = $349($6_1 + 368 | 0 | 0, 0 | 0, $6_1 + 128 | 0 | 0) | 0;
  $11_1 = $6_1 + 384 | 0;
  $9_1 = $11_1;
  label$3 : {
   label$4 : {
    if (($8_1 | 0) < (30 | 0)) {
     break label$4
    }
    $8_1 = $260() | 0;
    label$5 : {
     label$6 : {
      if (!$7_1) {
       break label$6
      }
      $9_1 = $348($2_1 | 0) | 0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $6_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $6_1;
      HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
      HEAP32[($6_1 + 12 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[$6_1 >> 2] = $9_1;
      $8_1 = $350($6_1 + 380 | 0 | 0, $8_1 | 0, $6_1 + 424 | 0 | 0, $6_1 | 0) | 0;
      break label$5;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[($6_1 + 32 | 0) >> 2] = $4_1;
     HEAP32[($6_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[($6_1 + 40 | 0) >> 2] = $5_1;
     HEAP32[($6_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     $8_1 = $350($6_1 + 380 | 0 | 0, $8_1 | 0, $6_1 + 424 | 0 | 0, $6_1 + 32 | 0 | 0) | 0;
    }
    if (($8_1 | 0) == (-1 | 0)) {
     break label$3
    }
    $351($10_1 | 0, HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0);
    $9_1 = HEAP32[($6_1 + 380 | 0) >> 2] | 0;
   }
   $7_1 = $9_1 + $8_1 | 0;
   $12_1 = $339($9_1 | 0, $7_1 | 0, $2_1 | 0) | 0;
   HEAP32[($6_1 + 128 | 0) >> 2] = 10;
   $9_1 = $386($6_1 + 120 | 0 | 0, 0 | 0, $6_1 + 128 | 0 | 0) | 0;
   label$7 : {
    label$8 : {
     if ((HEAP32[($6_1 + 380 | 0) >> 2] | 0 | 0) != ($6_1 + 384 | 0 | 0)) {
      break label$8
     }
     $8_1 = $6_1 + 128 | 0;
     break label$7;
    }
    $8_1 = $1448($8_1 << 3 | 0 | 0) | 0;
    if (!$8_1) {
     break label$3
    }
    $387($9_1 | 0, $8_1 | 0);
    $11_1 = HEAP32[($6_1 + 380 | 0) >> 2] | 0;
   }
   $42($6_1 + 104 | 0 | 0, $2_1 | 0);
   $388($11_1 | 0, $12_1 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 116 | 0 | 0, $6_1 + 112 | 0 | 0, $6_1 + 104 | 0 | 0);
   $203($6_1 + 104 | 0 | 0) | 0;
   $2_1 = $376($1_1 | 0, $8_1 | 0, HEAP32[($6_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 112 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $389($9_1 | 0) | 0;
   $353($10_1 | 0) | 0;
   global$0 = $6_1 + 432 | 0;
   return $2_1 | 0;
  }
  $1301();
  abort();
 }
 
 function $394($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $9_1 = 0, $6_1 = 0, $10_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  $10_1 = 0;
  HEAP16[($5_1 + 204 | 0) >> 1] = HEAPU8[($10_1 + 7051 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 7052 | 0) >> 0] | 0) << 8 | 0) | 0;
  $9_1 = 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAPU8[($9_1 + 7047 | 0) >> 0] | 0 | ((HEAPU8[($9_1 + 7048 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($9_1 + 7049 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($9_1 + 7050 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $6_1 = $260() | 0;
  HEAP32[$5_1 >> 2] = $4_1;
  $7_1 = $338($5_1 + 176 | 0 | 0, 20 | 0, $6_1 | 0, $5_1 + 200 | 0 | 0, $5_1 | 0) | 0;
  $4_1 = ($5_1 + 176 | 0) + $7_1 | 0;
  $6_1 = $339($5_1 + 176 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
  $42($5_1 + 16 | 0 | 0, $2_1 | 0);
  $8_1 = $271($5_1 + 16 | 0 | 0) | 0;
  $203($5_1 + 16 | 0 | 0) | 0;
  $309($8_1 | 0, $5_1 + 176 | 0 | 0, $4_1 | 0, $5_1 + 16 | 0 | 0) | 0;
  $7_1 = ($5_1 + 16 | 0) + ($7_1 << 2 | 0) | 0;
  $2_1 = $376($1_1 | 0, $5_1 + 16 | 0 | 0, (($6_1 | 0) == ($4_1 | 0) ? $7_1 : ($5_1 + 16 | 0) + (($6_1 - ($5_1 + 176 | 0) | 0) << 2 | 0) | 0) | 0, $7_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $5_1 + 208 | 0;
  return $2_1 | 0;
 }
 
 function $395($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $1173($0_1 | 0, $1_1 | 0);
    $0_1 = $0_1 + 1 | 0;
    continue label$2;
   };
  }
 }
 
 function $396($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -4 | 0;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $1174($0_1 | 0, $1_1 | 0);
    $0_1 = $0_1 + 4 | 0;
    continue label$2;
   };
  }
 }
 
 function $397($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  $42($8_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $37($8_1 + 8 | 0 | 0) | 0;
  $203($8_1 + 8 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($6_1 | 0) == ($7_1 | 0)) {
     break label$1
    }
    if ($2_1) {
     break label$1
    }
    label$3 : {
     if ($213($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if (($398($1_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
        break label$5
       }
       $2_1 = $6_1 + 1 | 0;
       if (($2_1 | 0) == ($7_1 | 0)) {
        break label$3
       }
       $9_1 = 0;
       label$6 : {
        label$7 : {
         $10_1 = $398($1_1 | 0, HEAP8[$2_1 >> 0] | 0 | 0, 0 | 0) | 0;
         if (($10_1 | 0) == (69 | 0)) {
          break label$7
         }
         if (($10_1 & 255 | 0 | 0) == (48 | 0)) {
          break label$7
         }
         $11_1 = $10_1;
         $2_1 = $6_1;
         break label$6;
        }
        $6_1 = $6_1 + 2 | 0;
        if (($6_1 | 0) == ($7_1 | 0)) {
         break label$3
        }
        $11_1 = $398($1_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0, 0 | 0) | 0;
        $9_1 = $10_1;
       }
       HEAP32[($8_1 + 24 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, HEAP32[($8_1 + 24 | 0) >> 2] | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0, $3_1, $4_1, $5_1, $11_1, $9_1) | 0;
       $6_1 = $2_1 + 2 | 0;
       break label$4;
      }
      label$8 : {
       if (!($399($1_1 | 0, 8192 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0)) {
        break label$8
       }
       label$9 : {
        label$10 : while (1) {
         label$11 : {
          $6_1 = $6_1 + 1 | 0;
          if (($6_1 | 0) != ($7_1 | 0)) {
           break label$11
          }
          $6_1 = $7_1;
          break label$9;
         }
         if ($399($1_1 | 0, 8192 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0) {
          continue label$10
         }
         break label$10;
        };
       }
       label$12 : while (1) {
        if (!($212($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0)) {
         break label$4
        }
        if (!($399($1_1 | 0, 8192 | 0, $214($8_1 + 24 | 0 | 0) | 0 | 0) | 0)) {
         break label$4
        }
        $216($8_1 + 24 | 0 | 0) | 0;
        continue label$12;
       };
      }
      label$13 : {
       if (($215($1_1 | 0, $214($8_1 + 24 | 0 | 0) | 0 | 0) | 0 | 0) != ($215($1_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0 | 0)) {
        break label$13
       }
       $6_1 = $6_1 + 1 | 0;
       $216($8_1 + 24 | 0 | 0) | 0;
       break label$4;
      }
      HEAP32[$4_1 >> 2] = 4;
     }
     $2_1 = HEAP32[$4_1 >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
   HEAP32[$4_1 >> 2] = 4;
  }
  label$14 : {
   if (!($213($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0)) {
    break label$14
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $6_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
  global$0 = $8_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $398($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $399($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 0;
  label$1 : {
   if (($2_1 | 0) < (0 | 0)) {
    break label$1
   }
   $3_1 = ((HEAPU16[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + (($2_1 & 255 | 0) << 1 | 0) | 0) >> 1] | 0) & $1_1 | 0 | 0) != (0 | 0);
  }
  return $3_1 | 0;
 }
 
 function $400($0_1) {
  $0_1 = $0_1 | 0;
  return 2 | 0;
 }
 
 function $401($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 624576549;
  HEAP32[($6_1 + 12 | 0) >> 2] = 1394948685;
  $0_1 = $397($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 8 | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $402($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
  return $397($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $15($6_1 | 0) | 0 | 0, ($15($6_1 | 0) | 0) + ($89($6_1 | 0) | 0) | 0 | 0) | 0 | 0;
 }
 
 function $403($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $42($6_1 | 0, $3_1 | 0);
  $3_1 = $37($6_1 | 0) | 0;
  $203($6_1 | 0) | 0;
  $404($0_1 | 0, $5_1 + 24 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $404($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($207($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 168 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (167 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (7 | 0) | 0;
  }
 }
 
 function $405($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $42($6_1 | 0, $3_1 | 0);
  $3_1 = $37($6_1 | 0) | 0;
  $203($6_1 | 0) | 0;
  $406($0_1 | 0, $5_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $406($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($207($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 288 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (287 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (12 | 0) | 0;
  }
 }
 
 function $407($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $42($6_1 | 0, $3_1 | 0);
  $3_1 = $37($6_1 | 0) | 0;
  $203($6_1 | 0) | 0;
  $408($0_1 | 0, $5_1 + 20 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $408($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $409($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($2_1 | 0) < (69 | 0) ? $2_1 + 2e3 | 0 : ($2_1 | 0) < (100 | 0) ? $2_1 + 1900 | 0 : $2_1) + -1900 | 0;
  }
 }
 
 function $409($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  $1_1 = 0;
  $6_1 = 6;
  label$1 : {
   label$2 : {
    if ($213($0_1 | 0, $5_1 + 8 | 0 | 0) | 0) {
     break label$2
    }
    $6_1 = 4;
    $7_1 = $214($0_1 | 0) | 0;
    if (!($399($3_1 | 0, 2048 | 0, $7_1 | 0) | 0)) {
     break label$2
    }
    $1_1 = $398($3_1 | 0, $7_1 | 0, 0 | 0) | 0;
    label$3 : {
     label$4 : while (1) {
      $216($0_1 | 0) | 0;
      $1_1 = $1_1 + -48 | 0;
      if (!($212($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
       break label$3
      }
      if (($4_1 | 0) < (2 | 0)) {
       break label$3
      }
      $6_1 = $214($0_1 | 0) | 0;
      if (!($399($3_1 | 0, 2048 | 0, $6_1 | 0) | 0)) {
       break label$1
      }
      $4_1 = $4_1 + -1 | 0;
      $1_1 = Math_imul($1_1, 10) + ($398($3_1 | 0, $6_1 | 0, 0 | 0) | 0) | 0;
      continue label$4;
     };
    }
    $6_1 = 2;
    if (!($213($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | $6_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $410($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $13_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $155_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  $42($8_1 + 8 | 0 | 0, $3_1 | 0);
  $9_1 = $37($8_1 + 8 | 0 | 0) | 0;
  $203($8_1 + 8 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      switch ($6_1 + -65 | 0 | 0) {
      case 0:
      case 32:
       $404($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 1:
      case 33:
      case 39:
       $406($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 34:
       $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $397($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $15($6_1 | 0) | 0 | 0, ($15($6_1 | 0) | 0) + ($89($6_1 | 0) | 0) | 0 | 0) | 0;
       break label$2;
      case 35:
      case 36:
       $411($0_1 | 0, $5_1 + 12 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 3:
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$0 = 2032480100;
       HEAP32[($8_1 + 8 | 0) >> 2] = 623865125;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $397($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 16 | 0 | 0) | 0;
       break label$2;
      case 5:
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$0 = 1680158061;
       HEAP32[($8_1 + 8 | 0) >> 2] = 623728933;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $397($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 16 | 0 | 0) | 0;
       break label$2;
      case 7:
       $412($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 8:
       $413($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 41:
       $414($0_1 | 0, $5_1 + 28 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 44:
       $415($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 12:
       $416($0_1 | 0, $5_1 + 4 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 45:
      case 51:
       $417($0_1 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 47:
       $418($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 49:
       $14_1 = 0;
       $15_1 = HEAPU8[($14_1 + 7060 | 0) >> 0] | 0 | ((HEAPU8[($14_1 + 7061 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($14_1 + 7062 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($14_1 + 7063 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       HEAP8[($8_1 + 15 | 0) >> 0] = $15_1;
       HEAP8[($8_1 + 16 | 0) >> 0] = $15_1 >>> 8 | 0;
       HEAP8[($8_1 + 17 | 0) >> 0] = $15_1 >>> 16 | 0;
       HEAP8[($8_1 + 18 | 0) >> 0] = $15_1 >>> 24 | 0;
       $13_1 = 0;
       i64toi32_i32$0 = HEAPU8[($13_1 + 7053 | 0) >> 0] | 0 | ((HEAPU8[($13_1 + 7054 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13_1 + 7055 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13_1 + 7056 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       i64toi32_i32$1 = HEAPU8[($13_1 + 7057 | 0) >> 0] | 0 | ((HEAPU8[($13_1 + 7058 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13_1 + 7059 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13_1 + 7060 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       $155_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $155_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($8_1 + 24 | 0) >> 2] = $397($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 19 | 0 | 0) | 0;
       break label$2;
      case 17:
       HEAP8[($8_1 + 12 | 0) >> 0] = HEAPU8[(0 + 7068 | 0) >> 0] | 0;
       $16_1 = 0;
       HEAP32[($8_1 + 8 | 0) >> 2] = HEAPU8[($16_1 + 7064 | 0) >> 0] | 0 | ((HEAPU8[($16_1 + 7065 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($16_1 + 7066 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($16_1 + 7067 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $397($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 13 | 0 | 0) | 0;
       break label$2;
      case 18:
       $419($0_1 | 0, $5_1 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 19:
       i64toi32_i32$0 = $8_1;
       i64toi32_i32$1 = 1394948685;
       HEAP32[($8_1 + 8 | 0) >> 2] = 624576549;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($8_1 + 24 | 0) >> 2] = $397($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 + 8 | 0 | 0, $8_1 + 16 | 0 | 0) | 0;
       break label$2;
      case 54:
       $420($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 55:
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) | 0;
       break label$1;
      case 23:
       $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 24 | 0) >> 2] = $397($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $15($6_1 | 0) | 0 | 0, ($15($6_1 | 0) | 0) + ($89($6_1 | 0) | 0) | 0 | 0) | 0;
       break label$2;
      case 56:
       $408($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 24:
       $421($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      default:
       if (($6_1 | 0) == (37 | 0)) {
        break label$3
       }
       break;
      case 2:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 37:
      case 38:
      case 40:
      case 42:
      case 43:
      case 46:
      case 48:
      case 50:
      case 52:
      case 53:
       break label$4;
      };
     }
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
     break label$2;
    }
    $422($0_1 | 0, $8_1 + 24 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
   }
   $4_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
  }
  global$0 = $8_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $411($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $409($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   if (($2_1 | 0) > (31 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $412($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $409($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (23 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $413($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $409($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   if (($2_1 | 0) > (12 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $414($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $409($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 3 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (365 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $415($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $409($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (12 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1 | 0;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $416($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $409($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (59 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $417($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if (!($212($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
    if (!($399($4_1 | 0, 8192 | 0, $214($1_1 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $216($1_1 | 0) | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (!($213($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $418($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   if (($89($0_1 | 0) | 0 | 0) != (0 - ($89($0_1 + 12 | 0 | 0) | 0) | 0 | 0)) {
    break label$1
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
   return;
  }
  $2_1 = $207($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 24 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  label$2 : {
   $0_1 = $2_1 - $0_1 | 0;
   if ($0_1) {
    break label$2
   }
   if (($4_1 | 0) != (12 | 0)) {
    break label$2
   }
   HEAP32[$1_1 >> 2] = 0;
   return;
  }
  label$3 : {
   if (($0_1 | 0) != (12 | 0)) {
    break label$3
   }
   if (($4_1 | 0) > (11 | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $4_1 + 12 | 0;
  }
 }
 
 function $419($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $409($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (60 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $420($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $409($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 1 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (6 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $421($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $409($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1900 | 0;
  }
 }
 
 function $422($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $2_1 = 6;
  label$1 : {
   label$2 : {
    if ($213($1_1 | 0, $5_1 + 8 | 0 | 0) | 0) {
     break label$2
    }
    $2_1 = 4;
    if (($398($4_1 | 0, $214($1_1 | 0) | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
     break label$2
    }
    $2_1 = 2;
    if (!($213($216($1_1 | 0) | 0 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | $2_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $423($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  $42($8_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $271($8_1 + 8 | 0 | 0) | 0;
  $203($8_1 + 8 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($6_1 | 0) == ($7_1 | 0)) {
     break label$1
    }
    if ($2_1) {
     break label$1
    }
    label$3 : {
     if ($278($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if (($424($1_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
        break label$5
       }
       $2_1 = $6_1 + 4 | 0;
       if (($2_1 | 0) == ($7_1 | 0)) {
        break label$3
       }
       $9_1 = 0;
       label$6 : {
        label$7 : {
         $10_1 = $424($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, 0 | 0) | 0;
         if (($10_1 | 0) == (69 | 0)) {
          break label$7
         }
         if (($10_1 & 255 | 0 | 0) == (48 | 0)) {
          break label$7
         }
         $11_1 = $10_1;
         $2_1 = $6_1;
         break label$6;
        }
        $6_1 = $6_1 + 8 | 0;
        if (($6_1 | 0) == ($7_1 | 0)) {
         break label$3
        }
        $11_1 = $424($1_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0;
        $9_1 = $10_1;
       }
       HEAP32[($8_1 + 24 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, HEAP32[($8_1 + 24 | 0) >> 2] | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0, $3_1, $4_1, $5_1, $11_1, $9_1) | 0;
       $6_1 = $2_1 + 8 | 0;
       break label$4;
      }
      label$8 : {
       if (!($425($1_1 | 0, 8192 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0)) {
        break label$8
       }
       label$9 : {
        label$10 : while (1) {
         label$11 : {
          $6_1 = $6_1 + 4 | 0;
          if (($6_1 | 0) != ($7_1 | 0)) {
           break label$11
          }
          $6_1 = $7_1;
          break label$9;
         }
         if ($425($1_1 | 0, 8192 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0) {
          continue label$10
         }
         break label$10;
        };
       }
       label$12 : while (1) {
        if (!($277($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0)) {
         break label$4
        }
        if (!($425($1_1 | 0, 8192 | 0, $279($8_1 + 24 | 0 | 0) | 0 | 0) | 0)) {
         break label$4
        }
        $281($8_1 + 24 | 0 | 0) | 0;
        continue label$12;
       };
      }
      label$13 : {
       if (($280($1_1 | 0, $279($8_1 + 24 | 0 | 0) | 0 | 0) | 0 | 0) != ($280($1_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0 | 0)) {
        break label$13
       }
       $6_1 = $6_1 + 4 | 0;
       $281($8_1 + 24 | 0 | 0) | 0;
       break label$4;
      }
      HEAP32[$4_1 >> 2] = 4;
     }
     $2_1 = HEAP32[$4_1 >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
   HEAP32[$4_1 >> 2] = 4;
  }
  label$14 : {
   if (!($278($8_1 + 24 | 0 | 0, $8_1 + 16 | 0 | 0) | 0)) {
    break label$14
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $6_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
  global$0 = $8_1 + 32 | 0;
  return $6_1 | 0;
 }
 
 function $424($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $425($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $426($0_1) {
  $0_1 = $0_1 | 0;
  return 2 | 0;
 }
 
 function $427($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $12_1 = 0, $15_1 = 0, $17_1 = 0, $19_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 7240 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 7244 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 7232 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 7236 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $15_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 7224 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 7228 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $17_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 7216 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 7220 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[i64toi32_i32$1 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $0_1 = $423($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$1 + 32 | 0 | 0) | 0;
  global$0 = i64toi32_i32$1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $428($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
  return $423($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $429($6_1 | 0) | 0 | 0, ($429($6_1 | 0) | 0) + (($282($6_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $429($0_1) {
  $0_1 = $0_1 | 0;
  return $431($430($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $430($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($432($0_1 | 0) | 0)) {
    break label$1
   }
   return $520($0_1 | 0) | 0 | 0;
  }
  return $1175($0_1 | 0) | 0 | 0;
 }
 
 function $431($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $432($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[(($518($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) >>> 7 | 0 | 0;
 }
 
 function $433($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[(($518($0_1 | 0) | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $434($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[(($518($0_1 | 0) | 0) + 11 | 0) >> 0] | 0 | 0;
 }
 
 function $435($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $42($6_1 | 0, $3_1 | 0);
  $3_1 = $271($6_1 | 0) | 0;
  $203($6_1 | 0) | 0;
  $436($0_1 | 0, $5_1 + 24 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $436($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($275($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 168 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (167 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (7 | 0) | 0;
  }
 }
 
 function $437($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $42($6_1 | 0, $3_1 | 0);
  $3_1 = $271($6_1 | 0) | 0;
  $203($6_1 | 0) | 0;
  $438($0_1 | 0, $5_1 + 16 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $438($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($275($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 288 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (287 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (12 | 0) | 0;
  }
 }
 
 function $439($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  $42($6_1 | 0, $3_1 | 0);
  $3_1 = $271($6_1 | 0) | 0;
  $203($6_1 | 0) | 0;
  $440($0_1 | 0, $5_1 + 20 | 0 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $4_1 | 0, $3_1 | 0);
  $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $440($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $441($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = (($2_1 | 0) < (69 | 0) ? $2_1 + 2e3 | 0 : ($2_1 | 0) < (100 | 0) ? $2_1 + 1900 | 0 : $2_1) + -1900 | 0;
  }
 }
 
 function $441($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  $1_1 = 0;
  $6_1 = 6;
  label$1 : {
   label$2 : {
    if ($278($0_1 | 0, $5_1 + 8 | 0 | 0) | 0) {
     break label$2
    }
    $6_1 = 4;
    $7_1 = $279($0_1 | 0) | 0;
    if (!($425($3_1 | 0, 2048 | 0, $7_1 | 0) | 0)) {
     break label$2
    }
    $1_1 = $424($3_1 | 0, $7_1 | 0, 0 | 0) | 0;
    label$3 : {
     label$4 : while (1) {
      $281($0_1 | 0) | 0;
      $1_1 = $1_1 + -48 | 0;
      if (!($277($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
       break label$3
      }
      if (($4_1 | 0) < (2 | 0)) {
       break label$3
      }
      $6_1 = $279($0_1 | 0) | 0;
      if (!($425($3_1 | 0, 2048 | 0, $6_1 | 0) | 0)) {
       break label$1
      }
      $4_1 = $4_1 + -1 | 0;
      $1_1 = Math_imul($1_1, 10) + ($424($3_1 | 0, $6_1 | 0, 0 | 0) | 0) | 0;
      continue label$4;
     };
    }
    $6_1 = 2;
    if (!($278($0_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | $6_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $442($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $72_1 = 0, $75_1 = 0, $77_1 = 0, $79_1 = 0, $93_1 = 0, $96_1 = 0, $98_1 = 0, $100_1 = 0, $183_1 = 0, $185_1 = 0, $206_1 = 0, $209_1 = 0, $211_1 = 0, $213_1 = 0;
  $8_1 = global$0 - 64 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  $42($8_1 | 0, $3_1 | 0);
  $9_1 = $271($8_1 | 0) | 0;
  $203($8_1 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      switch ($6_1 + -65 | 0 | 0) {
      case 0:
      case 32:
       $436($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 1:
      case 33:
      case 39:
       $438($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 34:
       $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $423($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $429($6_1 | 0) | 0 | 0, ($429($6_1 | 0) | 0) + (($282($6_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
       break label$2;
      case 35:
      case 36:
       $443($0_1 | 0, $5_1 + 12 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 3:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 7096 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 7100 | 0) >> 2] | 0;
       $72_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $72_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 7088 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 7092 | 0) >> 2] | 0;
       $75_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $75_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 7080 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 7084 | 0) >> 2] | 0;
       $77_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $77_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 7072 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 7076 | 0) >> 2] | 0;
       $79_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $79_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $423($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break label$2;
      case 5:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 7128 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 7132 | 0) >> 2] | 0;
       $93_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $93_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 7120 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 7124 | 0) >> 2] | 0;
       $96_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $96_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 7112 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 7116 | 0) >> 2] | 0;
       $98_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $98_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 7104 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 7108 | 0) >> 2] | 0;
       $100_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $100_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $423($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break label$2;
      case 7:
       $444($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 8:
       $445($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 41:
       $446($0_1 | 0, $5_1 + 28 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 44:
       $447($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 12:
       $448($0_1 | 0, $5_1 + 4 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 45:
      case 51:
       $449($0_1 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 47:
       $450($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 49:
       $6_1 = $1458($8_1 | 0, 7136 | 0, 44 | 0) | 0;
       HEAP32[($6_1 + 56 | 0) >> 2] = $423($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0, $6_1 + 44 | 0 | 0) | 0;
       break label$2;
      case 17:
       HEAP32[($8_1 + 16 | 0) >> 2] = HEAP32[(0 + 7200 | 0) >> 2] | 0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 7192 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 7196 | 0) >> 2] | 0;
       $183_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $183_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 7184 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 7188 | 0) >> 2] | 0;
       $185_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $185_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $423($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 20 | 0 | 0) | 0;
       break label$2;
      case 18:
       $451($0_1 | 0, $5_1 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 19:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 7240 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 7244 | 0) >> 2] | 0;
       $206_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $206_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 7232 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 7236 | 0) >> 2] | 0;
       $209_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $209_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 7224 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 7228 | 0) >> 2] | 0;
       $211_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $211_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 7216 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 7220 | 0) >> 2] | 0;
       $213_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $213_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $423($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break label$2;
      case 54:
       $452($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 55:
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) | 0;
       break label$1;
      case 23:
       $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 56 | 0) >> 2] = $423($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $429($6_1 | 0) | 0 | 0, ($429($6_1 | 0) | 0) + (($282($6_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
       break label$2;
      case 56:
       $440($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      case 24:
       $453($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break label$2;
      default:
       if (($6_1 | 0) == (37 | 0)) {
        break label$3
       }
       break;
      case 2:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 37:
      case 38:
      case 40:
      case 42:
      case 43:
      case 46:
      case 48:
      case 50:
      case 52:
      case 53:
       break label$4;
      };
     }
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
     break label$2;
    }
    $454($0_1 | 0, $8_1 + 56 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
   }
   $4_1 = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
  }
  global$0 = $8_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $443($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $441($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   if (($2_1 | 0) > (31 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $444($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $441($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (23 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $445($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $441($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   if (($2_1 | 0) > (12 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $446($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $441($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 3 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (365 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $447($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $441($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (12 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1 | 0;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $448($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $441($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (59 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $449($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if (!($277($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
    if (!($425($4_1 | 0, 8192 | 0, $279($1_1 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $281($1_1 | 0) | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (!($278($1_1 | 0, $5_1 + 8 | 0 | 0) | 0)) {
    break label$3
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $450($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   if (($282($0_1 | 0) | 0 | 0) != (0 - ($282($0_1 + 12 | 0 | 0) | 0) | 0 | 0)) {
    break label$1
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
   return;
  }
  $2_1 = $275($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 24 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  label$2 : {
   $0_1 = $2_1 - $0_1 | 0;
   if ($0_1) {
    break label$2
   }
   if (($4_1 | 0) != (12 | 0)) {
    break label$2
   }
   HEAP32[$1_1 >> 2] = 0;
   return;
  }
  label$3 : {
   if (($0_1 | 0) != (12 | 0)) {
    break label$3
   }
   if (($4_1 | 0) > (11 | 0)) {
    break label$3
   }
   HEAP32[$1_1 >> 2] = $4_1 + 12 | 0;
  }
 }
 
 function $451($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $441($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (60 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $452($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $441($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 1 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   if ($3_1 & 4 | 0) {
    break label$1
   }
   if (($2_1 | 0) > (6 | 0)) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $453($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $2_1 = $441($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  label$1 : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1900 | 0;
  }
 }
 
 function $454($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  $2_1 = 6;
  label$1 : {
   label$2 : {
    if ($278($1_1 | 0, $5_1 + 8 | 0 | 0) | 0) {
     break label$2
    }
    $2_1 = 4;
    if (($424($4_1 | 0, $279($1_1 | 0) | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
     break label$2
    }
    $2_1 = 2;
    if (!($278($281($1_1 | 0) | 0 | 0, $5_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | $2_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $455($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $7_1 + 116 | 0;
  $456($0_1 + 8 | 0 | 0, $7_1 + 16 | 0 | 0, $7_1 + 12 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $1_1 = $457($7_1 + 16 | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
  global$0 = $7_1 + 128 | 0;
  return $1_1 | 0;
 }
 
 function $456($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP8[($6_1 + 15 | 0) >> 0] = 0;
  HEAP8[($6_1 + 14 | 0) >> 0] = $5_1;
  HEAP8[($6_1 + 13 | 0) >> 0] = $4_1;
  HEAP8[($6_1 + 12 | 0) >> 0] = 37;
  label$1 : {
   if (!$5_1) {
    break label$1
   }
   $458($6_1 + 13 | 0 | 0, $6_1 + 14 | 0 | 0);
  }
  HEAP32[$2_1 >> 2] = $1_1 + (fimport$4($1_1 | 0, $459($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0, $6_1 + 12 | 0 | 0, $3_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0) | 0;
  global$0 = $6_1 + 16 | 0;
 }
 
 function $457($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $462($460($0_1 | 0) | 0 | 0, $460($1_1 | 0) | 0 | 0, $461($2_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $458($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = HEAPU8[($958($0_1 | 0) | 0) >> 0] | 0;
  HEAP8[$0_1 >> 0] = HEAPU8[($958($1_1 | 0) | 0) >> 0] | 0;
  HEAP8[$1_1 >> 0] = HEAPU8[($958($2_1 + 15 | 0 | 0) | 0) >> 0] | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $459($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $460($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $461($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $462($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1178($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $463($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 416 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $7_1 + 416 | 0;
  $464($0_1 + 8 | 0 | 0, $7_1 + 16 | 0 | 0, $7_1 + 12 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $1_1 = $465($7_1 + 16 | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
  global$0 = $7_1 + 416 | 0;
  return $1_1 | 0;
 }
 
 function $464($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 144 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 132 | 0;
  $456($0_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 0;
  HEAP32[($6_1 + 20 | 0) >> 2] = 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 32 | 0;
  label$1 : {
   $0_1 = $467($1_1 | 0, $6_1 + 12 | 0 | 0, $466($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   if (($0_1 | 0) != (-1 | 0)) {
    break label$1
   }
   $468($6_1 | 0);
   abort();
  }
  HEAP32[$2_1 >> 2] = $1_1 + ($0_1 << 2 | 0) | 0;
  global$0 = $6_1 + 144 | 0;
 }
 
 function $465($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $471($469($0_1 | 0) | 0 | 0, $469($1_1 | 0) | 0 | 0, $470($2_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $466($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $467($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  $4_1 = $268($5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $0_1 = $163($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $269($4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $468($0_1) {
  $0_1 = $0_1 | 0;
  fimport$1();
  abort();
 }
 
 function $469($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $470($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $471($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1179($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $472($0_1) {
  $0_1 = $0_1 | 0;
  return $473() | 0 | 0;
 }
 
 function $473() {
  return $474() | 0 | 0;
 }
 
 function $474() {
  return 127 | 0;
 }
 
 function $475($0_1) {
  $0_1 = $0_1 | 0;
  return $473() | 0 | 0;
 }
 
 function $476($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $224($0_1 | 0) | 0;
 }
 
 function $477($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $224($0_1 | 0) | 0;
 }
 
 function $478($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $224($0_1 | 0) | 0;
 }
 
 function $479($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $14($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $480($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $481($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $482($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $483($0_1) {
  $0_1 = $0_1 | 0;
  return $473() | 0 | 0;
 }
 
 function $484($0_1) {
  $0_1 = $0_1 | 0;
  return $473() | 0 | 0;
 }
 
 function $485($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $224($0_1 | 0) | 0;
 }
 
 function $486($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $224($0_1 | 0) | 0;
 }
 
 function $487($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $224($0_1 | 0) | 0;
 }
 
 function $488($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $14($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $489($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $490($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $491($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $492($0_1) {
  $0_1 = $0_1 | 0;
  return $493() | 0 | 0;
 }
 
 function $493() {
  return $494() | 0 | 0;
 }
 
 function $494() {
  return 2147483647 | 0;
 }
 
 function $495($0_1) {
  $0_1 = $0_1 | 0;
  return $493() | 0 | 0;
 }
 
 function $496($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $224($0_1 | 0) | 0;
 }
 
 function $497($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $498($0_1 | 0) | 0;
 }
 
 function $498($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $199($0_1 | 0, $1_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $499($0_1 | 0);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $499($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $519($0_1 | 0) | 0;
  $0_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($0_1 | 0) != (3 | 0)) {
     break label$2
    }
    return;
   }
   HEAP32[($1_1 + ($0_1 << 2 | 0) | 0) >> 2] = 0;
   $0_1 = $0_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $500($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $498($0_1 | 0) | 0;
 }
 
 function $501($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $380($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $502($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $503($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $504($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $505($0_1) {
  $0_1 = $0_1 | 0;
  return $493() | 0 | 0;
 }
 
 function $506($0_1) {
  $0_1 = $0_1 | 0;
  return $493() | 0 | 0;
 }
 
 function $507($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $224($0_1 | 0) | 0;
 }
 
 function $508($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $498($0_1 | 0) | 0;
 }
 
 function $509($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $498($0_1 | 0) | 0;
 }
 
 function $510($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $380($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $511($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $512($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $513($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $514($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $516($515($1_1 | 0) | 0 | 0);
  $3_1 = $517($0_1 | 0, $2_1 + 8 | 0 | 0, $2_1 | 0) | 0;
  label$1 : {
   label$2 : {
    if ($432($1_1 | 0) | 0) {
     break label$2
    }
    $1_1 = $518($1_1 | 0) | 0;
    $3_1 = $519($3_1 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    break label$1;
   }
   $1389($0_1 | 0, $431($520($1_1 | 0) | 0 | 0) | 0 | 0, $433($1_1 | 0) | 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $515($0_1) {
  $0_1 = $0_1 | 0;
  return $1124($0_1 | 0) | 0 | 0;
 }
 
 function $516($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $517($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $25($1_1 | 0) | 0;
  $1109($0_1 | 0) | 0;
  $1145($0_1 | 0, $1144($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $518($0_1) {
  $0_1 = $0_1 | 0;
  return $999($0_1 | 0) | 0 | 0;
 }
 
 function $519($0_1) {
  $0_1 = $0_1 | 0;
  return $1001($0_1 | 0) | 0 | 0;
 }
 
 function $520($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($518($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $521($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
  $7_1 = global$0 - 288 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 272 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 280 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = 11;
  $1_1 = $349($7_1 + 152 | 0 | 0, $7_1 + 160 | 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $42($7_1 + 144 | 0 | 0, $4_1 | 0);
  $8_1 = $37($7_1 + 144 | 0 | 0) | 0;
  HEAP8[($7_1 + 143 | 0) >> 0] = 0;
  label$1 : {
   if (!($523($7_1 + 280 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 144 | 0 | 0, $7($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 143 | 0 | 0, $8_1 | 0, $1_1 | 0, $7_1 + 148 | 0 | 0, $7_1 + 260 | 0 | 0) | 0)) {
    break label$1
   }
   $11_1 = 0;
   $12_1 = HEAPU8[($11_1 + 1597 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 1598 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 1599 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 1600 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($7_1 + 135 | 0) >> 0] = $12_1;
   HEAP8[($7_1 + 136 | 0) >> 0] = $12_1 >>> 8 | 0;
   HEAP8[($7_1 + 137 | 0) >> 0] = $12_1 >>> 16 | 0;
   HEAP8[($7_1 + 138 | 0) >> 0] = $12_1 >>> 24 | 0;
   $10_1 = 0;
   i64toi32_i32$1 = HEAPU8[($10_1 + 1594 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 1595 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 1596 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 1597 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 128 | 0) >> 2] = HEAPU8[($10_1 + 1590 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 1591 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 1592 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 1593 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 132 | 0) >> 2] = i64toi32_i32$1;
   $258($8_1 | 0, $7_1 + 128 | 0 | 0, $7_1 + 138 | 0 | 0, $7_1 + 118 | 0 | 0) | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = 10;
   $8_1 = $349($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
   $2_1 = $7_1 + 16 | 0;
   label$2 : {
    label$3 : {
     if (((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - ($524($1_1 | 0) | 0) | 0 | 0) < (99 | 0)) {
      break label$3
     }
     $351($8_1 | 0, $1448(((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - ($524($1_1 | 0) | 0) | 0) + 2 | 0 | 0) | 0 | 0);
     if (!($524($8_1 | 0) | 0)) {
      break label$2
     }
     $2_1 = $524($8_1 | 0) | 0;
    }
    label$4 : {
     if (!(HEAPU8[($7_1 + 143 | 0) >> 0] | 0)) {
      break label$4
     }
     HEAP8[$2_1 >> 0] = 45;
     $2_1 = $2_1 + 1 | 0;
    }
    $4_1 = $524($1_1 | 0) | 0;
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if ($4_1 >>> 0 < (HEAP32[($7_1 + 148 | 0) >> 2] | 0) >>> 0) {
        break label$7
       }
       HEAP8[$2_1 >> 0] = 0;
       HEAP32[$7_1 >> 2] = $6_1;
       if (($154($7_1 + 16 | 0 | 0, 1422 | 0, $7_1 | 0) | 0 | 0) != (1 | 0)) {
        break label$5
       }
       $353($8_1 | 0) | 0;
       break label$1;
      }
      HEAP8[$2_1 >> 0] = HEAPU8[(($7_1 + 128 | 0) + (($317($7_1 + 118 | 0 | 0, $525($7_1 + 118 | 0 | 0) | 0 | 0, $4_1 | 0) | 0) - ($7_1 + 118 | 0) | 0) | 0) >> 0] | 0;
      $2_1 = $2_1 + 1 | 0;
      $4_1 = $4_1 + 1 | 0;
      continue label$6;
     };
    }
    $468($7_1 | 0);
    abort();
   }
   $1301();
   abort();
  }
  label$8 : {
   if (!($213($7_1 + 280 | 0 | 0, $7_1 + 272 | 0 | 0) | 0)) {
    break label$8
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $4_1 = HEAP32[($7_1 + 280 | 0) >> 2] | 0;
  $203($7_1 + 144 | 0 | 0) | 0;
  $353($1_1 | 0) | 0;
  global$0 = $7_1 + 288 | 0;
  return $4_1 | 0;
 }
 
 function $522($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $523($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  var $11_1 = 0, $15_1 = 0, $16_1 = 0, $14_1 = 0, $12_1 = 0, $17_1 = 0, $13_1 = 0, $18_1 = 0, $19_1 = 0, $397_1 = 0;
  $11_1 = global$0 - 560 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 548 | 0) >> 2] = $10_1;
  HEAP32[($11_1 + 552 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 104 | 0) >> 2] = 11;
  $12_1 = $526($11_1 + 136 | 0 | 0, $11_1 + 144 | 0 | 0, $11_1 + 104 | 0 | 0) | 0;
  $1_1 = $527($12_1 | 0) | 0;
  HEAP32[($11_1 + 132 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 128 | 0) >> 2] = $1_1 + 400 | 0;
  $13_1 = $224($11_1 + 104 | 0 | 0) | 0;
  $14_1 = $224($11_1 + 88 | 0 | 0) | 0;
  $15_1 = $224($11_1 + 72 | 0 | 0) | 0;
  $16_1 = $224($11_1 + 56 | 0 | 0) | 0;
  $17_1 = $224($11_1 + 40 | 0 | 0) | 0;
  $528($2_1 | 0, $3_1 | 0, $11_1 + 120 | 0 | 0, $11_1 + 119 | 0 | 0, $11_1 + 118 | 0 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $16_1 | 0, $11_1 + 36 | 0 | 0);
  HEAP32[$9_1 >> 2] = $524($8_1 | 0) | 0;
  $18_1 = $4_1 & 512 | 0;
  $19_1 = $18_1 >>> 9 | 0;
  $1_1 = 0;
  $2_1 = 0;
  label$1 : while (1) {
   $10_1 = $2_1;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($1_1 | 0) == (4 | 0)) {
        break label$5
       }
       if (!($212($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
        break label$5
       }
       $4_1 = 0;
       $2_1 = $10_1;
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            switch (HEAP8[(($11_1 + 120 | 0) + $1_1 | 0) >> 0] | 0 | 0) {
            case 1:
             if (($1_1 | 0) == (3 | 0)) {
              break label$3
             }
             label$12 : {
              if (!($399($7_1 | 0, 8192 | 0, $214($0_1 | 0) | 0 | 0) | 0)) {
               break label$12
              }
              $529($11_1 + 24 | 0 | 0, $0_1 | 0, 0 | 0);
              $1380($17_1 | 0, $530($11_1 + 24 | 0 | 0) | 0 | 0);
              break label$9;
             }
             HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
             $0_1 = 0;
             break label$4;
            case 0:
             break label$10;
            case 4:
             break label$6;
            case 2:
             break label$7;
            case 3:
             break label$8;
            default:
             break label$2;
            };
           }
           if (($1_1 | 0) == (3 | 0)) {
            break label$3
           }
          }
          label$13 : while (1) {
           if (!($212($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
            break label$3
           }
           if (!($399($7_1 | 0, 8192 | 0, $214($0_1 | 0) | 0 | 0) | 0)) {
            break label$3
           }
           $529($11_1 + 24 | 0 | 0, $0_1 | 0, 0 | 0);
           $1380($17_1 | 0, $530($11_1 + 24 | 0 | 0) | 0 | 0);
           continue label$13;
          };
         }
         if (($89($15_1 | 0) | 0 | 0) == (0 - ($89($16_1 | 0) | 0) | 0 | 0)) {
          break label$3
         }
         label$14 : {
          label$15 : {
           if (!($89($15_1 | 0) | 0)) {
            break label$15
           }
           if ($89($16_1 | 0) | 0) {
            break label$14
           }
          }
          $4_1 = $89($15_1 | 0) | 0;
          $2_1 = $214($0_1 | 0) | 0;
          label$16 : {
           if (!$4_1) {
            break label$16
           }
           label$17 : {
            if (($2_1 & 255 | 0 | 0) != (HEAPU8[($227($15_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
             break label$17
            }
            $216($0_1 | 0) | 0;
            $2_1 = ($89($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
            break label$2;
           }
           HEAP8[$6_1 >> 0] = 1;
           break label$3;
          }
          if (($2_1 & 255 | 0 | 0) != (HEAPU8[($227($16_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
           break label$3
          }
          $216($0_1 | 0) | 0;
          HEAP8[$6_1 >> 0] = 1;
          $2_1 = ($89($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
          break label$2;
         }
         label$18 : {
          if ((($214($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($227($15_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
           break label$18
          }
          $216($0_1 | 0) | 0;
          $2_1 = ($89($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
          break label$2;
         }
         label$19 : {
          if ((($214($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($227($16_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
           break label$19
          }
          $216($0_1 | 0) | 0;
          HEAP8[$6_1 >> 0] = 1;
          $2_1 = ($89($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
          break label$2;
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        label$20 : {
         if ($10_1) {
          break label$20
         }
         if ($1_1 >>> 0 < 2 >>> 0) {
          break label$20
         }
         $2_1 = 0;
         if (($19_1 | (($1_1 | 0) == (2 | 0) & (HEAPU8[($11_1 + 123 | 0) >> 0] | 0 | 0) != (0 | 0) | 0) | 0 | 0) != (1 | 0)) {
          break label$2
         }
        }
        HEAP32[($11_1 + 16 | 0) >> 2] = $325($14_1 | 0) | 0;
        $4_1 = $531($11_1 + 24 | 0 | 0, $11_1 + 16 | 0 | 0, 0 | 0) | 0;
        label$21 : {
         if (!$1_1) {
          break label$21
         }
         if ((HEAPU8[(($1_1 + ($11_1 + 120 | 0) | 0) + -1 | 0) >> 0] | 0) >>> 0 > 1 >>> 0) {
          break label$21
         }
         label$22 : {
          label$23 : while (1) {
           HEAP32[($11_1 + 16 | 0) >> 2] = $326($14_1 | 0) | 0;
           if (!($532($4_1 | 0, $11_1 + 16 | 0 | 0) | 0)) {
            break label$22
           }
           if (!($399($7_1 | 0, 8192 | 0, HEAP8[($533($4_1 | 0) | 0) >> 0] | 0 | 0) | 0)) {
            break label$22
           }
           $534($4_1 | 0) | 0;
           continue label$23;
          };
         }
         HEAP32[($11_1 + 16 | 0) >> 2] = $325($14_1 | 0) | 0;
         label$24 : {
          $4_1 = $535($4_1 | 0, $11_1 + 16 | 0 | 0) | 0;
          if ($4_1 >>> 0 > ($89($17_1 | 0) | 0) >>> 0) {
           break label$24
          }
          HEAP32[($11_1 + 16 | 0) >> 2] = $326($17_1 | 0) | 0;
          if ($537($536($11_1 + 16 | 0 | 0, $4_1 | 0) | 0 | 0, $326($17_1 | 0) | 0 | 0, $325($14_1 | 0) | 0 | 0) | 0) {
           break label$21
          }
         }
         HEAP32[($11_1 + 8 | 0) >> 2] = $325($14_1 | 0) | 0;
         $531($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0, 0 | 0) | 0;
         HEAP32[($11_1 + 24 | 0) >> 2] = HEAP32[($11_1 + 16 | 0) >> 2] | 0;
        }
        HEAP32[($11_1 + 16 | 0) >> 2] = HEAP32[($11_1 + 24 | 0) >> 2] | 0;
        label$25 : {
         label$26 : while (1) {
          HEAP32[($11_1 + 8 | 0) >> 2] = $326($14_1 | 0) | 0;
          if (!($532($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0) | 0)) {
           break label$25
          }
          if (!($212($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
           break label$25
          }
          if ((($214($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($533($11_1 + 16 | 0 | 0) | 0) >> 0] | 0 | 0)) {
           break label$25
          }
          $216($0_1 | 0) | 0;
          $534($11_1 + 16 | 0 | 0) | 0;
          continue label$26;
         };
        }
        if (!$18_1) {
         break label$3
        }
        HEAP32[($11_1 + 8 | 0) >> 2] = $326($14_1 | 0) | 0;
        if (!($532($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0) | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        $0_1 = 0;
        break label$4;
       }
       label$27 : {
        label$28 : while (1) {
         if (!($212($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
          break label$27
         }
         label$29 : {
          label$30 : {
           $2_1 = $214($0_1 | 0) | 0;
           if (!($399($7_1 | 0, 2048 | 0, $2_1 | 0) | 0)) {
            break label$30
           }
           label$31 : {
            $3_1 = HEAP32[$9_1 >> 2] | 0;
            if (($3_1 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
             break label$31
            }
            $538($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
            $3_1 = HEAP32[$9_1 >> 2] | 0;
           }
           HEAP32[$9_1 >> 2] = $3_1 + 1 | 0;
           HEAP8[$3_1 >> 0] = $2_1;
           $4_1 = $4_1 + 1 | 0;
           break label$29;
          }
          if (!($89($13_1 | 0) | 0)) {
           break label$27
          }
          if (!$4_1) {
           break label$27
          }
          if (($2_1 & 255 | 0 | 0) != ((HEAPU8[($11_1 + 118 | 0) >> 0] | 0) & 255 | 0 | 0)) {
           break label$27
          }
          label$32 : {
           $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
           if (($2_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
            break label$32
           }
           $539($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
           $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
          }
          HEAP32[($11_1 + 132 | 0) >> 2] = $2_1 + 4 | 0;
          HEAP32[$2_1 >> 2] = $4_1;
          $4_1 = 0;
         }
         $216($0_1 | 0) | 0;
         continue label$28;
        };
       }
       label$33 : {
        $397_1 = $527($12_1 | 0) | 0;
        $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
        if (($397_1 | 0) == ($2_1 | 0)) {
         break label$33
        }
        if (!$4_1) {
         break label$33
        }
        label$34 : {
         if (($2_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
          break label$34
         }
         $539($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
         $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
        }
        HEAP32[($11_1 + 132 | 0) >> 2] = $2_1 + 4 | 0;
        HEAP32[$2_1 >> 2] = $4_1;
       }
       label$35 : {
        if ((HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) < (1 | 0)) {
         break label$35
        }
        label$36 : {
         label$37 : {
          if ($213($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
           break label$37
          }
          if ((($214($0_1 | 0) | 0) & 255 | 0 | 0) == (HEAPU8[($11_1 + 119 | 0) >> 0] | 0 | 0)) {
           break label$36
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        label$38 : while (1) {
         $216($0_1 | 0) | 0;
         if ((HEAP32[($11_1 + 36 | 0) >> 2] | 0 | 0) < (1 | 0)) {
          break label$35
         }
         label$39 : {
          label$40 : {
           if ($213($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
            break label$40
           }
           if ($399($7_1 | 0, 2048 | 0, $214($0_1 | 0) | 0 | 0) | 0) {
            break label$39
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break label$4;
         }
         label$41 : {
          if ((HEAP32[$9_1 >> 2] | 0 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
           break label$41
          }
          $538($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
         }
         $4_1 = $214($0_1 | 0) | 0;
         $2_1 = HEAP32[$9_1 >> 2] | 0;
         HEAP32[$9_1 >> 2] = $2_1 + 1 | 0;
         HEAP8[$2_1 >> 0] = $4_1;
         HEAP32[($11_1 + 36 | 0) >> 2] = (HEAP32[($11_1 + 36 | 0) >> 2] | 0) + -1 | 0;
         continue label$38;
        };
       }
       $2_1 = $10_1;
       if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($524($8_1 | 0) | 0 | 0)) {
        break label$2
       }
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
       $0_1 = 0;
       break label$4;
      }
      label$42 : {
       if (!$10_1) {
        break label$42
       }
       $4_1 = 1;
       label$43 : while (1) {
        if ($4_1 >>> 0 >= ($89($10_1 | 0) | 0) >>> 0) {
         break label$42
        }
        label$44 : {
         label$45 : {
          if ($213($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
           break label$45
          }
          if ((($214($0_1 | 0) | 0) & 255 | 0 | 0) == (HEAPU8[($217($10_1 | 0, $4_1 | 0) | 0) >> 0] | 0 | 0)) {
           break label$44
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        $216($0_1 | 0) | 0;
        $4_1 = $4_1 + 1 | 0;
        continue label$43;
       };
      }
      $0_1 = 1;
      if (($527($12_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      $0_1 = 0;
      HEAP32[($11_1 + 24 | 0) >> 2] = 0;
      $230($13_1 | 0, $527($12_1 | 0) | 0 | 0, HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0, $11_1 + 24 | 0 | 0);
      label$46 : {
       if (!(HEAP32[($11_1 + 24 | 0) >> 2] | 0)) {
        break label$46
       }
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
       break label$4;
      }
      $0_1 = 1;
     }
     $1371($17_1 | 0) | 0;
     $1371($16_1 | 0) | 0;
     $1371($15_1 | 0) | 0;
     $1371($14_1 | 0) | 0;
     $1371($13_1 | 0) | 0;
     $540($12_1 | 0) | 0;
     global$0 = $11_1 + 560 | 0;
     return $0_1 | 0;
    }
    $2_1 = $10_1;
   }
   $1_1 = $1_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $524($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($541($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $525($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 10 | 0 | 0;
 }
 
 function $526($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $552($0_1 | 0, $3_1 + 12 | 0 | 0, $50($2_1 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $527($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($553($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $528($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = $554($1_1 | 0) | 0;
    $555($10_1 | 0, $0_1 | 0);
    $11_1 = $2_1;
    $12_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$11_1 >> 0] = $12_1;
    HEAP8[($11_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
    HEAP8[($11_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
    HEAP8[($11_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
    $556($10_1 | 0, $0_1 | 0);
    $557($8_1 | 0, $10_1 | 0) | 0;
    $1371($10_1 | 0) | 0;
    $558($10_1 | 0, $0_1 | 0);
    $557($7_1 | 0, $10_1 | 0) | 0;
    $1371($10_1 | 0) | 0;
    HEAP8[$3_1 >> 0] = $559($0_1 | 0) | 0;
    HEAP8[$4_1 >> 0] = $560($0_1 | 0) | 0;
    $561($10_1 | 0, $0_1 | 0);
    $557($5_1 | 0, $10_1 | 0) | 0;
    $1371($10_1 | 0) | 0;
    $562($10_1 | 0, $0_1 | 0);
    $557($6_1 | 0, $10_1 | 0) | 0;
    $1371($10_1 | 0) | 0;
    $0_1 = $563($0_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $564($1_1 | 0) | 0;
   $565($10_1 | 0, $0_1 | 0);
   $13_1 = $2_1;
   $14_1 = HEAP32[$10_1 >> 2] | 0;
   HEAP8[$13_1 >> 0] = $14_1;
   HEAP8[($13_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
   HEAP8[($13_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
   HEAP8[($13_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
   $566($10_1 | 0, $0_1 | 0);
   $557($8_1 | 0, $10_1 | 0) | 0;
   $1371($10_1 | 0) | 0;
   $567($10_1 | 0, $0_1 | 0);
   $557($7_1 | 0, $10_1 | 0) | 0;
   $1371($10_1 | 0) | 0;
   HEAP8[$3_1 >> 0] = $568($0_1 | 0) | 0;
   HEAP8[$4_1 >> 0] = $569($0_1 | 0) | 0;
   $570($10_1 | 0, $0_1 | 0);
   $557($5_1 | 0, $10_1 | 0) | 0;
   $1371($10_1 | 0) | 0;
   $571($10_1 | 0, $0_1 | 0);
   $557($6_1 | 0, $10_1 | 0) | 0;
   $1371($10_1 | 0) | 0;
   $0_1 = $572($0_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $0_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $529($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $573($0_1 | 0, (($267(HEAP32[$1_1 >> 2] | 0 | 0) | 0) << 24 | 0) >> 24 | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
 }
 
 function $530($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[$0_1 >> 0] | 0 | 0;
 }
 
 function $531($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $574($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $532($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($575($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $533($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $534($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  return $0_1 | 0;
 }
 
 function $535($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($576($0_1 | 0) | 0) - ($574($1_1 | 0) | 0) | 0 | 0;
 }
 
 function $536($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $578($0_1 | 0, 0 - $1_1 | 0 | 0) | 0 | 0;
 }
 
 function $537($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $577($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $538($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($579($0_1 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($524($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($580() | 0) >>> 1 | 0) >>> 0) {
     break label$2
    }
    $5_1 = $5_1 << 1 | 0;
    break label$1;
   }
   $5_1 = $580() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $524($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($4_1 | 0) != (11 | 0)) {
     break label$4
    }
    $8_1 = 0;
    break label$3;
   }
   $8_1 = $524($0_1 | 0) | 0;
  }
  label$5 : {
   $8_1 = $1450($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break label$5
   }
   label$6 : {
    if (($4_1 | 0) == (11 | 0)) {
     break label$6
    }
    $581($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 10;
   $4_1 = $349($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $582($0_1 | 0, $4_1 | 0) | 0;
   $353($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($524($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($524($0_1 | 0) | 0) + $5_1 | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1301();
  abort();
 }
 
 function $539($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($583($0_1 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($527($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($580() | 0) >>> 1 | 0) >>> 0) {
     break label$2
    }
    $5_1 = $5_1 << 1 | 0;
    break label$1;
   }
   $5_1 = $580() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 4;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $527($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($4_1 | 0) != (11 | 0)) {
     break label$4
    }
    $8_1 = 0;
    break label$3;
   }
   $8_1 = $527($0_1 | 0) | 0;
  }
  label$5 : {
   $8_1 = $1450($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break label$5
   }
   label$6 : {
    if (($4_1 | 0) == (11 | 0)) {
     break label$6
    }
    $584($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 10;
   $4_1 = $526($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $585($0_1 | 0, $4_1 | 0) | 0;
   $540($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($527($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($527($0_1 | 0) | 0) + ($5_1 & -4 | 0) | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1301();
  abort();
 }
 
 function $540($0_1) {
  $0_1 = $0_1 | 0;
  $587($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $541($0_1) {
  $0_1 = $0_1 | 0;
  return $1180($0_1 | 0) | 0 | 0;
 }
 
 function $542($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 160 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 144 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 152 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = 11;
  $8_1 = $349($7_1 + 24 | 0 | 0, $7_1 + 32 | 0 | 0, $7_1 + 20 | 0 | 0) | 0;
  $42($7_1 + 16 | 0 | 0, $4_1 | 0);
  $1_1 = $37($7_1 + 16 | 0 | 0) | 0;
  HEAP8[($7_1 + 15 | 0) >> 0] = 0;
  label$1 : {
   if (!($523($7_1 + 152 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 16 | 0 | 0, $7($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 15 | 0 | 0, $1_1 | 0, $8_1 | 0, $7_1 + 20 | 0 | 0, $7_1 + 132 | 0 | 0) | 0)) {
    break label$1
   }
   $543($6_1 | 0);
   label$2 : {
    if (!(HEAPU8[($7_1 + 15 | 0) >> 0] | 0)) {
     break label$2
    }
    $1380($6_1 | 0, $38($1_1 | 0, 45 | 0) | 0 | 0);
   }
   $1_1 = $38($1_1 | 0, 48 | 0) | 0;
   $4_1 = $524($8_1 | 0) | 0;
   $3_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   $2_1 = $3_1 + -1 | 0;
   $1_1 = $1_1 & 255 | 0;
   label$3 : {
    label$4 : while (1) {
     if ($4_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if ((HEAPU8[$4_1 >> 0] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     $4_1 = $4_1 + 1 | 0;
     continue label$4;
    };
   }
   $544($6_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
  }
  label$5 : {
   if (!($213($7_1 + 152 | 0 | 0, $7_1 + 144 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $4_1 = HEAP32[($7_1 + 152 | 0) >> 2] | 0;
  $203($7_1 + 16 | 0 | 0) | 0;
  $353($8_1 | 0) | 0;
  global$0 = $7_1 + 160 | 0;
  return $4_1 | 0;
 }
 
 function $543($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $545($0_1 | 0);
  label$1 : {
   label$2 : {
    if (!($29($0_1 | 0) | 0)) {
     break label$2
    }
    $2_1 = $546($0_1 | 0) | 0;
    HEAP8[($1_1 + 15 | 0) >> 0] = 0;
    $547($2_1 | 0, $1_1 + 15 | 0 | 0);
    $548($0_1 | 0, 0 | 0);
    break label$1;
   }
   $2_1 = $549($0_1 | 0) | 0;
   HEAP8[($1_1 + 14 | 0) >> 0] = 0;
   $547($2_1 | 0, $1_1 + 14 | 0 | 0);
   $550($0_1 | 0, 0 | 0);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $544($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $551($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $545($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $546($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($95($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $547($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
 }
 
 function $548($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($95($0_1 | 0) | 0) + 4 | 0) >> 2] = $1_1;
 }
 
 function $549($0_1) {
  $0_1 = $0_1 | 0;
  return $1045($95($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $550($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[(($95($0_1 | 0) | 0) + 11 | 0) >> 0] = $1_1;
 }
 
 function $551($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = $89($0_1 | 0) | 0;
  $5_1 = $225($0_1 | 0) | 0;
  label$1 : {
   $6_1 = $1181($1_1 | 0, $2_1 | 0) | 0;
   if (!$6_1) {
    break label$1
   }
   label$2 : {
    if (!($1182($1054($1_1 | 0) | 0 | 0, $342($0_1 | 0) | 0 | 0, ($342($0_1 | 0) | 0) + ($89($0_1 | 0) | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $1_1 = $1183($3_1 + 16 | 0 | 0, $1_1 | 0, $2_1 | 0, $988($0_1 | 0) | 0 | 0) | 0;
    $1378($0_1 | 0, $15($1_1 | 0) | 0 | 0, $89($1_1 | 0) | 0 | 0) | 0;
    $1371($1_1 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (($5_1 - $4_1 | 0) >>> 0 >= $6_1 >>> 0) {
     break label$3
    }
    $1372($0_1 | 0, $5_1 | 0, ($6_1 + $4_1 | 0) - $5_1 | 0 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
   }
   $5_1 = ($263($0_1 | 0) | 0) + $4_1 | 0;
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $547($5_1 | 0, $1_1 | 0);
     $1_1 = $1_1 + 1 | 0;
     $5_1 = $5_1 + 1 | 0;
     continue label$5;
    };
   }
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $547($5_1 | 0, $3_1 + 15 | 0 | 0);
   $1184($0_1 | 0, $6_1 + $4_1 | 0 | 0);
  }
  global$0 = $3_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $552($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1191($0_1 | 0, $1190($1_1 | 0) | 0 | 0) | 0;
  $55($0_1 + 4 | 0 | 0, $54($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $553($0_1) {
  $0_1 = $0_1 | 0;
  return $1195($0_1 | 0) | 0 | 0;
 }
 
 function $554($0_1) {
  $0_1 = $0_1 | 0;
  return $208($0_1 | 0, 15136 | 0) | 0 | 0;
 }
 
 function $555($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $556($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $557($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $643($0_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $558($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $559($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $560($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $561($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $562($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $563($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $564($0_1) {
  $0_1 = $0_1 | 0;
  return $208($0_1 | 0, 15128 | 0) | 0 | 0;
 }
 
 function $565($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $566($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $567($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $568($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $569($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $570($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $571($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $572($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $573($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP8[$0_1 >> 0] = $1_1;
  return $0_1 | 0;
 }
 
 function $574($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $575($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($576($0_1 | 0) | 0 | 0) == ($574($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $576($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $577($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    $2_1 = $327($3_1 + 24 | 0 | 0, $3_1 + 16 | 0 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
    if (!($1196($3_1 | 0, $328($3_1 + 24 | 0 | 0) | 0 | 0, $328($3_1 + 8 | 0 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $331($3_1 + 24 | 0 | 0) | 0;
    $331($3_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 32 | 0;
  return $2_1 ^ 1 | 0 | 0;
 }
 
 function $578($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $984($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $579($0_1) {
  $0_1 = $0_1 | 0;
  return $356($0_1 | 0) | 0 | 0;
 }
 
 function $580() {
  return $1157() | 0 | 0;
 }
 
 function $581($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($355($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($355($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $582($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $351($0_1 | 0, $581($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($54($579($1_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($356($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $583($0_1) {
  $0_1 = $0_1 | 0;
  return $1193($0_1 | 0) | 0 | 0;
 }
 
 function $584($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1192($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1192($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $585($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $587($0_1 | 0, $584($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($54($583($1_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($1193($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $586($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $917($0_1 | 0, $1_1 | 0);
 }
 
 function $587($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1192($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1192($0_1 | 0) | 0) >> 2] = $1_1;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1193($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $588($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
  $7_1 = global$0 - 624 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 608 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 616 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = 11;
  $1_1 = $386($7_1 + 200 | 0 | 0, $7_1 + 208 | 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $42($7_1 + 192 | 0 | 0, $4_1 | 0);
  $8_1 = $271($7_1 + 192 | 0 | 0) | 0;
  HEAP8[($7_1 + 191 | 0) >> 0] = 0;
  label$1 : {
   if (!($589($7_1 + 616 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 192 | 0 | 0, $7($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 191 | 0 | 0, $8_1 | 0, $1_1 | 0, $7_1 + 196 | 0 | 0, $7_1 + 608 | 0 | 0) | 0)) {
    break label$1
   }
   $11_1 = 0;
   $12_1 = HEAPU8[($11_1 + 1597 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 1598 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 1599 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 1600 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($7_1 + 183 | 0) >> 0] = $12_1;
   HEAP8[($7_1 + 184 | 0) >> 0] = $12_1 >>> 8 | 0;
   HEAP8[($7_1 + 185 | 0) >> 0] = $12_1 >>> 16 | 0;
   HEAP8[($7_1 + 186 | 0) >> 0] = $12_1 >>> 24 | 0;
   $10_1 = 0;
   i64toi32_i32$1 = HEAPU8[($10_1 + 1594 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 1595 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 1596 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 1597 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 176 | 0) >> 2] = HEAPU8[($10_1 + 1590 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 1591 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 1592 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 1593 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 180 | 0) >> 2] = i64toi32_i32$1;
   $309($8_1 | 0, $7_1 + 176 | 0 | 0, $7_1 + 186 | 0 | 0, $7_1 + 128 | 0 | 0) | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = 10;
   $8_1 = $349($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
   $2_1 = $7_1 + 16 | 0;
   label$2 : {
    label$3 : {
     if (((HEAP32[($7_1 + 196 | 0) >> 2] | 0) - ($590($1_1 | 0) | 0) | 0 | 0) < (393 | 0)) {
      break label$3
     }
     $351($8_1 | 0, $1448((((HEAP32[($7_1 + 196 | 0) >> 2] | 0) - ($590($1_1 | 0) | 0) | 0) >> 2 | 0) + 2 | 0 | 0) | 0 | 0);
     if (!($524($8_1 | 0) | 0)) {
      break label$2
     }
     $2_1 = $524($8_1 | 0) | 0;
    }
    label$4 : {
     if (!(HEAPU8[($7_1 + 191 | 0) >> 0] | 0)) {
      break label$4
     }
     HEAP8[$2_1 >> 0] = 45;
     $2_1 = $2_1 + 1 | 0;
    }
    $4_1 = $590($1_1 | 0) | 0;
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       if ($4_1 >>> 0 < (HEAP32[($7_1 + 196 | 0) >> 2] | 0) >>> 0) {
        break label$7
       }
       HEAP8[$2_1 >> 0] = 0;
       HEAP32[$7_1 >> 2] = $6_1;
       if (($154($7_1 + 16 | 0 | 0, 1422 | 0, $7_1 | 0) | 0 | 0) != (1 | 0)) {
        break label$5
       }
       $353($8_1 | 0) | 0;
       break label$1;
      }
      HEAP8[$2_1 >> 0] = HEAPU8[(($7_1 + 176 | 0) + ((($322($7_1 + 128 | 0 | 0, $591($7_1 + 128 | 0 | 0) | 0 | 0, $4_1 | 0) | 0) - ($7_1 + 128 | 0) | 0) >> 2 | 0) | 0) >> 0] | 0;
      $2_1 = $2_1 + 1 | 0;
      $4_1 = $4_1 + 4 | 0;
      continue label$6;
     };
    }
    $468($7_1 | 0);
    abort();
   }
   $1301();
   abort();
  }
  label$8 : {
   if (!($278($7_1 + 616 | 0 | 0, $7_1 + 608 | 0 | 0) | 0)) {
    break label$8
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $4_1 = HEAP32[($7_1 + 616 | 0) >> 2] | 0;
  $203($7_1 + 192 | 0 | 0) | 0;
  $389($1_1 | 0) | 0;
  global$0 = $7_1 + 624 | 0;
  return $4_1 | 0;
 }
 
 function $589($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  var $11_1 = 0, $15_1 = 0, $16_1 = 0, $14_1 = 0, $12_1 = 0, $17_1 = 0, $13_1 = 0, $18_1 = 0, $19_1 = 0, $387_1 = 0;
  $11_1 = global$0 - 560 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 548 | 0) >> 2] = $10_1;
  HEAP32[($11_1 + 552 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 96 | 0) >> 2] = 11;
  $12_1 = $526($11_1 + 136 | 0 | 0, $11_1 + 144 | 0 | 0, $11_1 + 96 | 0 | 0) | 0;
  $1_1 = $527($12_1 | 0) | 0;
  HEAP32[($11_1 + 132 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 128 | 0) >> 2] = $1_1 + 400 | 0;
  $13_1 = $224($11_1 + 96 | 0 | 0) | 0;
  $14_1 = $498($11_1 + 80 | 0 | 0) | 0;
  $15_1 = $498($11_1 + 64 | 0 | 0) | 0;
  $16_1 = $498($11_1 + 48 | 0 | 0) | 0;
  $17_1 = $498($11_1 + 32 | 0 | 0) | 0;
  $592($2_1 | 0, $3_1 | 0, $11_1 + 120 | 0 | 0, $11_1 + 116 | 0 | 0, $11_1 + 112 | 0 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $16_1 | 0, $11_1 + 28 | 0 | 0);
  HEAP32[$9_1 >> 2] = $590($8_1 | 0) | 0;
  $18_1 = $4_1 & 512 | 0;
  $19_1 = $18_1 >>> 9 | 0;
  $1_1 = 0;
  $2_1 = 0;
  label$1 : while (1) {
   $10_1 = $2_1;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($1_1 | 0) == (4 | 0)) {
        break label$5
       }
       if (!($277($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
        break label$5
       }
       $4_1 = 0;
       $2_1 = $10_1;
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            switch (HEAP8[(($11_1 + 120 | 0) + $1_1 | 0) >> 0] | 0 | 0) {
            case 1:
             if (($1_1 | 0) == (3 | 0)) {
              break label$3
             }
             label$12 : {
              if (!($425($7_1 | 0, 8192 | 0, $279($0_1 | 0) | 0 | 0) | 0)) {
               break label$12
              }
              $593($11_1 + 16 | 0 | 0, $0_1 | 0, 0 | 0);
              $1394($17_1 | 0, $594($11_1 + 16 | 0 | 0) | 0 | 0);
              break label$9;
             }
             HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
             $0_1 = 0;
             break label$4;
            case 0:
             break label$10;
            case 4:
             break label$6;
            case 2:
             break label$7;
            case 3:
             break label$8;
            default:
             break label$2;
            };
           }
           if (($1_1 | 0) == (3 | 0)) {
            break label$3
           }
          }
          label$13 : while (1) {
           if (!($277($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
            break label$3
           }
           if (!($425($7_1 | 0, 8192 | 0, $279($0_1 | 0) | 0 | 0) | 0)) {
            break label$3
           }
           $593($11_1 + 16 | 0 | 0, $0_1 | 0, 0 | 0);
           $1394($17_1 | 0, $594($11_1 + 16 | 0 | 0) | 0 | 0);
           continue label$13;
          };
         }
         if (($282($15_1 | 0) | 0 | 0) == (0 - ($282($16_1 | 0) | 0) | 0 | 0)) {
          break label$3
         }
         label$14 : {
          label$15 : {
           if (!($282($15_1 | 0) | 0)) {
            break label$15
           }
           if ($282($16_1 | 0) | 0) {
            break label$14
           }
          }
          $4_1 = $282($15_1 | 0) | 0;
          $2_1 = $279($0_1 | 0) | 0;
          label$16 : {
           if (!$4_1) {
            break label$16
           }
           label$17 : {
            if (($2_1 | 0) != (HEAP32[($595($15_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
             break label$17
            }
            $281($0_1 | 0) | 0;
            $2_1 = ($282($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
            break label$2;
           }
           HEAP8[$6_1 >> 0] = 1;
           break label$3;
          }
          if (($2_1 | 0) != (HEAP32[($595($16_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
           break label$3
          }
          $281($0_1 | 0) | 0;
          HEAP8[$6_1 >> 0] = 1;
          $2_1 = ($282($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
          break label$2;
         }
         label$18 : {
          if (($279($0_1 | 0) | 0 | 0) != (HEAP32[($595($15_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
           break label$18
          }
          $281($0_1 | 0) | 0;
          $2_1 = ($282($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $10_1;
          break label$2;
         }
         label$19 : {
          if (($279($0_1 | 0) | 0 | 0) != (HEAP32[($595($16_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
           break label$19
          }
          $281($0_1 | 0) | 0;
          HEAP8[$6_1 >> 0] = 1;
          $2_1 = ($282($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $10_1;
          break label$2;
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        label$20 : {
         if ($10_1) {
          break label$20
         }
         if ($1_1 >>> 0 < 2 >>> 0) {
          break label$20
         }
         $2_1 = 0;
         if (($19_1 | (($1_1 | 0) == (2 | 0) & (HEAPU8[($11_1 + 123 | 0) >> 0] | 0 | 0) != (0 | 0) | 0) | 0 | 0) != (1 | 0)) {
          break label$2
         }
        }
        HEAP32[($11_1 + 8 | 0) >> 2] = $360($14_1 | 0) | 0;
        $4_1 = $596($11_1 + 16 | 0 | 0, $11_1 + 8 | 0 | 0, 0 | 0) | 0;
        label$21 : {
         if (!$1_1) {
          break label$21
         }
         if ((HEAPU8[(($1_1 + ($11_1 + 120 | 0) | 0) + -1 | 0) >> 0] | 0) >>> 0 > 1 >>> 0) {
          break label$21
         }
         label$22 : {
          label$23 : while (1) {
           HEAP32[($11_1 + 8 | 0) >> 2] = $361($14_1 | 0) | 0;
           if (!($597($4_1 | 0, $11_1 + 8 | 0 | 0) | 0)) {
            break label$22
           }
           if (!($425($7_1 | 0, 8192 | 0, HEAP32[($598($4_1 | 0) | 0) >> 2] | 0 | 0) | 0)) {
            break label$22
           }
           $599($4_1 | 0) | 0;
           continue label$23;
          };
         }
         HEAP32[($11_1 + 8 | 0) >> 2] = $360($14_1 | 0) | 0;
         label$24 : {
          $4_1 = $600($4_1 | 0, $11_1 + 8 | 0 | 0) | 0;
          if ($4_1 >>> 0 > ($282($17_1 | 0) | 0) >>> 0) {
           break label$24
          }
          HEAP32[($11_1 + 8 | 0) >> 2] = $361($17_1 | 0) | 0;
          if ($602($601($11_1 + 8 | 0 | 0, $4_1 | 0) | 0 | 0, $361($17_1 | 0) | 0 | 0, $360($14_1 | 0) | 0 | 0) | 0) {
           break label$21
          }
         }
         HEAP32[$11_1 >> 2] = $360($14_1 | 0) | 0;
         $596($11_1 + 8 | 0 | 0, $11_1 | 0, 0 | 0) | 0;
         HEAP32[($11_1 + 16 | 0) >> 2] = HEAP32[($11_1 + 8 | 0) >> 2] | 0;
        }
        HEAP32[($11_1 + 8 | 0) >> 2] = HEAP32[($11_1 + 16 | 0) >> 2] | 0;
        label$25 : {
         label$26 : while (1) {
          HEAP32[$11_1 >> 2] = $361($14_1 | 0) | 0;
          if (!($597($11_1 + 8 | 0 | 0, $11_1 | 0) | 0)) {
           break label$25
          }
          if (!($277($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
           break label$25
          }
          if (($279($0_1 | 0) | 0 | 0) != (HEAP32[($598($11_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0)) {
           break label$25
          }
          $281($0_1 | 0) | 0;
          $599($11_1 + 8 | 0 | 0) | 0;
          continue label$26;
         };
        }
        if (!$18_1) {
         break label$3
        }
        HEAP32[$11_1 >> 2] = $361($14_1 | 0) | 0;
        if (!($597($11_1 + 8 | 0 | 0, $11_1 | 0) | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        $0_1 = 0;
        break label$4;
       }
       label$27 : {
        label$28 : while (1) {
         if (!($277($0_1 | 0, $11_1 + 552 | 0 | 0) | 0)) {
          break label$27
         }
         label$29 : {
          label$30 : {
           $2_1 = $279($0_1 | 0) | 0;
           if (!($425($7_1 | 0, 2048 | 0, $2_1 | 0) | 0)) {
            break label$30
           }
           label$31 : {
            $3_1 = HEAP32[$9_1 >> 2] | 0;
            if (($3_1 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
             break label$31
            }
            $603($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
            $3_1 = HEAP32[$9_1 >> 2] | 0;
           }
           HEAP32[$9_1 >> 2] = $3_1 + 4 | 0;
           HEAP32[$3_1 >> 2] = $2_1;
           $4_1 = $4_1 + 1 | 0;
           break label$29;
          }
          if (!($89($13_1 | 0) | 0)) {
           break label$27
          }
          if (!$4_1) {
           break label$27
          }
          if (($2_1 | 0) != (HEAP32[($11_1 + 112 | 0) >> 2] | 0 | 0)) {
           break label$27
          }
          label$32 : {
           $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
           if (($2_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
            break label$32
           }
           $539($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
           $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
          }
          HEAP32[($11_1 + 132 | 0) >> 2] = $2_1 + 4 | 0;
          HEAP32[$2_1 >> 2] = $4_1;
          $4_1 = 0;
         }
         $281($0_1 | 0) | 0;
         continue label$28;
        };
       }
       label$33 : {
        $387_1 = $527($12_1 | 0) | 0;
        $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
        if (($387_1 | 0) == ($2_1 | 0)) {
         break label$33
        }
        if (!$4_1) {
         break label$33
        }
        label$34 : {
         if (($2_1 | 0) != (HEAP32[($11_1 + 128 | 0) >> 2] | 0 | 0)) {
          break label$34
         }
         $539($12_1 | 0, $11_1 + 132 | 0 | 0, $11_1 + 128 | 0 | 0);
         $2_1 = HEAP32[($11_1 + 132 | 0) >> 2] | 0;
        }
        HEAP32[($11_1 + 132 | 0) >> 2] = $2_1 + 4 | 0;
        HEAP32[$2_1 >> 2] = $4_1;
       }
       label$35 : {
        if ((HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0) < (1 | 0)) {
         break label$35
        }
        label$36 : {
         label$37 : {
          if ($278($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
           break label$37
          }
          if (($279($0_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 116 | 0) >> 2] | 0 | 0)) {
           break label$36
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        label$38 : while (1) {
         $281($0_1 | 0) | 0;
         if ((HEAP32[($11_1 + 28 | 0) >> 2] | 0 | 0) < (1 | 0)) {
          break label$35
         }
         label$39 : {
          label$40 : {
           if ($278($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
            break label$40
           }
           if ($425($7_1 | 0, 2048 | 0, $279($0_1 | 0) | 0 | 0) | 0) {
            break label$39
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break label$4;
         }
         label$41 : {
          if ((HEAP32[$9_1 >> 2] | 0 | 0) != (HEAP32[($11_1 + 548 | 0) >> 2] | 0 | 0)) {
           break label$41
          }
          $603($8_1 | 0, $9_1 | 0, $11_1 + 548 | 0 | 0);
         }
         $4_1 = $279($0_1 | 0) | 0;
         $2_1 = HEAP32[$9_1 >> 2] | 0;
         HEAP32[$9_1 >> 2] = $2_1 + 4 | 0;
         HEAP32[$2_1 >> 2] = $4_1;
         HEAP32[($11_1 + 28 | 0) >> 2] = (HEAP32[($11_1 + 28 | 0) >> 2] | 0) + -1 | 0;
         continue label$38;
        };
       }
       $2_1 = $10_1;
       if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($590($8_1 | 0) | 0 | 0)) {
        break label$2
       }
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
       $0_1 = 0;
       break label$4;
      }
      label$42 : {
       if (!$10_1) {
        break label$42
       }
       $4_1 = 1;
       label$43 : while (1) {
        if ($4_1 >>> 0 >= ($282($10_1 | 0) | 0) >>> 0) {
         break label$42
        }
        label$44 : {
         label$45 : {
          if ($278($0_1 | 0, $11_1 + 552 | 0 | 0) | 0) {
           break label$45
          }
          if (($279($0_1 | 0) | 0 | 0) == (HEAP32[($283($10_1 | 0, $4_1 | 0) | 0) >> 2] | 0 | 0)) {
           break label$44
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break label$4;
        }
        $281($0_1 | 0) | 0;
        $4_1 = $4_1 + 1 | 0;
        continue label$43;
       };
      }
      $0_1 = 1;
      if (($527($12_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      $0_1 = 0;
      HEAP32[($11_1 + 16 | 0) >> 2] = 0;
      $230($13_1 | 0, $527($12_1 | 0) | 0 | 0, HEAP32[($11_1 + 132 | 0) >> 2] | 0 | 0, $11_1 + 16 | 0 | 0);
      label$46 : {
       if (!(HEAP32[($11_1 + 16 | 0) >> 2] | 0)) {
        break label$46
       }
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
       break label$4;
      }
      $0_1 = 1;
     }
     $1385($17_1 | 0) | 0;
     $1385($16_1 | 0) | 0;
     $1385($15_1 | 0) | 0;
     $1385($14_1 | 0) | 0;
     $1371($13_1 | 0) | 0;
     $540($12_1 | 0) | 0;
     global$0 = $11_1 + 560 | 0;
     return $0_1 | 0;
    }
    $2_1 = $10_1;
   }
   $1_1 = $1_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $590($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($604($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $591($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 40 | 0 | 0;
 }
 
 function $592($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = $615($1_1 | 0) | 0;
    $616($10_1 | 0, $0_1 | 0);
    $11_1 = $2_1;
    $12_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$11_1 >> 0] = $12_1;
    HEAP8[($11_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
    HEAP8[($11_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
    HEAP8[($11_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
    $617($10_1 | 0, $0_1 | 0);
    $618($8_1 | 0, $10_1 | 0) | 0;
    $1385($10_1 | 0) | 0;
    $619($10_1 | 0, $0_1 | 0);
    $618($7_1 | 0, $10_1 | 0) | 0;
    $1385($10_1 | 0) | 0;
    HEAP32[$3_1 >> 2] = $620($0_1 | 0) | 0;
    HEAP32[$4_1 >> 2] = $621($0_1 | 0) | 0;
    $622($10_1 | 0, $0_1 | 0);
    $557($5_1 | 0, $10_1 | 0) | 0;
    $1371($10_1 | 0) | 0;
    $623($10_1 | 0, $0_1 | 0);
    $618($6_1 | 0, $10_1 | 0) | 0;
    $1385($10_1 | 0) | 0;
    $0_1 = $624($0_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $625($1_1 | 0) | 0;
   $626($10_1 | 0, $0_1 | 0);
   $13_1 = $2_1;
   $14_1 = HEAP32[$10_1 >> 2] | 0;
   HEAP8[$13_1 >> 0] = $14_1;
   HEAP8[($13_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
   HEAP8[($13_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
   HEAP8[($13_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
   $627($10_1 | 0, $0_1 | 0);
   $618($8_1 | 0, $10_1 | 0) | 0;
   $1385($10_1 | 0) | 0;
   $628($10_1 | 0, $0_1 | 0);
   $618($7_1 | 0, $10_1 | 0) | 0;
   $1385($10_1 | 0) | 0;
   HEAP32[$3_1 >> 2] = $629($0_1 | 0) | 0;
   HEAP32[$4_1 >> 2] = $630($0_1 | 0) | 0;
   $631($10_1 | 0, $0_1 | 0);
   $557($5_1 | 0, $10_1 | 0) | 0;
   $1371($10_1 | 0) | 0;
   $632($10_1 | 0, $0_1 | 0);
   $618($6_1 | 0, $10_1 | 0) | 0;
   $1385($10_1 | 0) | 0;
   $0_1 = $633($0_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $0_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $593($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $634($0_1 | 0, $313(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
 }
 
 function $594($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $595($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($368($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $596($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $635($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $597($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($636($0_1 | 0, $1_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $598($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $599($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 4 | 0;
  return $0_1 | 0;
 }
 
 function $600($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($637($0_1 | 0) | 0) - ($635($1_1 | 0) | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $601($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $639($0_1 | 0, 0 - $1_1 | 0 | 0) | 0 | 0;
 }
 
 function $602($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $638($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $603($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($640($0_1 | 0) | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($590($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($580() | 0) >>> 1 | 0) >>> 0) {
     break label$2
    }
    $5_1 = $5_1 << 1 | 0;
    break label$1;
   }
   $5_1 = $580() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 4;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $590($0_1 | 0) | 0;
  label$3 : {
   label$4 : {
    if (($4_1 | 0) != (11 | 0)) {
     break label$4
    }
    $8_1 = 0;
    break label$3;
   }
   $8_1 = $590($0_1 | 0) | 0;
  }
  label$5 : {
   $8_1 = $1450($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break label$5
   }
   label$6 : {
    if (($4_1 | 0) == (11 | 0)) {
     break label$6
    }
    $641($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 10;
   $4_1 = $386($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $642($0_1 | 0, $4_1 | 0) | 0;
   $389($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($590($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($590($0_1 | 0) | 0) + ($5_1 & -4 | 0) | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1301();
  abort();
 }
 
 function $604($0_1) {
  $0_1 = $0_1 | 0;
  return $1197($0_1 | 0) | 0 | 0;
 }
 
 function $605($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 448 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 432 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 440 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = 11;
  $8_1 = $386($7_1 + 24 | 0 | 0, $7_1 + 32 | 0 | 0, $7_1 + 20 | 0 | 0) | 0;
  $42($7_1 + 16 | 0 | 0, $4_1 | 0);
  $1_1 = $271($7_1 + 16 | 0 | 0) | 0;
  HEAP8[($7_1 + 15 | 0) >> 0] = 0;
  label$1 : {
   if (!($589($7_1 + 440 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 16 | 0 | 0, $7($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 15 | 0 | 0, $1_1 | 0, $8_1 | 0, $7_1 + 20 | 0 | 0, $7_1 + 432 | 0 | 0) | 0)) {
    break label$1
   }
   $606($6_1 | 0);
   label$2 : {
    if (!(HEAPU8[($7_1 + 15 | 0) >> 0] | 0)) {
     break label$2
    }
    $1394($6_1 | 0, $377($1_1 | 0, 45 | 0) | 0 | 0);
   }
   $1_1 = $377($1_1 | 0, 48 | 0) | 0;
   $4_1 = $590($8_1 | 0) | 0;
   $3_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   $2_1 = $3_1 + -4 | 0;
   label$3 : {
    label$4 : while (1) {
     if ($4_1 >>> 0 >= $2_1 >>> 0) {
      break label$3
     }
     if ((HEAP32[$4_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     $4_1 = $4_1 + 4 | 0;
     continue label$4;
    };
   }
   $607($6_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
  }
  label$5 : {
   if (!($278($7_1 + 440 | 0 | 0, $7_1 + 432 | 0 | 0) | 0)) {
    break label$5
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $4_1 = HEAP32[($7_1 + 440 | 0) >> 2] | 0;
  $203($7_1 + 16 | 0 | 0) | 0;
  $389($8_1 | 0) | 0;
  global$0 = $7_1 + 448 | 0;
  return $4_1 | 0;
 }
 
 function $606($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $608($0_1 | 0);
  label$1 : {
   label$2 : {
    if (!($432($0_1 | 0) | 0)) {
     break label$2
    }
    $2_1 = $609($0_1 | 0) | 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = 0;
    $610($2_1 | 0, $1_1 + 12 | 0 | 0);
    $611($0_1 | 0, 0 | 0);
    break label$1;
   }
   $2_1 = $612($0_1 | 0) | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = 0;
   $610($2_1 | 0, $1_1 + 8 | 0 | 0);
   $613($0_1 | 0, 0 | 0);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $607($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $614($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $608($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $609($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($519($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $610($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
 }
 
 function $611($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($519($0_1 | 0) | 0) + 4 | 0) >> 2] = $1_1;
 }
 
 function $612($0_1) {
  $0_1 = $0_1 | 0;
  return $1120($519($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $613($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[(($519($0_1 | 0) | 0) + 11 | 0) >> 0] = $1_1;
 }
 
 function $614($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $282($0_1 | 0) | 0;
  $5_1 = $954($0_1 | 0) | 0;
  label$1 : {
   $6_1 = $953($1_1 | 0, $2_1 | 0) | 0;
   if (!$6_1) {
    break label$1
   }
   label$2 : {
    if (!($1198($1126($1_1 | 0) | 0 | 0, $381($0_1 | 0) | 0 | 0, ($381($0_1 | 0) | 0) + (($282($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $1_1 = $1199($3_1 | 0, $1_1 | 0, $2_1 | 0, $996($0_1 | 0) | 0 | 0) | 0;
    $1392($0_1 | 0, $429($1_1 | 0) | 0 | 0, $282($1_1 | 0) | 0 | 0) | 0;
    $1385($1_1 | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (($5_1 - $4_1 | 0) >>> 0 >= $6_1 >>> 0) {
     break label$3
    }
    $1386($0_1 | 0, $5_1 | 0, ($6_1 + $4_1 | 0) - $5_1 | 0 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
   }
   $5_1 = ($368($0_1 | 0) | 0) + ($4_1 << 2 | 0) | 0;
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $610($5_1 | 0, $1_1 | 0);
     $1_1 = $1_1 + 4 | 0;
     $5_1 = $5_1 + 4 | 0;
     continue label$5;
    };
   }
   HEAP32[$3_1 >> 2] = 0;
   $610($5_1 | 0, $3_1 | 0);
   $956($0_1 | 0, $6_1 + $4_1 | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $615($0_1) {
  $0_1 = $0_1 | 0;
  return $208($0_1 | 0, 15152 | 0) | 0 | 0;
 }
 
 function $616($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $617($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $618($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $644($0_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $619($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $620($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $621($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $622($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $623($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $624($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $625($0_1) {
  $0_1 = $0_1 | 0;
  return $208($0_1 | 0, 15144 | 0) | 0 | 0;
 }
 
 function $626($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $627($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $628($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $629($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $630($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $631($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $632($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $633($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $634($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $635($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $636($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($637($0_1 | 0) | 0 | 0) == ($635($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $637($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $638($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    $2_1 = $362($3_1 + 24 | 0 | 0, $3_1 + 16 | 0 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
    if (!($1204($3_1 | 0, $363($3_1 + 24 | 0 | 0) | 0 | 0, $363($3_1 + 8 | 0 | 0) | 0 | 0) | 0)) {
     break label$1
    }
    $366($3_1 + 24 | 0 | 0) | 0;
    $366($3_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 32 | 0;
  return $2_1 ^ 1 | 0 | 0;
 }
 
 function $639($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $985($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $640($0_1) {
  $0_1 = $0_1 | 0;
  return $392($0_1 | 0) | 0 | 0;
 }
 
 function $641($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($391($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($391($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $642($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $387($0_1 | 0, $641($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($54($640($1_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  HEAP32[($392($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $643($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (!($29($0_1 | 0) | 0)) {
    break label$1
   }
   $986($988($0_1 | 0) | 0 | 0, $546($0_1 | 0) | 0 | 0, $262($0_1 | 0) | 0 | 0);
  }
  $1135($0_1 | 0, $1_1 | 0);
  $3_1 = $95($1_1 | 0) | 0;
  $0_1 = $95($0_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $550($1_1 | 0, 0 | 0);
  $0_1 = $549($1_1 | 0) | 0;
  HEAP8[($2_1 + 15 | 0) >> 0] = 0;
  $547($0_1 | 0, $2_1 + 15 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $644($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (!($432($0_1 | 0) | 0)) {
    break label$1
   }
   $994($996($0_1 | 0) | 0 | 0, $609($0_1 | 0) | 0 | 0, $998($0_1 | 0) | 0 | 0);
  }
  $1139($0_1 | 0, $1_1 | 0);
  $3_1 = $519($1_1 | 0) | 0;
  $0_1 = $519($0_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $613($1_1 | 0, 0 | 0);
  $0_1 = $612($1_1 | 0) | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $610($0_1 | 0, $2_1 + 12 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $645($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var $7_1 = 0, $8_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, $16_1 = 0, $11_1 = 0, $12_1 = 0, $9_1 = 0, $15_1 = 0, $17_1 = 0, $18_1 = 0, $10_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 464 | 0;
  global$0 = $7_1;
  i64toi32_i32$0 = $5$hi;
  HEAP32[($7_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[($7_1 + 24 | 0) >> 2] = $6_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 348 | 0) >> 2] = $7_1 + 352 | 0;
  $8_1 = $87($7_1 + 352 | 0 | 0, 100 | 0, 1416 | 0, $7_1 + 16 | 0 | 0) | 0;
  HEAP32[($7_1 + 240 | 0) >> 2] = 10;
  $9_1 = 0;
  $10_1 = $349($7_1 + 232 | 0 | 0, 0 | 0, $7_1 + 240 | 0 | 0) | 0;
  HEAP32[($7_1 + 240 | 0) >> 2] = 10;
  $11_1 = $349($7_1 + 224 | 0 | 0, 0 | 0, $7_1 + 240 | 0 | 0) | 0;
  $12_1 = $7_1 + 240 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 100 >>> 0) {
     break label$2
    }
    $8_1 = $260() | 0;
    i64toi32_i32$0 = $5$hi;
    HEAP32[$7_1 >> 2] = $5_1;
    HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    HEAP32[($7_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = $350($7_1 + 348 | 0 | 0, $8_1 | 0, 1416 | 0, $7_1 | 0) | 0;
    if (($8_1 | 0) == (-1 | 0)) {
     break label$1
    }
    $351($10_1 | 0, HEAP32[($7_1 + 348 | 0) >> 2] | 0 | 0);
    $351($11_1 | 0, $1448($8_1 | 0) | 0 | 0);
    if ($646($11_1 | 0, 0 | 0) | 0) {
     break label$1
    }
    $12_1 = $524($11_1 | 0) | 0;
   }
   $42($7_1 + 216 | 0 | 0, $3_1 | 0);
   $13_1 = $37($7_1 + 216 | 0 | 0) | 0;
   $14_1 = HEAP32[($7_1 + 348 | 0) >> 2] | 0;
   $258($13_1 | 0, $14_1 | 0, $14_1 + $8_1 | 0 | 0, $12_1 | 0) | 0;
   label$3 : {
    if (($8_1 | 0) < (1 | 0)) {
     break label$3
    }
    $9_1 = (HEAPU8[(HEAP32[($7_1 + 348 | 0) >> 2] | 0) >> 0] | 0 | 0) == (45 | 0);
   }
   $15_1 = $224($7_1 + 192 | 0 | 0) | 0;
   $14_1 = $224($7_1 + 176 | 0 | 0) | 0;
   $16_1 = $224($7_1 + 160 | 0 | 0) | 0;
   $647($2_1 | 0, $9_1 | 0, $7_1 + 216 | 0 | 0, $7_1 + 208 | 0 | 0, $7_1 + 207 | 0 | 0, $7_1 + 206 | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, $7_1 + 156 | 0 | 0);
   HEAP32[($7_1 + 48 | 0) >> 2] = 10;
   $17_1 = $349($7_1 + 40 | 0 | 0, 0 | 0, $7_1 + 48 | 0 | 0) | 0;
   label$4 : {
    label$5 : {
     $2_1 = HEAP32[($7_1 + 156 | 0) >> 2] | 0;
     if (($8_1 | 0) <= ($2_1 | 0)) {
      break label$5
     }
     $18_1 = (((($89($16_1 | 0) | 0) + (($8_1 - $2_1 | 0) << 1 | 0) | 0) + ($89($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 156 | 0) >> 2] | 0) | 0) + 1 | 0;
     break label$4;
    }
    $18_1 = ((($89($16_1 | 0) | 0) + ($89($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 156 | 0) >> 2] | 0) | 0) + 2 | 0;
   }
   $2_1 = $7_1 + 48 | 0;
   label$6 : {
    if ($18_1 >>> 0 < 101 >>> 0) {
     break label$6
    }
    $351($17_1 | 0, $1448($18_1 | 0) | 0 | 0);
    $2_1 = $524($17_1 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
   }
   $648($2_1 | 0, $7_1 + 36 | 0 | 0, $7_1 + 32 | 0 | 0, $7($3_1 | 0) | 0 | 0, $12_1 | 0, $12_1 + $8_1 | 0 | 0, $13_1 | 0, $9_1 | 0, $7_1 + 208 | 0 | 0, HEAP8[($7_1 + 207 | 0) >> 0] | 0 | 0, HEAP8[($7_1 + 206 | 0) >> 0] | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, HEAP32[($7_1 + 156 | 0) >> 2] | 0 | 0);
   $8_1 = $9($1_1 | 0, $2_1 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   $353($17_1 | 0) | 0;
   $1371($16_1 | 0) | 0;
   $1371($14_1 | 0) | 0;
   $1371($15_1 | 0) | 0;
   $203($7_1 + 216 | 0 | 0) | 0;
   $353($11_1 | 0) | 0;
   $353($10_1 | 0) | 0;
   global$0 = $7_1 + 464 | 0;
   return $8_1 | 0;
  }
  $1301();
  abort();
 }
 
 function $646($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($649($0_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $647($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = $554($2_1 | 0) | 0;
    label$3 : {
     label$4 : {
      if (!$1_1) {
       break label$4
      }
      $555($10_1 | 0, $0_1 | 0);
      $11_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP8[$3_1 >> 0] = $11_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $11_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $11_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $11_1 >>> 24 | 0;
      $556($10_1 | 0, $0_1 | 0);
      $557($8_1 | 0, $10_1 | 0) | 0;
      $1371($10_1 | 0) | 0;
      break label$3;
     }
     $650($10_1 | 0, $0_1 | 0);
     $12_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $12_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
     $558($10_1 | 0, $0_1 | 0);
     $557($8_1 | 0, $10_1 | 0) | 0;
     $1371($10_1 | 0) | 0;
    }
    HEAP8[$4_1 >> 0] = $559($0_1 | 0) | 0;
    HEAP8[$5_1 >> 0] = $560($0_1 | 0) | 0;
    $561($10_1 | 0, $0_1 | 0);
    $557($6_1 | 0, $10_1 | 0) | 0;
    $1371($10_1 | 0) | 0;
    $562($10_1 | 0, $0_1 | 0);
    $557($7_1 | 0, $10_1 | 0) | 0;
    $1371($10_1 | 0) | 0;
    $0_1 = $563($0_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $564($2_1 | 0) | 0;
   label$5 : {
    label$6 : {
     if (!$1_1) {
      break label$6
     }
     $565($10_1 | 0, $0_1 | 0);
     $13_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $13_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
     $566($10_1 | 0, $0_1 | 0);
     $557($8_1 | 0, $10_1 | 0) | 0;
     $1371($10_1 | 0) | 0;
     break label$5;
    }
    $651($10_1 | 0, $0_1 | 0);
    $14_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$3_1 >> 0] = $14_1;
    HEAP8[($3_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
    HEAP8[($3_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
    HEAP8[($3_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
    $567($10_1 | 0, $0_1 | 0);
    $557($8_1 | 0, $10_1 | 0) | 0;
    $1371($10_1 | 0) | 0;
   }
   HEAP8[$4_1 >> 0] = $568($0_1 | 0) | 0;
   HEAP8[$5_1 >> 0] = $569($0_1 | 0) | 0;
   $570($10_1 | 0, $0_1 | 0);
   $557($6_1 | 0, $10_1 | 0) | 0;
   $1371($10_1 | 0) | 0;
   $571($10_1 | 0, $0_1 | 0);
   $557($7_1 | 0, $10_1 | 0) | 0;
   $1371($10_1 | 0) | 0;
   $0_1 = $572($0_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $0_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $648($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  var $19_1 = 0, $18_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $15_1 = 0, $17_1 = 0, $16_1 = 0, $20_1 = 0;
  $15_1 = global$0 - 16 | 0;
  global$0 = $15_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $16_1 = $3_1 & 512 | 0;
  $17_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($17_1 | 0) != (4 | 0)) {
     break label$2
    }
    label$3 : {
     if (($89($13_1 | 0) | 0) >>> 0 <= 1 >>> 0) {
      break label$3
     }
     HEAP32[($15_1 + 8 | 0) >> 2] = $652($13_1 | 0) | 0;
     HEAP32[$2_1 >> 2] = $655($653($15_1 + 8 | 0 | 0, 1 | 0) | 0 | 0, $654($13_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
    }
    label$4 : {
     $18_1 = $3_1 & 176 | 0;
     if (($18_1 | 0) == (16 | 0)) {
      break label$4
     }
     label$5 : {
      if (($18_1 | 0) != (32 | 0)) {
       break label$5
      }
      $0_1 = HEAP32[$2_1 >> 2] | 0;
     }
     HEAP32[$1_1 >> 2] = $0_1;
    }
    global$0 = $15_1 + 16 | 0;
    return;
   }
   label$6 : {
    label$7 : {
     switch (HEAP8[($8_1 + $17_1 | 0) >> 0] | 0 | 0) {
     case 0:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      break label$6;
     case 1:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      $18_1 = $38($6_1 | 0, 32 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
      HEAP8[$19_1 >> 0] = $18_1;
      break label$6;
     case 3:
      if ($88($13_1 | 0) | 0) {
       break label$6
      }
      $18_1 = HEAPU8[($217($13_1 | 0, 0 | 0) | 0) >> 0] | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
      HEAP8[$19_1 >> 0] = $18_1;
      break label$6;
     case 2:
      if ($88($12_1 | 0) | 0) {
       break label$6
      }
      if (!$16_1) {
       break label$6
      }
      HEAP32[$2_1 >> 2] = $655($652($12_1 | 0) | 0 | 0, $654($12_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
      break label$6;
     case 4:
      break label$7;
     default:
      break label$6;
     };
    }
    $20_1 = HEAP32[$2_1 >> 2] | 0;
    $4_1 = $4_1 + $7_1 | 0;
    $18_1 = $4_1;
    label$12 : {
     label$13 : while (1) {
      if ($18_1 >>> 0 >= $5_1 >>> 0) {
       break label$12
      }
      if (!($399($6_1 | 0, 2048 | 0, HEAP8[$18_1 >> 0] | 0 | 0) | 0)) {
       break label$12
      }
      $18_1 = $18_1 + 1 | 0;
      continue label$13;
     };
    }
    $19_1 = $14_1;
    label$14 : {
     if (($19_1 | 0) < (1 | 0)) {
      break label$14
     }
     label$15 : {
      label$16 : while (1) {
       if ($18_1 >>> 0 <= $4_1 >>> 0) {
        break label$15
       }
       if (($19_1 | 0) < (1 | 0)) {
        break label$15
       }
       $18_1 = $18_1 + -1 | 0;
       $21_1 = HEAPU8[$18_1 >> 0] | 0;
       $22_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $22_1 + 1 | 0;
       HEAP8[$22_1 >> 0] = $21_1;
       $19_1 = $19_1 + -1 | 0;
       continue label$16;
      };
     }
     label$17 : {
      label$18 : {
       if (($19_1 | 0) >= (1 | 0)) {
        break label$18
       }
       $22_1 = 0;
       break label$17;
      }
      $22_1 = $38($6_1 | 0, 48 | 0) | 0;
     }
     label$19 : {
      label$20 : while (1) {
       $21_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
       if (($19_1 | 0) < (1 | 0)) {
        break label$19
       }
       HEAP8[$21_1 >> 0] = $22_1;
       $19_1 = $19_1 + -1 | 0;
       continue label$20;
      };
     }
     HEAP8[$21_1 >> 0] = $9_1;
    }
    label$21 : {
     label$22 : {
      if (($18_1 | 0) != ($4_1 | 0)) {
       break label$22
      }
      $18_1 = $38($6_1 | 0, 48 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
      HEAP8[$19_1 >> 0] = $18_1;
      break label$21;
     }
     label$23 : {
      label$24 : {
       if (!($88($11_1 | 0) | 0)) {
        break label$24
       }
       $23_1 = $656() | 0;
       break label$23;
      }
      $23_1 = HEAP8[($217($11_1 | 0, 0 | 0) | 0) >> 0] | 0;
     }
     $19_1 = 0;
     $24_1 = 0;
     label$25 : while (1) {
      if (($18_1 | 0) == ($4_1 | 0)) {
       break label$21
      }
      label$26 : {
       label$27 : {
        if (($19_1 | 0) == ($23_1 | 0)) {
         break label$27
        }
        $22_1 = $19_1;
        break label$26;
       }
       $21_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
       HEAP8[$21_1 >> 0] = $10_1;
       $22_1 = 0;
       label$28 : {
        $24_1 = $24_1 + 1 | 0;
        if ($24_1 >>> 0 < ($89($11_1 | 0) | 0) >>> 0) {
         break label$28
        }
        $23_1 = $19_1;
        break label$26;
       }
       label$29 : {
        if ((HEAPU8[($217($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0 | 0) != (($473() | 0) & 255 | 0 | 0)) {
         break label$29
        }
        $23_1 = $656() | 0;
        break label$26;
       }
       $23_1 = HEAP8[($217($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0;
      }
      $18_1 = $18_1 + -1 | 0;
      $19_1 = HEAPU8[$18_1 >> 0] | 0;
      $21_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
      HEAP8[$21_1 >> 0] = $19_1;
      $19_1 = $22_1 + 1 | 0;
      continue label$25;
     };
    }
    $341($20_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0);
   }
   $17_1 = $17_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $649($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($541($0_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $650($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $651($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $652($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($672($1_1 + 8 | 0 | 0, $23($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $653($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $674($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $654($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($672($1_1 + 8 | 0 | 0, ($23($0_1 | 0) | 0) + ($89($0_1 | 0) | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $655($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $671($670($0_1 | 0) | 0 | 0, $670($1_1 | 0) | 0 | 0, $460($2_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $656() {
  return $673() | 0 | 0;
 }
 
 function $657($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 192 | 0;
  global$0 = $6_1;
  $42($6_1 + 184 | 0 | 0, $3_1 | 0);
  $7_1 = $37($6_1 + 184 | 0 | 0) | 0;
  $8_1 = 0;
  label$1 : {
   if (!($89($5_1 | 0) | 0)) {
    break label$1
   }
   $8_1 = (HEAPU8[($217($5_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0) == (($38($7_1 | 0, 45 | 0) | 0) & 255 | 0 | 0);
  }
  $9_1 = $224($6_1 + 160 | 0 | 0) | 0;
  $10_1 = $224($6_1 + 144 | 0 | 0) | 0;
  $11_1 = $224($6_1 + 128 | 0 | 0) | 0;
  $647($2_1 | 0, $8_1 | 0, $6_1 + 184 | 0 | 0, $6_1 + 176 | 0 | 0, $6_1 + 175 | 0 | 0, $6_1 + 174 | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, $6_1 + 124 | 0 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 10;
  $12_1 = $349($6_1 + 8 | 0 | 0, 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  label$2 : {
   label$3 : {
    if (($89($5_1 | 0) | 0 | 0) <= (HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $2_1 = $89($5_1 | 0) | 0;
    $13_1 = HEAP32[($6_1 + 124 | 0) >> 2] | 0;
    $13_1 = (((($89($11_1 | 0) | 0) + (($2_1 - $13_1 | 0) << 1 | 0) | 0) + ($89($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 124 | 0) >> 2] | 0) | 0) + 1 | 0;
    break label$2;
   }
   $13_1 = ((($89($11_1 | 0) | 0) + ($89($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 124 | 0) >> 2] | 0) | 0) + 2 | 0;
  }
  $2_1 = $6_1 + 16 | 0;
  label$4 : {
   if ($13_1 >>> 0 < 101 >>> 0) {
    break label$4
   }
   $351($12_1 | 0, $1448($13_1 | 0) | 0 | 0);
   $2_1 = $524($12_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   $1301();
   abort();
  }
  $648($2_1 | 0, $6_1 + 4 | 0 | 0, $6_1 | 0, $7($3_1 | 0) | 0 | 0, $15($5_1 | 0) | 0 | 0, ($15($5_1 | 0) | 0) + ($89($5_1 | 0) | 0) | 0 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 176 | 0 | 0, HEAP8[($6_1 + 175 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 174 | 0) >> 0] | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0);
  $5_1 = $9($1_1 | 0, $2_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $353($12_1 | 0) | 0;
  $1371($11_1 | 0) | 0;
  $1371($10_1 | 0) | 0;
  $1371($9_1 | 0) | 0;
  $203($6_1 + 184 | 0 | 0) | 0;
  global$0 = $6_1 + 192 | 0;
  return $5_1 | 0;
 }
 
 function $658($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var $7_1 = 0, $8_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, $16_1 = 0, $11_1 = 0, $12_1 = 0, $9_1 = 0, $15_1 = 0, $17_1 = 0, $18_1 = 0, $10_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 1072 | 0;
  global$0 = $7_1;
  i64toi32_i32$0 = $5$hi;
  HEAP32[($7_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[($7_1 + 24 | 0) >> 2] = $6_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 956 | 0) >> 2] = $7_1 + 960 | 0;
  $8_1 = $87($7_1 + 960 | 0 | 0, 100 | 0, 1416 | 0, $7_1 + 16 | 0 | 0) | 0;
  HEAP32[($7_1 + 544 | 0) >> 2] = 10;
  $9_1 = 0;
  $10_1 = $349($7_1 + 536 | 0 | 0, 0 | 0, $7_1 + 544 | 0 | 0) | 0;
  HEAP32[($7_1 + 544 | 0) >> 2] = 10;
  $11_1 = $386($7_1 + 528 | 0 | 0, 0 | 0, $7_1 + 544 | 0 | 0) | 0;
  $12_1 = $7_1 + 544 | 0;
  label$1 : {
   label$2 : {
    if ($8_1 >>> 0 < 100 >>> 0) {
     break label$2
    }
    $8_1 = $260() | 0;
    i64toi32_i32$0 = $5$hi;
    HEAP32[$7_1 >> 2] = $5_1;
    HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    HEAP32[($7_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = $350($7_1 + 956 | 0 | 0, $8_1 | 0, 1416 | 0, $7_1 | 0) | 0;
    if (($8_1 | 0) == (-1 | 0)) {
     break label$1
    }
    $351($10_1 | 0, HEAP32[($7_1 + 956 | 0) >> 2] | 0 | 0);
    $387($11_1 | 0, $1448($8_1 << 2 | 0 | 0) | 0 | 0);
    if ($659($11_1 | 0, 0 | 0) | 0) {
     break label$1
    }
    $12_1 = $590($11_1 | 0) | 0;
   }
   $42($7_1 + 520 | 0 | 0, $3_1 | 0);
   $13_1 = $271($7_1 + 520 | 0 | 0) | 0;
   $14_1 = HEAP32[($7_1 + 956 | 0) >> 2] | 0;
   $309($13_1 | 0, $14_1 | 0, $14_1 + $8_1 | 0 | 0, $12_1 | 0) | 0;
   label$3 : {
    if (($8_1 | 0) < (1 | 0)) {
     break label$3
    }
    $9_1 = (HEAPU8[(HEAP32[($7_1 + 956 | 0) >> 2] | 0) >> 0] | 0 | 0) == (45 | 0);
   }
   $15_1 = $224($7_1 + 488 | 0 | 0) | 0;
   $14_1 = $498($7_1 + 472 | 0 | 0) | 0;
   $16_1 = $498($7_1 + 456 | 0 | 0) | 0;
   $660($2_1 | 0, $9_1 | 0, $7_1 + 520 | 0 | 0, $7_1 + 512 | 0 | 0, $7_1 + 508 | 0 | 0, $7_1 + 504 | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, $7_1 + 452 | 0 | 0);
   HEAP32[($7_1 + 48 | 0) >> 2] = 10;
   $17_1 = $386($7_1 + 40 | 0 | 0, 0 | 0, $7_1 + 48 | 0 | 0) | 0;
   label$4 : {
    label$5 : {
     $2_1 = HEAP32[($7_1 + 452 | 0) >> 2] | 0;
     if (($8_1 | 0) <= ($2_1 | 0)) {
      break label$5
     }
     $18_1 = (((($282($16_1 | 0) | 0) + (($8_1 - $2_1 | 0) << 1 | 0) | 0) + ($282($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 452 | 0) >> 2] | 0) | 0) + 1 | 0;
     break label$4;
    }
    $18_1 = ((($282($16_1 | 0) | 0) + ($282($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 452 | 0) >> 2] | 0) | 0) + 2 | 0;
   }
   $2_1 = $7_1 + 48 | 0;
   label$6 : {
    if ($18_1 >>> 0 < 101 >>> 0) {
     break label$6
    }
    $387($17_1 | 0, $1448($18_1 << 2 | 0 | 0) | 0 | 0);
    $2_1 = $590($17_1 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
   }
   $661($2_1 | 0, $7_1 + 36 | 0 | 0, $7_1 + 32 | 0 | 0, $7($3_1 | 0) | 0 | 0, $12_1 | 0, $12_1 + ($8_1 << 2 | 0) | 0 | 0, $13_1 | 0, $9_1 | 0, $7_1 + 512 | 0 | 0, HEAP32[($7_1 + 508 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 504 | 0) >> 2] | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, HEAP32[($7_1 + 452 | 0) >> 2] | 0 | 0);
   $8_1 = $376($1_1 | 0, $2_1 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   $389($17_1 | 0) | 0;
   $1385($16_1 | 0) | 0;
   $1385($14_1 | 0) | 0;
   $1371($15_1 | 0) | 0;
   $203($7_1 + 520 | 0 | 0) | 0;
   $389($11_1 | 0) | 0;
   $353($10_1 | 0) | 0;
   global$0 = $7_1 + 1072 | 0;
   return $8_1 | 0;
  }
  $1301();
  abort();
 }
 
 function $659($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($662($0_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $660($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $0_1 = $615($2_1 | 0) | 0;
    label$3 : {
     label$4 : {
      if (!$1_1) {
       break label$4
      }
      $616($10_1 | 0, $0_1 | 0);
      $11_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP8[$3_1 >> 0] = $11_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $11_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $11_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $11_1 >>> 24 | 0;
      $617($10_1 | 0, $0_1 | 0);
      $618($8_1 | 0, $10_1 | 0) | 0;
      $1385($10_1 | 0) | 0;
      break label$3;
     }
     $663($10_1 | 0, $0_1 | 0);
     $12_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $12_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
     $619($10_1 | 0, $0_1 | 0);
     $618($8_1 | 0, $10_1 | 0) | 0;
     $1385($10_1 | 0) | 0;
    }
    HEAP32[$4_1 >> 2] = $620($0_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $621($0_1 | 0) | 0;
    $622($10_1 | 0, $0_1 | 0);
    $557($6_1 | 0, $10_1 | 0) | 0;
    $1371($10_1 | 0) | 0;
    $623($10_1 | 0, $0_1 | 0);
    $618($7_1 | 0, $10_1 | 0) | 0;
    $1385($10_1 | 0) | 0;
    $0_1 = $624($0_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $625($2_1 | 0) | 0;
   label$5 : {
    label$6 : {
     if (!$1_1) {
      break label$6
     }
     $626($10_1 | 0, $0_1 | 0);
     $13_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP8[$3_1 >> 0] = $13_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
     $627($10_1 | 0, $0_1 | 0);
     $618($8_1 | 0, $10_1 | 0) | 0;
     $1385($10_1 | 0) | 0;
     break label$5;
    }
    $664($10_1 | 0, $0_1 | 0);
    $14_1 = HEAP32[$10_1 >> 2] | 0;
    HEAP8[$3_1 >> 0] = $14_1;
    HEAP8[($3_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
    HEAP8[($3_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
    HEAP8[($3_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
    $628($10_1 | 0, $0_1 | 0);
    $618($8_1 | 0, $10_1 | 0) | 0;
    $1385($10_1 | 0) | 0;
   }
   HEAP32[$4_1 >> 2] = $629($0_1 | 0) | 0;
   HEAP32[$5_1 >> 2] = $630($0_1 | 0) | 0;
   $631($10_1 | 0, $0_1 | 0);
   $557($6_1 | 0, $10_1 | 0) | 0;
   $1371($10_1 | 0) | 0;
   $632($10_1 | 0, $0_1 | 0);
   $618($7_1 | 0, $10_1 | 0) | 0;
   $1385($10_1 | 0) | 0;
   $0_1 = $633($0_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $0_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $661($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  var $19_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $15_1 = 0, $18_1 = 0, $16_1 = 0, $17_1 = 0, $20_1 = 0;
  $15_1 = global$0 - 16 | 0;
  global$0 = $15_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $16_1 = $3_1 & 512 | 0;
  $17_1 = $7_1 << 2 | 0;
  $18_1 = 0;
  label$1 : while (1) {
   label$2 : {
    if (($18_1 | 0) != (4 | 0)) {
     break label$2
    }
    label$3 : {
     if (($282($13_1 | 0) | 0) >>> 0 <= 1 >>> 0) {
      break label$3
     }
     HEAP32[($15_1 + 8 | 0) >> 2] = $665($13_1 | 0) | 0;
     HEAP32[$2_1 >> 2] = $668($666($15_1 + 8 | 0 | 0, 1 | 0) | 0 | 0, $667($13_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
    }
    label$4 : {
     $7_1 = $3_1 & 176 | 0;
     if (($7_1 | 0) == (16 | 0)) {
      break label$4
     }
     label$5 : {
      if (($7_1 | 0) != (32 | 0)) {
       break label$5
      }
      $0_1 = HEAP32[$2_1 >> 2] | 0;
     }
     HEAP32[$1_1 >> 2] = $0_1;
    }
    global$0 = $15_1 + 16 | 0;
    return;
   }
   label$6 : {
    label$7 : {
     switch (HEAP8[($8_1 + $18_1 | 0) >> 0] | 0 | 0) {
     case 0:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      break label$6;
     case 1:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      $7_1 = $377($6_1 | 0, 32 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
      HEAP32[$19_1 >> 2] = $7_1;
      break label$6;
     case 3:
      if ($284($13_1 | 0) | 0) {
       break label$6
      }
      $7_1 = HEAP32[($283($13_1 | 0, 0 | 0) | 0) >> 2] | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
      HEAP32[$19_1 >> 2] = $7_1;
      break label$6;
     case 2:
      if ($284($12_1 | 0) | 0) {
       break label$6
      }
      if (!$16_1) {
       break label$6
      }
      HEAP32[$2_1 >> 2] = $668($665($12_1 | 0) | 0 | 0, $667($12_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
      break label$6;
     case 4:
      break label$7;
     default:
      break label$6;
     };
    }
    $20_1 = HEAP32[$2_1 >> 2] | 0;
    $4_1 = $4_1 + $17_1 | 0;
    $7_1 = $4_1;
    label$12 : {
     label$13 : while (1) {
      if ($7_1 >>> 0 >= $5_1 >>> 0) {
       break label$12
      }
      if (!($425($6_1 | 0, 2048 | 0, HEAP32[$7_1 >> 2] | 0 | 0) | 0)) {
       break label$12
      }
      $7_1 = $7_1 + 4 | 0;
      continue label$13;
     };
    }
    $19_1 = $14_1;
    label$14 : {
     if (($19_1 | 0) < (1 | 0)) {
      break label$14
     }
     label$15 : {
      label$16 : while (1) {
       if ($7_1 >>> 0 <= $4_1 >>> 0) {
        break label$15
       }
       if (($19_1 | 0) < (1 | 0)) {
        break label$15
       }
       $7_1 = $7_1 + -4 | 0;
       $21_1 = HEAP32[$7_1 >> 2] | 0;
       $22_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $22_1 + 4 | 0;
       HEAP32[$22_1 >> 2] = $21_1;
       $19_1 = $19_1 + -1 | 0;
       continue label$16;
      };
     }
     label$17 : {
      label$18 : {
       if (($19_1 | 0) >= (1 | 0)) {
        break label$18
       }
       $23_1 = 0;
       break label$17;
      }
      $23_1 = $377($6_1 | 0, 48 | 0) | 0;
     }
     $21_1 = HEAP32[$2_1 >> 2] | 0;
     label$19 : {
      label$20 : while (1) {
       $22_1 = $21_1 + 4 | 0;
       if (($19_1 | 0) < (1 | 0)) {
        break label$19
       }
       HEAP32[$21_1 >> 2] = $23_1;
       $19_1 = $19_1 + -1 | 0;
       $21_1 = $22_1;
       continue label$20;
      };
     }
     HEAP32[$2_1 >> 2] = $22_1;
     HEAP32[$21_1 >> 2] = $9_1;
    }
    label$21 : {
     label$22 : {
      if (($7_1 | 0) != ($4_1 | 0)) {
       break label$22
      }
      $19_1 = $377($6_1 | 0, 48 | 0) | 0;
      $21_1 = HEAP32[$2_1 >> 2] | 0;
      $7_1 = $21_1 + 4 | 0;
      HEAP32[$2_1 >> 2] = $7_1;
      HEAP32[$21_1 >> 2] = $19_1;
      break label$21;
     }
     label$23 : {
      label$24 : {
       if (!($88($11_1 | 0) | 0)) {
        break label$24
       }
       $23_1 = $656() | 0;
       break label$23;
      }
      $23_1 = HEAP8[($217($11_1 | 0, 0 | 0) | 0) >> 0] | 0;
     }
     $19_1 = 0;
     $24_1 = 0;
     label$25 : {
      label$26 : while (1) {
       if (($7_1 | 0) == ($4_1 | 0)) {
        break label$25
       }
       label$27 : {
        label$28 : {
         if (($19_1 | 0) == ($23_1 | 0)) {
          break label$28
         }
         $22_1 = $19_1;
         break label$27;
        }
        $21_1 = HEAP32[$2_1 >> 2] | 0;
        HEAP32[$2_1 >> 2] = $21_1 + 4 | 0;
        HEAP32[$21_1 >> 2] = $10_1;
        $22_1 = 0;
        label$29 : {
         $24_1 = $24_1 + 1 | 0;
         if ($24_1 >>> 0 < ($89($11_1 | 0) | 0) >>> 0) {
          break label$29
         }
         $23_1 = $19_1;
         break label$27;
        }
        label$30 : {
         if ((HEAPU8[($217($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0 | 0) != (($473() | 0) & 255 | 0 | 0)) {
          break label$30
         }
         $23_1 = $656() | 0;
         break label$27;
        }
        $23_1 = HEAP8[($217($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0;
       }
       $7_1 = $7_1 + -4 | 0;
       $19_1 = HEAP32[$7_1 >> 2] | 0;
       $21_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $21_1 + 4 | 0;
       HEAP32[$21_1 >> 2] = $19_1;
       $19_1 = $22_1 + 1 | 0;
       continue label$26;
      };
     }
     $7_1 = HEAP32[$2_1 >> 2] | 0;
    }
    $378($20_1 | 0, $7_1 | 0);
   }
   $18_1 = $18_1 + 1 | 0;
   continue label$1;
  };
 }
 
 function $662($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($604($0_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $663($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $664($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $665($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($677($1_1 + 8 | 0 | 0, $430($0_1 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $666($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $678($2_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $667($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[($677($1_1 + 8 | 0 | 0, ($430($0_1 | 0) | 0) + (($282($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $668($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $676($675($0_1 | 0) | 0 | 0, $675($1_1 | 0) | 0 | 0, $469($2_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $669($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 496 | 0;
  global$0 = $6_1;
  $42($6_1 + 488 | 0 | 0, $3_1 | 0);
  $7_1 = $271($6_1 + 488 | 0 | 0) | 0;
  $8_1 = 0;
  label$1 : {
   if (!($282($5_1 | 0) | 0)) {
    break label$1
   }
   $8_1 = (HEAP32[($283($5_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0) == ($377($7_1 | 0, 45 | 0) | 0 | 0);
  }
  $9_1 = $224($6_1 + 456 | 0 | 0) | 0;
  $10_1 = $498($6_1 + 440 | 0 | 0) | 0;
  $11_1 = $498($6_1 + 424 | 0 | 0) | 0;
  $660($2_1 | 0, $8_1 | 0, $6_1 + 488 | 0 | 0, $6_1 + 480 | 0 | 0, $6_1 + 476 | 0 | 0, $6_1 + 472 | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, $6_1 + 420 | 0 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 10;
  $12_1 = $386($6_1 + 8 | 0 | 0, 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  label$2 : {
   label$3 : {
    if (($282($5_1 | 0) | 0 | 0) <= (HEAP32[($6_1 + 420 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $2_1 = $282($5_1 | 0) | 0;
    $13_1 = HEAP32[($6_1 + 420 | 0) >> 2] | 0;
    $13_1 = (((($282($11_1 | 0) | 0) + (($2_1 - $13_1 | 0) << 1 | 0) | 0) + ($282($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 420 | 0) >> 2] | 0) | 0) + 1 | 0;
    break label$2;
   }
   $13_1 = ((($282($11_1 | 0) | 0) + ($282($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 420 | 0) >> 2] | 0) | 0) + 2 | 0;
  }
  $2_1 = $6_1 + 16 | 0;
  label$4 : {
   if ($13_1 >>> 0 < 101 >>> 0) {
    break label$4
   }
   $387($12_1 | 0, $1448($13_1 << 2 | 0 | 0) | 0 | 0);
   $2_1 = $590($12_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   $1301();
   abort();
  }
  $661($2_1 | 0, $6_1 + 4 | 0 | 0, $6_1 | 0, $7($3_1 | 0) | 0 | 0, $429($5_1 | 0) | 0 | 0, ($429($5_1 | 0) | 0) + (($282($5_1 | 0) | 0) << 2 | 0) | 0 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 480 | 0 | 0, HEAP32[($6_1 + 476 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 472 | 0) >> 2] | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, HEAP32[($6_1 + 420 | 0) >> 2] | 0 | 0);
  $5_1 = $376($1_1 | 0, $2_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $389($12_1 | 0) | 0;
  $1385($11_1 | 0) | 0;
  $1385($10_1 | 0) | 0;
  $1371($9_1 | 0) | 0;
  $203($6_1 + 488 | 0 | 0) | 0;
  global$0 = $6_1 + 496 | 0;
  return $5_1 | 0;
 }
 
 function $670($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
  $0_1 = $576($1_1 + 8 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $671($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   $1_1 = $1_1 - $0_1 | 0;
   if (!$1_1) {
    break label$1
   }
   $1460($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
  }
  return $2_1 + $1_1 | 0 | 0;
 }
 
 function $672($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $673() {
  return -1 | 0;
 }
 
 function $674($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $675($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
  $0_1 = $637($1_1 + 8 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $676($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   $1_1 = $1_1 - $0_1 | 0;
   if (!$1_1) {
    break label$1
   }
   $1460($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
  }
  return $2_1 + $1_1 | 0 | 0;
 }
 
 function $677($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $678($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $679($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return -1 | 0;
 }
 
 function $680($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $91($0_1 | 0, $5_1 | 0) | 0;
 }
 
 function $681($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $682($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return -1 | 0;
 }
 
 function $683($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $514($0_1 | 0, $5_1 | 0) | 0;
 }
 
 function $684($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $685($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 7328;
  label$1 : {
   if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) == ($260() | 0 | 0)) {
    break label$1
   }
   $155(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  }
  $187($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $686($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 7256;
  $1_1 = $688($0_1 + 8 | 0 | 0, 30 | 0) | 0;
  $40($0_1 + 152 | 0 | 0, 1588 | 0) | 0;
  $689($1_1 | 0);
  $690();
  $691($0_1 | 0, 16512 | 0);
  $692();
  $693($0_1 | 0, 16520 | 0);
  $694();
  $695($0_1 | 0, 16528 | 0);
  $696();
  $697($0_1 | 0, 16544 | 0);
  $698();
  $699($0_1 | 0, 16552 | 0);
  $700();
  $701($0_1 | 0, 16560 | 0);
  $702();
  $703($0_1 | 0, 16576 | 0);
  $704();
  $705($0_1 | 0, 16584 | 0);
  $706();
  $707($0_1 | 0, 16592 | 0);
  $708();
  $709($0_1 | 0, 16616 | 0);
  $710();
  $711($0_1 | 0, 16648 | 0);
  $712();
  $713($0_1 | 0, 16656 | 0);
  $714();
  $715($0_1 | 0, 16664 | 0);
  $716();
  $717($0_1 | 0, 16672 | 0);
  $718();
  $719($0_1 | 0, 16680 | 0);
  $720();
  $721($0_1 | 0, 16688 | 0);
  $722();
  $723($0_1 | 0, 16696 | 0);
  $724();
  $725($0_1 | 0, 16704 | 0);
  $726();
  $727($0_1 | 0, 16712 | 0);
  $728();
  $729($0_1 | 0, 16720 | 0);
  $730();
  $731($0_1 | 0, 16728 | 0);
  $732();
  $733($0_1 | 0, 16736 | 0);
  $734();
  $735($0_1 | 0, 16744 | 0);
  $736();
  $737($0_1 | 0, 16760 | 0);
  $738();
  $739($0_1 | 0, 16776 | 0);
  $740();
  $741($0_1 | 0, 16792 | 0);
  $742();
  $743($0_1 | 0, 16808 | 0);
  $744();
  $745($0_1 | 0, 16816 | 0);
  return $0_1 | 0;
 }
 
 function $687($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $746($0_1 | 0, $1_1 + -1 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 7704;
  return $0_1 | 0;
 }
 
 function $688($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $747($0_1 | 0) | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $748($0_1 | 0, $1_1 | 0);
   $749($0_1 | 0, $1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $689($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $750($0_1 | 0) | 0;
  $751($0_1 | 0);
  $752($0_1 | 0, $1_1 | 0);
  $753($0_1 | 0);
 }
 
 function $690() {
  $756(16512 | 0, 1 | 0) | 0;
 }
 
 function $691($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15048 | 0) | 0 | 0);
 }
 
 function $692() {
  $757(16520 | 0, 1 | 0) | 0;
 }
 
 function $693($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15056 | 0) | 0 | 0);
 }
 
 function $694() {
  $758(16528 | 0, 0 | 0, 0 | 0, 1 | 0) | 0;
 }
 
 function $695($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15252 | 0) | 0 | 0);
 }
 
 function $696() {
  $759(16544 | 0, 1 | 0) | 0;
 }
 
 function $697($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15244 | 0) | 0 | 0);
 }
 
 function $698() {
  $760(16552 | 0, 1 | 0) | 0;
 }
 
 function $699($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15260 | 0) | 0 | 0);
 }
 
 function $700() {
  $761(16560 | 0, 1 | 0) | 0;
 }
 
 function $701($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15268 | 0) | 0 | 0);
 }
 
 function $702() {
  $762(16576 | 0, 1 | 0) | 0;
 }
 
 function $703($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15276 | 0) | 0 | 0);
 }
 
 function $704() {
  $763(16584 | 0, 1 | 0) | 0;
 }
 
 function $705($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15284 | 0) | 0 | 0);
 }
 
 function $706() {
  $764(16592 | 0, 1 | 0) | 0;
 }
 
 function $707($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15292 | 0) | 0 | 0);
 }
 
 function $708() {
  $765(16616 | 0, 1 | 0) | 0;
 }
 
 function $709($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15300 | 0) | 0 | 0);
 }
 
 function $710() {
  $766(16648 | 0, 1 | 0) | 0;
 }
 
 function $711($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15064 | 0) | 0 | 0);
 }
 
 function $712() {
  $767(16656 | 0, 1 | 0) | 0;
 }
 
 function $713($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15072 | 0) | 0 | 0);
 }
 
 function $714() {
  $768(16664 | 0, 1 | 0) | 0;
 }
 
 function $715($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15080 | 0) | 0 | 0);
 }
 
 function $716() {
  $769(16672 | 0, 1 | 0) | 0;
 }
 
 function $717($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15088 | 0) | 0 | 0);
 }
 
 function $718() {
  $770(16680 | 0, 1 | 0) | 0;
 }
 
 function $719($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15128 | 0) | 0 | 0);
 }
 
 function $720() {
  $771(16688 | 0, 1 | 0) | 0;
 }
 
 function $721($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15136 | 0) | 0 | 0);
 }
 
 function $722() {
  $772(16696 | 0, 1 | 0) | 0;
 }
 
 function $723($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15144 | 0) | 0 | 0);
 }
 
 function $724() {
  $773(16704 | 0, 1 | 0) | 0;
 }
 
 function $725($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15152 | 0) | 0 | 0);
 }
 
 function $726() {
  $774(16712 | 0, 1 | 0) | 0;
 }
 
 function $727($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15160 | 0) | 0 | 0);
 }
 
 function $728() {
  $775(16720 | 0, 1 | 0) | 0;
 }
 
 function $729($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15168 | 0) | 0 | 0);
 }
 
 function $730() {
  $776(16728 | 0, 1 | 0) | 0;
 }
 
 function $731($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15176 | 0) | 0 | 0);
 }
 
 function $732() {
  $777(16736 | 0, 1 | 0) | 0;
 }
 
 function $733($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15184 | 0) | 0 | 0);
 }
 
 function $734() {
  $778(16744 | 0, 1 | 0) | 0;
 }
 
 function $735($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15096 | 0) | 0 | 0);
 }
 
 function $736() {
  $779(16760 | 0, 1 | 0) | 0;
 }
 
 function $737($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15104 | 0) | 0 | 0);
 }
 
 function $738() {
  $780(16776 | 0, 1 | 0) | 0;
 }
 
 function $739($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15112 | 0) | 0 | 0);
 }
 
 function $740() {
  $781(16792 | 0, 1 | 0) | 0;
 }
 
 function $741($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15120 | 0) | 0 | 0);
 }
 
 function $742() {
  $782(16808 | 0, 1 | 0) | 0;
 }
 
 function $743($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15192 | 0) | 0 | 0);
 }
 
 function $744() {
  $783(16816 | 0, 1 | 0) | 0;
 }
 
 function $745($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $755($0_1 | 0, $1_1 | 0, $754(15200 | 0) | 0 | 0);
 }
 
 function $746($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 6944 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $747($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1002($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  $1003($0_1 + 8 | 0 | 0, $1_1 + 12 | 0 | 0, $1_1 + 8 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $748($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   if (($1004($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $173($0_1 | 0);
   abort();
  }
  $2_1 = $1006($1005($0_1 | 0) | 0 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[($1007($0_1 | 0) | 0) >> 2] = $2_1 + ($1_1 << 2 | 0) | 0;
  $1008($0_1 | 0, 0 | 0);
 }
 
 function $749($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1009($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label$1 : while (1) {
   label$2 : {
    if (($1_1 | 0) != ($4_1 | 0)) {
     break label$2
    }
    $1010($3_1 | 0) | 0;
    global$0 = $2_1 + 16 | 0;
    return;
   }
   $1012($1005($0_1 | 0) | 0 | 0, $1011($1_1 | 0) | 0 | 0);
   $1_1 = $1_1 + 4 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   continue label$1;
  };
 }
 
 function $750($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $751($0_1) {
  $0_1 = $0_1 | 0;
  $1056($0_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0);
 }
 
 function $752($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1025($0_1 | 0, $1023($0_1 | 0) | 0 | 0, ($1023($0_1 | 0) | 0) + (($1024($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1023($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0, ($1023($0_1 | 0) | 0) + (($750($0_1 | 0) | 0) << 2 | 0) | 0 | 0);
 }
 
 function $753($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $754($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = 12;
  i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $816($0_1 | 0, $815($1_1 + 16 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0 | 0);
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  global$0 = $1_1 + 32 | 0;
  return $0_1 + -1 | 0 | 0;
 }
 
 function $755($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $786($1_1 | 0);
  $4_1 = $790($3_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  label$1 : {
   $1_1 = $0_1 + 8 | 0;
   if (($750($1_1 | 0) | 0) >>> 0 > $2_1 >>> 0) {
    break label$1
   }
   $793($1_1 | 0, $2_1 + 1 | 0 | 0);
  }
  label$2 : {
   if (!(HEAP32[($785($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0)) {
    break label$2
   }
   $794(HEAP32[($785($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0 | 0) | 0;
  }
  $0_1 = $795($4_1 | 0) | 0;
  HEAP32[($785($1_1 | 0, $2_1 | 0) | 0) >> 2] = $0_1;
  $791($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $756($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 8580;
  return $0_1 | 0;
 }
 
 function $757($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 8612;
  return $0_1 | 0;
 }
 
 function $758($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $687($0_1 | 0, $3_1 | 0) | 0;
  $840($0_1 | 0) | 0;
  HEAP8[($0_1 + 12 | 0) >> 0] = $2_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 7276;
  label$1 : {
   if ($1_1) {
    break label$1
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = $826() | 0;
  }
  return $0_1 | 0;
 }
 
 function $759($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  $840($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 7760;
  return $0_1 | 0;
 }
 
 function $760($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  $861($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 7908;
  return $0_1 | 0;
 }
 
 function $761($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  $861($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 7328;
  HEAP32[($0_1 + 8 | 0) >> 2] = $260() | 0;
  return $0_1 | 0;
 }
 
 function $762($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  $861($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 8056;
  return $0_1 | 0;
 }
 
 function $763($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  $861($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 8172;
  return $0_1 | 0;
 }
 
 function $764($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  HEAP16[($0_1 + 8 | 0) >> 1] = 11310;
  HEAP32[$0_1 >> 2] = 7376;
  $224($0_1 + 12 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $765($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 46;
  HEAP32[($0_1 + 12 | 0) >> 2] = 44;
  HEAP32[$0_1 >> 2] = 7416;
  $224($0_1 + 16 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $766($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 8644;
  return $0_1 | 0;
 }
 
 function $767($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 8888;
  return $0_1 | 0;
 }
 
 function $768($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 9100;
  return $0_1 | 0;
 }
 
 function $769($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 9332;
  return $0_1 | 0;
 }
 
 function $770($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  $1060($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 10316;
  return $0_1 | 0;
 }
 
 function $771($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  $1060($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 10464;
  return $0_1 | 0;
 }
 
 function $772($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  $1060($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 10580;
  return $0_1 | 0;
 }
 
 function $773($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  $1060($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 10696;
  return $0_1 | 0;
 }
 
 function $774($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  $1061($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 10812;
  return $0_1 | 0;
 }
 
 function $775($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  $1062($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 10976;
  return $0_1 | 0;
 }
 
 function $776($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  $1063($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 11140;
  return $0_1 | 0;
 }
 
 function $777($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  $1064($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 11304;
  return $0_1 | 0;
 }
 
 function $778($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  $1_1 = $1065($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 9532;
  HEAP32[$1_1 >> 2] = 9580;
  return $0_1 | 0;
 }
 
 function $779($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  $1_1 = $1066($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 9796;
  HEAP32[$1_1 >> 2] = 9844;
  return $0_1 | 0;
 }
 
 function $780($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  $1067($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 10032;
  return $0_1 | 0;
 }
 
 function $781($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  $1067($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 10188;
  return $0_1 | 0;
 }
 
 function $782($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  $1068($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 11468;
  return $0_1 | 0;
 }
 
 function $783($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $687($0_1 | 0, $1_1 | 0) | 0;
  $1068($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 11588;
  return $0_1 | 0;
 }
 
 function $784() {
  label$1 : {
   if ((HEAPU8[(0 + 15224 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(15224 | 0) | 0)) {
    break label$1
   }
   $787() | 0;
   HEAP32[(0 + 15220 | 0) >> 2] = 15216;
   $1411(15224 | 0);
  }
  return HEAP32[(0 + 15220 | 0) >> 2] | 0 | 0;
 }
 
 function $785($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $786($0_1) {
  $0_1 = $0_1 | 0;
  $788($0_1 + 4 | 0 | 0) | 0;
 }
 
 function $787() {
  $809();
  HEAP32[(0 + 15216 | 0) >> 2] = 16824;
  return 15216 | 0;
 }
 
 function $788($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $789($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($806($0_1 | 0, $1_1 | 0) | 0) {
    break label$1
   }
   $807();
   abort();
  }
  return HEAP32[($808($0_1 + 8 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $790($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $792($0_1 | 0, $2_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $791($0_1) {
  $0_1 = $0_1 | 0;
  $796($0_1 | 0);
  return $0_1 | 0;
 }
 
 function $792($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1072($0_1 | 0, $1071($1_1 | 0) | 0 | 0) | 0;
  $25($2_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $793($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $2_1 = $750($0_1 | 0) | 0;
   if ($2_1 >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $803($0_1 | 0, $1_1 - $2_1 | 0 | 0);
   return;
  }
  label$2 : {
   if ($2_1 >>> 0 <= $1_1 >>> 0) {
    break label$2
   }
   $804($0_1 | 0, (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0);
  }
 }
 
 function $794($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = $799($0_1 + 4 | 0 | 0) | 0;
   if (($1_1 | 0) != (-1 | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1);
  }
  return ($1_1 | 0) == (-1 | 0) | 0;
 }
 
 function $795($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($805($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($805($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $796($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($805($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($805($0_1 | 0) | 0) >> 2] = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1073($1_1 | 0);
  }
 }
 
 function $797($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  HEAP32[$0_1 >> 2] = 7256;
  $1_1 = $0_1 + 8 | 0;
  $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if ($2_1 >>> 0 >= ($750($1_1 | 0) | 0) >>> 0) {
     break label$1
    }
    label$3 : {
     if (!(HEAP32[($785($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0)) {
      break label$3
     }
     $794(HEAP32[($785($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0 | 0) | 0;
    }
    $2_1 = $2_1 + 1 | 0;
    continue label$2;
   };
  }
  $1371($0_1 + 152 | 0 | 0) | 0;
  $798($1_1 | 0) | 0;
  $187($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $798($0_1) {
  $0_1 = $0_1 | 0;
  $800($0_1 | 0);
  $801($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $799($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + -1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $800($0_1) {
  $0_1 = $0_1 | 0;
  $1025($0_1 | 0, $1023($0_1 | 0) | 0 | 0, ($1023($0_1 | 0) | 0) + (($1024($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1023($0_1 | 0) | 0) + (($750($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1023($0_1 | 0) | 0) + (($1024($0_1 | 0) | 0) << 2 | 0) | 0 | 0);
 }
 
 function $801($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    break label$1
   }
   $751($0_1 | 0);
   $1055($1005($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $1039($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $802($0_1) {
  $0_1 = $0_1 | 0;
  $1303($797($0_1 | 0) | 0 | 0);
 }
 
 function $803($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ((((HEAP32[($1007($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >> 2 | 0) >>> 0 < $1_1 >>> 0) {
     break label$2
    }
    $749($0_1 | 0, $1_1 | 0);
    break label$1;
   }
   $3_1 = $1005($0_1 | 0) | 0;
   $3_1 = $1075($2_1 + 8 | 0 | 0, $1069($0_1 | 0, ($750($0_1 | 0) | 0) + $1_1 | 0 | 0) | 0 | 0, $750($0_1 | 0) | 0 | 0, $3_1 | 0) | 0;
   $1076($3_1 | 0, $1_1 | 0);
   $1077($0_1 | 0, $3_1 | 0);
   $1078($3_1 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $804($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $1070($0_1 | 0, $1_1 | 0);
  $2_1 = $750($0_1 | 0) | 0;
  $1056($0_1 | 0, $1_1 | 0);
  $752($0_1 | 0, $2_1 | 0);
 }
 
 function $805($0_1) {
  $0_1 = $0_1 | 0;
  return $1074($0_1 | 0) | 0 | 0;
 }
 
 function $806($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   $0_1 = $0_1 + 8 | 0;
   if (($750($0_1 | 0) | 0) >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   $2_1 = (HEAP32[($808($0_1 | 0, $1_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0);
  }
  return $2_1 | 0;
 }
 
 function $807() {
  fimport$1();
  abort();
 }
 
 function $808($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $809() {
  $686(16824 | 0, 1 | 0) | 0;
 }
 
 function $810() {
  $811(15228 | 0, $784() | 0 | 0) | 0;
  return 15228 | 0;
 }
 
 function $811($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $786($1_1 | 0);
  return $0_1 | 0;
 }
 
 function $812() {
  label$1 : {
   if ((HEAPU8[(0 + 15236 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(15236 | 0) | 0)) {
    break label$1
   }
   $810() | 0;
   HEAP32[(0 + 15232 | 0) >> 2] = 15228;
   $1411(15236 | 0);
  }
  return HEAP32[(0 + 15232 | 0) >> 2] | 0 | 0;
 }
 
 function $813($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($812() | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $786($1_1 | 0);
  return $0_1 | 0;
 }
 
 function $814($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $823() | 0;
 }
 
 function $815($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[$0_1 >> 2] = $2_1;
  return $0_1 | 0;
 }
 
 function $816($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (($819($0_1 | 0) | 0 | 0) == (-1 | 0)) {
    break label$1
   }
   $821($2_1 | 0, $820($2_1 + 8 | 0 | 0, $1_1 | 0) | 0 | 0) | 0;
   $1395($0_1 | 0, $2_1 | 0, 13 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $817($0_1) {
  $0_1 = $0_1 | 0;
  $1303($187($0_1 | 0) | 0 | 0);
 }
 
 function $818($0_1) {
  $0_1 = $0_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1);
 }
 
 function $819($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $820($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1098($0_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $821($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $822($0_1) {
  $0_1 = $0_1 | 0;
  $1099($0_1 | 0);
 }
 
 function $823() {
  var $0_1 = 0;
  $0_1 = (HEAP32[(0 + 15240 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 15240 | 0) >> 2] = $0_1;
  return $0_1 | 0;
 }
 
 function $824($0_1) {
  $0_1 = $0_1 | 0;
  $187($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $825($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 > 127 >>> 0) {
    break label$1
   }
   $3_1 = ((HEAPU16[(($826() | 0) + ($2_1 << 1 | 0) | 0) >> 1] | 0) & $1_1 | 0 | 0) != (0 | 0);
  }
  return $3_1 | 0;
 }
 
 function $826() {
  return HEAP32[($158() | 0) >> 2] | 0 | 0;
 }
 
 function $827($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $4_1 = 0;
    label$3 : {
     if ((HEAP32[$1_1 >> 2] | 0) >>> 0 > 127 >>> 0) {
      break label$3
     }
     $4_1 = HEAPU16[(($826() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 1 | 0) | 0) >> 1] | 0;
    }
    HEAP16[$3_1 >> 1] = $4_1;
    $3_1 = $3_1 + 2 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $828($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     if (($2_1 | 0) == ($3_1 | 0)) {
      break label$3
     }
     if ((HEAP32[$2_1 >> 2] | 0) >>> 0 > 127 >>> 0) {
      break label$2
     }
     if (!((HEAPU16[(($826() | 0) + ((HEAP32[$2_1 >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & $1_1 | 0)) {
      break label$2
     }
     $3_1 = $2_1;
    }
    return $3_1 | 0;
   }
   $2_1 = $2_1 + 4 | 0;
   continue label$1;
  };
 }
 
 function $829($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$1
    }
    label$3 : {
     if ((HEAP32[$2_1 >> 2] | 0) >>> 0 > 127 >>> 0) {
      break label$3
     }
     if (!((HEAPU16[(($826() | 0) + ((HEAP32[$2_1 >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & $1_1 | 0)) {
      break label$3
     }
     $2_1 = $2_1 + 4 | 0;
     continue label$2;
    }
    break label$2;
   };
   $3_1 = $2_1;
  }
  return $3_1 | 0;
 }
 
 function $830($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 > 127 >>> 0) {
    break label$1
   }
   $1_1 = HEAP32[(($831() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $831() {
  return HEAP32[($159() | 0) >> 2] | 0 | 0;
 }
 
 function $832($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if ($3_1 >>> 0 > 127 >>> 0) {
      break label$3
     }
     $3_1 = HEAP32[(($831() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $833($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 > 127 >>> 0) {
    break label$1
   }
   $1_1 = HEAP32[(($834() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $834() {
  return HEAP32[($160() | 0) >> 2] | 0 | 0;
 }
 
 function $835($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if ($3_1 >>> 0 > 127 >>> 0) {
      break label$3
     }
     $3_1 = HEAP32[(($834() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $836($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $837($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    HEAP32[$3_1 >> 2] = HEAP8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $838($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (($1_1 >>> 0 < 128 >>> 0 ? $1_1 : $2_1) << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $839($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $5_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP8[$4_1 >> 0] = $5_1 >>> 0 < 128 >>> 0 ? $5_1 : $3_1;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $840($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $841($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 7276;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 255 | 0)) {
    break label$1
   }
   $1304($1_1 | 0);
  }
  $187($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $842($0_1) {
  $0_1 = $0_1 | 0;
  $1303($841($0_1 | 0) | 0 | 0);
 }
 
 function $843($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[(($831() | 0) + (($1_1 & 255 | 0) << 2 | 0) | 0) >> 2] | 0;
  }
  return ($1_1 << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $844($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP8[$1_1 >> 0] | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break label$3
     }
     $3_1 = HEAP32[(($831() | 0) + ((HEAP8[$1_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP8[$1_1 >> 0] = $3_1;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $845($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1_1 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[(($834() | 0) + (($1_1 & 255 | 0) << 2 | 0) | 0) >> 2] | 0;
  }
  return ($1_1 << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $846($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $3_1 = HEAP8[$1_1 >> 0] | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break label$3
     }
     $3_1 = HEAP32[(($834() | 0) + ((HEAP8[$1_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP8[$1_1 >> 0] = $3_1;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $847($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $848($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $849($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (($1_1 | 0) > (-1 | 0) ? $1_1 : $2_1) | 0;
 }
 
 function $850($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $5_1 = HEAP8[$1_1 >> 0] | 0;
    HEAP8[$4_1 >> 0] = ($5_1 | 0) > (-1 | 0) ? $5_1 : $3_1;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label$2;
   };
  }
  return $2_1 | 0;
 }
 
 function $851($0_1) {
  $0_1 = $0_1 | 0;
  $187($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $852($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$7_1 >> 2] = $5_1;
  return 3 | 0;
 }
 
 function $853($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$7_1 >> 2] = $5_1;
  return 3 | 0;
 }
 
 function $854($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $855($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $856($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $857($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $3_1 - $2_1 | 0;
  $3_1 = HEAP32[($858($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $858($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $859($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $859($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $53($2_1 + 8 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $860($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $861($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $862($0_1) {
  $0_1 = $0_1 | 0;
  $1303($685($0_1 | 0) | 0 | 0);
 }
 
 function $863($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $9_1 = $2_1;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($9_1 | 0) != ($3_1 | 0)) {
      break label$3
     }
     $9_1 = $3_1;
     break label$1;
    }
    if (!(HEAP32[$9_1 >> 2] | 0)) {
     break label$1
    }
    $9_1 = $9_1 + 4 | 0;
    continue label$2;
   };
  }
  HEAP32[$7_1 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  label$4 : while (1) {
   label$5 : {
    label$6 : {
     label$7 : {
      if (($2_1 | 0) == ($3_1 | 0)) {
       break label$7
      }
      if (($5_1 | 0) == ($6_1 | 0)) {
       break label$7
      }
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      $10_1 = 1;
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           $11_1 = $864($5_1 | 0, $4_1 | 0, ($9_1 - $2_1 | 0) >> 2 | 0 | 0, $6_1 - $5_1 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
           switch ($11_1 + 1 | 0 | 0) {
           case 0:
            break label$12;
           case 1:
            break label$6;
           default:
            break label$11;
           };
          }
          HEAP32[$7_1 >> 2] = $5_1;
          label$13 : {
           label$14 : while (1) {
            if (($2_1 | 0) == (HEAP32[$4_1 >> 2] | 0 | 0)) {
             break label$13
            }
            $9_1 = $865($5_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, $8_1 + 8 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
            if (($9_1 | 0) == (-1 | 0)) {
             break label$13
            }
            $5_1 = (HEAP32[$7_1 >> 2] | 0) + $9_1 | 0;
            HEAP32[$7_1 >> 2] = $5_1;
            $2_1 = $2_1 + 4 | 0;
            continue label$14;
           };
          }
          HEAP32[$4_1 >> 2] = $2_1;
          break label$10;
         }
         $5_1 = (HEAP32[$7_1 >> 2] | 0) + $11_1 | 0;
         HEAP32[$7_1 >> 2] = $5_1;
         if (($5_1 | 0) == ($6_1 | 0)) {
          break label$8
         }
         label$15 : {
          if (($9_1 | 0) != ($3_1 | 0)) {
           break label$15
          }
          $2_1 = HEAP32[$4_1 >> 2] | 0;
          $9_1 = $3_1;
          continue label$4;
         }
         $9_1 = $865($8_1 + 4 | 0 | 0, 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
         if (($9_1 | 0) != (-1 | 0)) {
          break label$9
         }
        }
        $10_1 = 2;
        break label$6;
       }
       $2_1 = $8_1 + 4 | 0;
       label$16 : {
        if ($9_1 >>> 0 <= ($6_1 - (HEAP32[$7_1 >> 2] | 0) | 0) >>> 0) {
         break label$16
        }
        $10_1 = 1;
        break label$6;
       }
       label$17 : {
        label$18 : while (1) {
         if (!$9_1) {
          break label$17
         }
         $5_1 = HEAPU8[$2_1 >> 0] | 0;
         $10_1 = HEAP32[$7_1 >> 2] | 0;
         HEAP32[$7_1 >> 2] = $10_1 + 1 | 0;
         HEAP8[$10_1 >> 0] = $5_1;
         $9_1 = $9_1 + -1 | 0;
         $2_1 = $2_1 + 1 | 0;
         continue label$18;
        };
       }
       $2_1 = (HEAP32[$4_1 >> 2] | 0) + 4 | 0;
       HEAP32[$4_1 >> 2] = $2_1;
       $9_1 = $2_1;
       label$19 : while (1) {
        label$20 : {
         if (($9_1 | 0) != ($3_1 | 0)) {
          break label$20
         }
         $9_1 = $3_1;
         break label$5;
        }
        if (!(HEAP32[$9_1 >> 2] | 0)) {
         break label$5
        }
        $9_1 = $9_1 + 4 | 0;
        continue label$19;
       };
      }
      $2_1 = HEAP32[$4_1 >> 2] | 0;
     }
     $10_1 = ($2_1 | 0) != ($3_1 | 0);
    }
    global$0 = $8_1 + 16 | 0;
    return $10_1 | 0;
   }
   $5_1 = HEAP32[$7_1 >> 2] | 0;
   continue label$4;
  };
 }
 
 function $864($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
  $5_1 = $268($6_1 + 8 | 0 | 0, $6_1 + 12 | 0 | 0) | 0;
  $0_1 = $162($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $269($5_1 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $865($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $268($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $66($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $269($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $866($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $9_1 = $2_1;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($9_1 | 0) != ($3_1 | 0)) {
      break label$3
     }
     $9_1 = $3_1;
     break label$1;
    }
    if (!(HEAPU8[$9_1 >> 0] | 0)) {
     break label$1
    }
    $9_1 = $9_1 + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[$7_1 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  label$4 : while (1) {
   label$5 : {
    label$6 : {
     label$7 : {
      if (($2_1 | 0) == ($3_1 | 0)) {
       break label$7
      }
      if (($5_1 | 0) == ($6_1 | 0)) {
       break label$7
      }
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           $10_1 = $867($5_1 | 0, $4_1 | 0, $9_1 - $2_1 | 0 | 0, ($6_1 - $5_1 | 0) >> 2 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
           if (($10_1 | 0) != (-1 | 0)) {
            break label$12
           }
           label$13 : {
            label$14 : while (1) {
             HEAP32[$7_1 >> 2] = $5_1;
             if (($2_1 | 0) == (HEAP32[$4_1 >> 2] | 0 | 0)) {
              break label$13
             }
             $6_1 = 1;
             label$15 : {
              label$16 : {
               label$17 : {
                $5_1 = $868($5_1 | 0, $2_1 | 0, $9_1 - $2_1 | 0 | 0, $8_1 + 8 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
                switch ($5_1 + 2 | 0 | 0) {
                case 2:
                 break label$15;
                case 1:
                 break label$17;
                case 0:
                 break label$9;
                default:
                 break label$16;
                };
               }
               HEAP32[$4_1 >> 2] = $2_1;
               break label$11;
              }
              $6_1 = $5_1;
             }
             $2_1 = $2_1 + $6_1 | 0;
             $5_1 = (HEAP32[$7_1 >> 2] | 0) + 4 | 0;
             continue label$14;
            };
           }
           HEAP32[$4_1 >> 2] = $2_1;
           break label$7;
          }
          $5_1 = (HEAP32[$7_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0;
          HEAP32[$7_1 >> 2] = $5_1;
          if (($5_1 | 0) == ($6_1 | 0)) {
           break label$8
          }
          $2_1 = HEAP32[$4_1 >> 2] | 0;
          label$18 : {
           if (($9_1 | 0) != ($3_1 | 0)) {
            break label$18
           }
           $9_1 = $3_1;
           continue label$4;
          }
          if (!($868($5_1 | 0, $2_1 | 0, 1 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
           break label$10
          }
         }
         $9_1 = 2;
         break label$6;
        }
        HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + 4 | 0;
        $2_1 = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
        HEAP32[$4_1 >> 2] = $2_1;
        $9_1 = $2_1;
        label$19 : while (1) {
         label$20 : {
          if (($9_1 | 0) != ($3_1 | 0)) {
           break label$20
          }
          $9_1 = $3_1;
          break label$5;
         }
         if (!(HEAPU8[$9_1 >> 0] | 0)) {
          break label$5
         }
         $9_1 = $9_1 + 1 | 0;
         continue label$19;
        };
       }
       HEAP32[$4_1 >> 2] = $2_1;
       $9_1 = 1;
       break label$6;
      }
      $2_1 = HEAP32[$4_1 >> 2] | 0;
     }
     $9_1 = ($2_1 | 0) != ($3_1 | 0);
    }
    global$0 = $8_1 + 16 | 0;
    return $9_1 | 0;
   }
   $5_1 = HEAP32[$7_1 >> 2] | 0;
   continue label$4;
  };
 }
 
 function $867($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
  $5_1 = $268($6_1 + 8 | 0 | 0, $6_1 + 12 | 0 | 0) | 0;
  $0_1 = $164($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $269($5_1 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $868($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  $4_1 = $268($5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $0_1 = $134($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $269($4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $869($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  $2_1 = 2;
  label$1 : {
   $1_1 = $865($5_1 + 12 | 0 | 0, 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   if (($1_1 + 1 | 0) >>> 0 < 2 >>> 0) {
    break label$1
   }
   $2_1 = 1;
   $1_1 = $1_1 + -1 | 0;
   if ($1_1 >>> 0 > ($3_1 - (HEAP32[$4_1 >> 2] | 0) | 0) >>> 0) {
    break label$1
   }
   $2_1 = $5_1 + 12 | 0;
   label$2 : while (1) {
    label$3 : {
     if ($1_1) {
      break label$3
     }
     $2_1 = 0;
     break label$1;
    }
    $0_1 = HEAPU8[$2_1 >> 0] | 0;
    $3_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = $0_1;
    $1_1 = $1_1 + -1 | 0;
    $2_1 = $2_1 + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $5_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $870($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = -1;
  label$1 : {
   if ($871(0 | 0, 0 | 0, 4 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0) {
    break label$1
   }
   label$2 : {
    $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if ($0_1) {
     break label$2
    }
    return 1 | 0;
   }
   $1_1 = ($872($0_1 | 0) | 0 | 0) == (1 | 0);
  }
  return $1_1 | 0;
 }
 
 function $871($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $268($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $165($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $269($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $872($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $268($1_1 + 8 | 0 | 0, $1_1 + 12 | 0 | 0) | 0;
  $2_1 = $166() | 0;
  $269($0_1 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $873($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $874($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $5_1 = 0;
  $6_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if ($6_1 >>> 0 >= $4_1 >>> 0) {
     break label$1
    }
    if (($2_1 | 0) == ($3_1 | 0)) {
     break label$1
    }
    $7_1 = 1;
    label$3 : {
     label$4 : {
      $8_1 = $875($2_1 | 0, $3_1 - $2_1 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
      switch ($8_1 + 2 | 0 | 0) {
      case 0:
      case 1:
       break label$1;
      case 2:
       break label$3;
      default:
       break label$4;
      };
     }
     $7_1 = $8_1;
    }
    $6_1 = $6_1 + 1 | 0;
    $5_1 = $7_1 + $5_1 | 0;
    $2_1 = $2_1 + $7_1 | 0;
    continue label$2;
   };
  }
  return $5_1 | 0;
 }
 
 function $875($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $268($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $0_1 = $167($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $269($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $876($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($0_1) {
    break label$1
   }
   return 1 | 0;
  }
  return $872($0_1 | 0) | 0 | 0;
 }
 
 function $877($0_1) {
  $0_1 = $0_1 | 0;
  $187($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $878($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $5_1 = $879($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $879($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!($7_1 & 2 | 0)) {
     break label$2
    }
    $0_1 = 1;
    if (($4_1 - $3_1 | 0 | 0) < (3 | 0)) {
     break label$1
    }
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 239;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 187;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 191;
   }
   $7_1 = HEAP32[$2_1 >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     label$5 : {
      if ($7_1 >>> 0 < $1_1 >>> 0) {
       break label$5
      }
      $0_1 = 0;
      break label$1;
     }
     $0_1 = 2;
     $3_1 = HEAPU16[$7_1 >> 1] | 0;
     if ($3_1 >>> 0 > $6_1 >>> 0) {
      break label$1
     }
     label$6 : {
      label$7 : {
       label$8 : {
        if ($3_1 >>> 0 > 127 >>> 0) {
         break label$8
        }
        $0_1 = 1;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $7_1 | 0 | 0) < (1 | 0)) {
         break label$1
        }
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1;
        break label$7;
       }
       label$9 : {
        if ($3_1 >>> 0 > 2047 >>> 0) {
         break label$9
        }
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $7_1 | 0 | 0) < (2 | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1 >>> 6 | 0 | 192 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
        break label$7;
       }
       label$10 : {
        if ($3_1 >>> 0 > 55295 >>> 0) {
         break label$10
        }
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $7_1 | 0 | 0) < (3 | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
        break label$7;
       }
       label$11 : {
        if ($3_1 >>> 0 > 56319 >>> 0) {
         break label$11
        }
        $0_1 = 1;
        if (($1_1 - $7_1 | 0 | 0) < (4 | 0)) {
         break label$1
        }
        $8_1 = HEAPU16[($7_1 + 2 | 0) >> 1] | 0;
        if (($8_1 & 64512 | 0 | 0) != (56320 | 0)) {
         break label$6
        }
        if (($4_1 - (HEAP32[$5_1 >> 2] | 0) | 0 | 0) < (4 | 0)) {
         break label$1
        }
        $0_1 = $3_1 & 960 | 0;
        if ((($0_1 << 10 | 0 | (($3_1 << 10 | 0) & 64512 | 0) | 0 | ($8_1 & 1023 | 0) | 0) + 65536 | 0) >>> 0 > $6_1 >>> 0) {
         break label$6
        }
        HEAP32[$2_1 >> 2] = $7_1 + 2 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        $0_1 = ($0_1 >>> 6 | 0) + 1 | 0;
        HEAP8[$7_1 >> 0] = $0_1 >>> 2 | 0 | 240 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = ($0_1 << 4 | 0) & 48 | 0 | (($3_1 >>> 2 | 0) & 15 | 0) | 0 | 128 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = ($8_1 >>> 6 | 0) & 15 | 0 | (($3_1 << 4 | 0) & 48 | 0) | 0 | 128 | 0;
        $3_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
        HEAP8[$3_1 >> 0] = $8_1 & 63 | 0 | 128 | 0;
        break label$7;
       }
       if ($3_1 >>> 0 < 57344 >>> 0) {
        break label$1
       }
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $7_1 | 0 | 0) < (3 | 0)) {
        break label$3
       }
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
      }
      $7_1 = (HEAP32[$2_1 >> 2] | 0) + 2 | 0;
      HEAP32[$2_1 >> 2] = $7_1;
      continue label$4;
     }
     break label$4;
    };
    return 2 | 0;
   }
   return 1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $880($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $5_1 = $881($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $881($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $184_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   if (!($7_1 & 4 | 0)) {
    break label$1
   }
   $7_1 = HEAP32[$2_1 >> 2] | 0;
   if (($1_1 - $7_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   if ((HEAPU8[($7_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   if ((HEAPU8[($7_1 + 2 | 0) >> 0] | 0 | 0) != (191 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = $7_1 + 3 | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : while (1) {
       $3_1 = HEAP32[$2_1 >> 2] | 0;
       if ($3_1 >>> 0 >= $1_1 >>> 0) {
        break label$5
       }
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       if ($0_1 >>> 0 >= $4_1 >>> 0) {
        break label$5
       }
       $8_1 = 2;
       $7_1 = HEAPU8[$3_1 >> 0] | 0;
       if ($7_1 >>> 0 > $6_1 >>> 0) {
        break label$2
       }
       label$7 : {
        label$8 : {
         if ((($7_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0)) {
          break label$8
         }
         HEAP16[$0_1 >> 1] = $7_1;
         $7_1 = $3_1 + 1 | 0;
         break label$7;
        }
        if ($7_1 >>> 0 < 194 >>> 0) {
         break label$2
        }
        label$9 : {
         if ($7_1 >>> 0 > 223 >>> 0) {
          break label$9
         }
         if (($1_1 - $3_1 | 0 | 0) < (2 | 0)) {
          break label$3
         }
         $9_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
         if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$4
         }
         $8_1 = 2;
         $7_1 = $9_1 & 63 | 0 | (($7_1 << 6 | 0) & 1984 | 0) | 0;
         if ($7_1 >>> 0 > $6_1 >>> 0) {
          break label$4
         }
         HEAP16[$0_1 >> 1] = $7_1;
         $7_1 = $3_1 + 2 | 0;
         break label$7;
        }
        label$10 : {
         if ($7_1 >>> 0 > 239 >>> 0) {
          break label$10
         }
         if (($1_1 - $3_1 | 0 | 0) < (3 | 0)) {
          break label$3
         }
         $10_1 = HEAPU8[($3_1 + 2 | 0) >> 0] | 0;
         $9_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
         label$11 : {
          label$12 : {
           label$13 : {
            if (($7_1 | 0) == (237 | 0)) {
             break label$13
            }
            if (($7_1 | 0) != (224 | 0)) {
             break label$12
            }
            if (($9_1 & 224 | 0 | 0) == (160 | 0)) {
             break label$11
            }
            break label$4;
           }
           if (($9_1 & 224 | 0 | 0) == (128 | 0)) {
            break label$11
           }
           break label$4;
          }
          if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
           break label$4
          }
         }
         if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$4
         }
         $8_1 = 2;
         $7_1 = ($9_1 & 63 | 0) << 6 | 0 | ($7_1 << 12 | 0) | 0 | ($10_1 & 63 | 0) | 0;
         if (($7_1 & 65535 | 0) >>> 0 > $6_1 >>> 0) {
          break label$4
         }
         HEAP16[$0_1 >> 1] = $7_1;
         $7_1 = $3_1 + 3 | 0;
         break label$7;
        }
        if ($7_1 >>> 0 > 244 >>> 0) {
         break label$2
        }
        $8_1 = 1;
        if (($1_1 - $3_1 | 0 | 0) < (4 | 0)) {
         break label$4
        }
        $10_1 = HEAPU8[($3_1 + 3 | 0) >> 0] | 0;
        $9_1 = HEAPU8[($3_1 + 2 | 0) >> 0] | 0;
        $3_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
        label$14 : {
         label$15 : {
          switch ($7_1 + -240 | 0 | 0) {
          case 0:
           if ((($3_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
            break label$2
           }
           break label$14;
          case 4:
           if (($3_1 & 240 | 0 | 0) != (128 | 0)) {
            break label$2
           }
           break label$14;
          default:
           break label$15;
          };
         }
         if (($3_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$2
         }
        }
        if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        if (($4_1 - $0_1 | 0 | 0) < (4 | 0)) {
         break label$4
        }
        $8_1 = 2;
        $7_1 = $7_1 & 7 | 0;
        $11_1 = $9_1 << 6 | 0;
        $10_1 = $10_1 & 63 | 0;
        if ((($3_1 << 12 | 0) & 258048 | 0 | ($7_1 << 18 | 0) | 0 | ($11_1 & 4032 | 0) | 0 | $10_1 | 0) >>> 0 > $6_1 >>> 0) {
         break label$4
        }
        $184_1 = $7_1 << 8 | 0;
        $7_1 = $3_1 << 2 | 0;
        HEAP16[$0_1 >> 1] = ($184_1 | ($7_1 & 192 | 0) | 0 | ($7_1 & 60 | 0) | 0 | (($9_1 >>> 4 | 0) & 3 | 0) | 0) + 16320 | 0 | 55296 | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 2 | 0;
        HEAP16[($0_1 + 2 | 0) >> 1] = $11_1 & 960 | 0 | $10_1 | 0 | 56320 | 0;
        $7_1 = (HEAP32[$2_1 >> 2] | 0) + 4 | 0;
       }
       HEAP32[$2_1 >> 2] = $7_1;
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 2 | 0;
       continue label$6;
      };
     }
     $8_1 = $3_1 >>> 0 < $1_1 >>> 0;
    }
    return $8_1 | 0;
   }
   return 1 | 0;
  }
  return 2 | 0;
 }
 
 function $882($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $883($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $884($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $885($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $886($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $886($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $9_1 = 0;
  $5_1 = $0_1;
  label$1 : {
   if (!($4_1 & 4 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   $5_1 = $0_1 + ((HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) == (191 | 0) ? 3 : 0) | 0;
  }
  $6_1 = 0;
  label$2 : {
   label$3 : while (1) {
    if ($5_1 >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    $4_1 = HEAPU8[$5_1 >> 0] | 0;
    if ($4_1 >>> 0 > $3_1 >>> 0) {
     break label$2
    }
    label$4 : {
     label$5 : {
      if ((($4_1 << 24 | 0) >> 24 | 0 | 0) < (0 | 0)) {
       break label$5
      }
      $5_1 = $5_1 + 1 | 0;
      break label$4;
     }
     if ($4_1 >>> 0 < 194 >>> 0) {
      break label$2
     }
     label$6 : {
      if ($4_1 >>> 0 > 223 >>> 0) {
       break label$6
      }
      if (($1_1 - $5_1 | 0 | 0) < (2 | 0)) {
       break label$2
      }
      $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
      if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
       break label$2
      }
      if (($7_1 & 63 | 0 | (($4_1 << 6 | 0) & 1984 | 0) | 0) >>> 0 > $3_1 >>> 0) {
       break label$2
      }
      $5_1 = $5_1 + 2 | 0;
      break label$4;
     }
     label$7 : {
      label$8 : {
       label$9 : {
        if ($4_1 >>> 0 > 239 >>> 0) {
         break label$9
        }
        if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
         break label$2
        }
        $7_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
        $8_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        if (($4_1 | 0) == (237 | 0)) {
         break label$8
        }
        label$10 : {
         if (($4_1 | 0) != (224 | 0)) {
          break label$10
         }
         if (($8_1 & 224 | 0 | 0) == (160 | 0)) {
          break label$7
         }
         break label$2;
        }
        if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        break label$7;
       }
       if ($4_1 >>> 0 > 244 >>> 0) {
        break label$2
       }
       if (($1_1 - $5_1 | 0 | 0) < (4 | 0)) {
        break label$2
       }
       if (($2_1 - $6_1 | 0) >>> 0 < 2 >>> 0) {
        break label$2
       }
       $9_1 = HEAPU8[($5_1 + 3 | 0) >> 0] | 0;
       $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
       $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
       label$11 : {
        label$12 : {
         switch ($4_1 + -240 | 0 | 0) {
         case 0:
          if ((($7_1 + 112 | 0) & 255 | 0) >>> 0 < 48 >>> 0) {
           break label$11
          }
          break label$2;
         case 4:
          if (($7_1 & 240 | 0 | 0) == (128 | 0)) {
           break label$11
          }
          break label$2;
         default:
          break label$12;
         };
        }
        if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
       }
       if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if ((($7_1 & 63 | 0) << 12 | 0 | (($4_1 << 18 | 0) & 1835008 | 0) | 0 | (($8_1 << 6 | 0) & 4032 | 0) | 0 | ($9_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
        break label$2
       }
       $5_1 = $5_1 + 4 | 0;
       $6_1 = $6_1 + 1 | 0;
       break label$4;
      }
      if (($8_1 & 224 | 0 | 0) != (128 | 0)) {
       break label$2
      }
     }
     if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
      break label$2
     }
     if ((($8_1 & 63 | 0) << 6 | 0 | (($4_1 << 12 | 0) & 61440 | 0) | 0 | ($7_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
      break label$2
     }
     $5_1 = $5_1 + 3 | 0;
    }
    $6_1 = $6_1 + 1 | 0;
    continue label$3;
   };
  }
  return $5_1 - $0_1 | 0 | 0;
 }
 
 function $887($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $888($0_1) {
  $0_1 = $0_1 | 0;
  $187($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $889($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $5_1 = $890($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $890($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!($7_1 & 2 | 0)) {
     break label$2
    }
    $7_1 = 1;
    if (($4_1 - $3_1 | 0 | 0) < (3 | 0)) {
     break label$1
    }
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 239;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 187;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 191;
   }
   $3_1 = HEAP32[$2_1 >> 2] | 0;
   label$3 : while (1) {
    label$4 : {
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$4
     }
     $7_1 = 0;
     break label$1;
    }
    $7_1 = 2;
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    if (($3_1 & -2048 | 0 | 0) == (55296 | 0)) {
     break label$1
    }
    if ($3_1 >>> 0 > $6_1 >>> 0) {
     break label$1
    }
    label$5 : {
     label$6 : {
      label$7 : {
       if ($3_1 >>> 0 > 127 >>> 0) {
        break label$7
       }
       $7_1 = 1;
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $0_1 | 0 | 0) < (1 | 0)) {
        break label$1
       }
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = $3_1;
       break label$6;
      }
      label$8 : {
       if ($3_1 >>> 0 > 2047 >>> 0) {
        break label$8
       }
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $7_1 | 0 | 0) < (2 | 0)) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 >>> 6 | 0 | 192 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
       break label$6;
      }
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      $0_1 = $4_1 - $7_1 | 0;
      label$9 : {
       if ($3_1 >>> 0 > 65535 >>> 0) {
        break label$9
       }
       if (($0_1 | 0) < (3 | 0)) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
       break label$6;
      }
      if (($0_1 | 0) < (4 | 0)) {
       break label$5
      }
      HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
      HEAP8[$7_1 >> 0] = $3_1 >>> 18 | 0 | 240 | 0;
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
      HEAP8[$7_1 >> 0] = ($3_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
      HEAP8[$7_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      $7_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
      HEAP8[$7_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
     }
     $3_1 = (HEAP32[$2_1 >> 2] | 0) + 4 | 0;
     HEAP32[$2_1 >> 2] = $3_1;
     continue label$3;
    }
    break label$3;
   };
   return 1 | 0;
  }
  return $7_1 | 0;
 }
 
 function $891($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $5_1;
  $5_1 = $892($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $892($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $10_1 = 0, $11_1 = 0, $9_1 = 0, $8_1 = 0, $12_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  label$1 : {
   if (!($7_1 & 4 | 0)) {
    break label$1
   }
   $7_1 = HEAP32[$2_1 >> 2] | 0;
   if (($1_1 - $7_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   if ((HEAPU8[($7_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   if ((HEAPU8[($7_1 + 2 | 0) >> 0] | 0 | 0) != (191 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = $7_1 + 3 | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      $3_1 = HEAP32[$2_1 >> 2] | 0;
      if ($3_1 >>> 0 >= $1_1 >>> 0) {
       break label$4
      }
      $8_1 = HEAP32[$5_1 >> 2] | 0;
      if ($8_1 >>> 0 >= $4_1 >>> 0) {
       break label$4
      }
      $0_1 = HEAP8[$3_1 >> 0] | 0;
      $7_1 = $0_1 & 255 | 0;
      label$6 : {
       label$7 : {
        if (($0_1 | 0) < (0 | 0)) {
         break label$7
        }
        label$8 : {
         if ($7_1 >>> 0 > $6_1 >>> 0) {
          break label$8
         }
         $0_1 = 1;
         break label$6;
        }
        return 2 | 0;
       }
       $9_1 = 2;
       if ($7_1 >>> 0 < 194 >>> 0) {
        break label$3
       }
       label$9 : {
        if ($7_1 >>> 0 > 223 >>> 0) {
         break label$9
        }
        if (($1_1 - $3_1 | 0 | 0) < (2 | 0)) {
         break label$2
        }
        $10_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
        if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$3
        }
        $0_1 = 2;
        $9_1 = 2;
        $7_1 = $10_1 & 63 | 0 | (($7_1 << 6 | 0) & 1984 | 0) | 0;
        if ($7_1 >>> 0 <= $6_1 >>> 0) {
         break label$6
        }
        break label$3;
       }
       label$10 : {
        if ($7_1 >>> 0 > 239 >>> 0) {
         break label$10
        }
        if (($1_1 - $3_1 | 0 | 0) < (3 | 0)) {
         break label$2
        }
        $11_1 = HEAPU8[($3_1 + 2 | 0) >> 0] | 0;
        $10_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
        label$11 : {
         label$12 : {
          label$13 : {
           if (($7_1 | 0) == (237 | 0)) {
            break label$13
           }
           if (($7_1 | 0) != (224 | 0)) {
            break label$12
           }
           if (($10_1 & 224 | 0 | 0) == (160 | 0)) {
            break label$11
           }
           break label$3;
          }
          if (($10_1 & 224 | 0 | 0) == (128 | 0)) {
           break label$11
          }
          break label$3;
         }
         if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
          break label$3
         }
        }
        if (($11_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$3
        }
        $0_1 = 3;
        $7_1 = ($10_1 & 63 | 0) << 6 | 0 | (($7_1 << 12 | 0) & 61440 | 0) | 0 | ($11_1 & 63 | 0) | 0;
        if ($7_1 >>> 0 <= $6_1 >>> 0) {
         break label$6
        }
        break label$3;
       }
       if ($7_1 >>> 0 > 244 >>> 0) {
        break label$3
       }
       if (($1_1 - $3_1 | 0 | 0) < (4 | 0)) {
        break label$2
       }
       $12_1 = HEAPU8[($3_1 + 3 | 0) >> 0] | 0;
       $11_1 = HEAPU8[($3_1 + 2 | 0) >> 0] | 0;
       $10_1 = HEAPU8[($3_1 + 1 | 0) >> 0] | 0;
       label$14 : {
        label$15 : {
         switch ($7_1 + -240 | 0 | 0) {
         case 0:
          if ((($10_1 + 112 | 0) & 255 | 0) >>> 0 < 48 >>> 0) {
           break label$14
          }
          break label$3;
         case 4:
          if (($10_1 & 240 | 0 | 0) == (128 | 0)) {
           break label$14
          }
          break label$3;
         default:
          break label$15;
         };
        }
        if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$3
        }
       }
       if (($11_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$3
       }
       if (($12_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$3
       }
       $0_1 = 4;
       $7_1 = ($10_1 & 63 | 0) << 12 | 0 | (($7_1 << 18 | 0) & 1835008 | 0) | 0 | (($11_1 << 6 | 0) & 4032 | 0) | 0 | ($12_1 & 63 | 0) | 0;
       if ($7_1 >>> 0 > $6_1 >>> 0) {
        break label$3
       }
      }
      HEAP32[$8_1 >> 2] = $7_1;
      HEAP32[$2_1 >> 2] = $3_1 + $0_1 | 0;
      HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 4 | 0;
      continue label$5;
     };
    }
    $9_1 = $3_1 >>> 0 < $1_1 >>> 0;
   }
   return $9_1 | 0;
  }
  return 1 | 0;
 }
 
 function $893($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $894($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $895($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $896($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $897($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $897($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $6_1 = 0, $10_1 = 0;
  $5_1 = $0_1;
  label$1 : {
   if (!($4_1 & 4 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (239 | 0)) {
    break label$1
   }
   $5_1 = $0_1;
   if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break label$1
   }
   $5_1 = $0_1 + ((HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) == (191 | 0) ? 3 : 0) | 0;
  }
  $6_1 = 0;
  label$2 : {
   label$3 : while (1) {
    if ($5_1 >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    $7_1 = HEAP8[$5_1 >> 0] | 0;
    $4_1 = $7_1 & 255 | 0;
    label$4 : {
     label$5 : {
      if (($7_1 | 0) < (0 | 0)) {
       break label$5
      }
      $7_1 = 1;
      if ($4_1 >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      break label$2;
     }
     if ($4_1 >>> 0 < 194 >>> 0) {
      break label$2
     }
     label$6 : {
      if ($4_1 >>> 0 > 223 >>> 0) {
       break label$6
      }
      if (($1_1 - $5_1 | 0 | 0) < (2 | 0)) {
       break label$2
      }
      $8_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
      if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
       break label$2
      }
      $7_1 = 2;
      if (($8_1 & 63 | 0 | (($4_1 << 6 | 0) & 1984 | 0) | 0) >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      break label$2;
     }
     label$7 : {
      label$8 : {
       label$9 : {
        if ($4_1 >>> 0 > 239 >>> 0) {
         break label$9
        }
        if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
         break label$2
        }
        $9_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
        $8_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        if (($4_1 | 0) == (237 | 0)) {
         break label$8
        }
        label$10 : {
         if (($4_1 | 0) != (224 | 0)) {
          break label$10
         }
         if (($8_1 & 224 | 0 | 0) == (160 | 0)) {
          break label$7
         }
         break label$2;
        }
        if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
        break label$7;
       }
       if ($4_1 >>> 0 > 244 >>> 0) {
        break label$2
       }
       if (($1_1 - $5_1 | 0 | 0) < (4 | 0)) {
        break label$2
       }
       $10_1 = HEAPU8[($5_1 + 3 | 0) >> 0] | 0;
       $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
       $9_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
       label$11 : {
        label$12 : {
         switch ($4_1 + -240 | 0 | 0) {
         case 0:
          if ((($9_1 + 112 | 0) & 255 | 0) >>> 0 < 48 >>> 0) {
           break label$11
          }
          break label$2;
         case 4:
          if (($9_1 & 240 | 0 | 0) == (128 | 0)) {
           break label$11
          }
          break label$2;
         default:
          break label$12;
         };
        }
        if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
         break label$2
        }
       }
       if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
        break label$2
       }
       $7_1 = 4;
       if ((($9_1 & 63 | 0) << 12 | 0 | (($4_1 << 18 | 0) & 1835008 | 0) | 0 | (($8_1 << 6 | 0) & 4032 | 0) | 0 | ($10_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
        break label$2
       }
       break label$4;
      }
      if (($8_1 & 224 | 0 | 0) != (128 | 0)) {
       break label$2
      }
     }
     if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
      break label$2
     }
     $7_1 = 3;
     if ((($8_1 & 63 | 0) << 6 | 0 | (($4_1 << 12 | 0) & 61440 | 0) | 0 | ($9_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
      break label$2
     }
    }
    $6_1 = $6_1 + 1 | 0;
    $5_1 = $5_1 + $7_1 | 0;
    continue label$3;
   };
  }
  return $5_1 - $0_1 | 0 | 0;
 }
 
 function $898($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $899($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 7376;
  $1371($0_1 + 12 | 0 | 0) | 0;
  $187($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $900($0_1) {
  $0_1 = $0_1 | 0;
  $1303($899($0_1 | 0) | 0 | 0);
 }
 
 function $901($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 7416;
  $1371($0_1 + 16 | 0 | 0) | 0;
  $187($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $902($0_1) {
  $0_1 = $0_1 | 0;
  $1303($901($0_1 | 0) | 0 | 0);
 }
 
 function $903($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[($0_1 + 8 | 0) >> 0] | 0 | 0;
 }
 
 function $904($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $905($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[($0_1 + 9 | 0) >> 0] | 0 | 0;
 }
 
 function $906($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $907($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $91($0_1 | 0, $1_1 + 12 | 0 | 0) | 0;
 }
 
 function $908($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $91($0_1 | 0, $1_1 + 16 | 0 | 0) | 0;
 }
 
 function $909($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $40($0_1 | 0, 1494 | 0) | 0;
 }
 
 function $910($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $911($0_1 | 0, 7448 | 0) | 0;
 }
 
 function $911($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $199($0_1 | 0, $2_1 + 8 | 0 | 0, $2_1 | 0) | 0;
  $1388($0_1 | 0, $1_1 | 0, $912($1_1 | 0) | 0 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $912($0_1) {
  $0_1 = $0_1 | 0;
  return $156($0_1 | 0) | 0 | 0;
 }
 
 function $913($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $40($0_1 | 0, 1503 | 0) | 0;
 }
 
 function $914($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $911($0_1 | 0, 7468 | 0) | 0;
 }
 
 function $915($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $916($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $916($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1377($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $917($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -4 | 0;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $1128($0_1 | 0, $1_1 | 0);
    $0_1 = $0_1 + 4 | 0;
    continue label$2;
   };
  }
 }
 
 function $918($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 15312 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(15312 | 0) | 0)) {
    break label$1
   }
   $919();
   HEAP32[(0 + 15308 | 0) >> 2] = 15488;
   $1411(15312 | 0);
  }
  return HEAP32[(0 + 15308 | 0) >> 2] | 0 | 0;
 }
 
 function $919() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 15656 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(15656 | 0) | 0)) {
    break label$1
   }
   $0_1 = 15488;
   label$2 : while (1) {
    $0_1 = ($224($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (15656 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$0(14 | 0, 0 | 0, 1024 | 0) | 0;
   $1411(15656 | 0);
  }
  $915(15488 | 0, 1091 | 0) | 0;
  $915(15500 | 0, 1098 | 0) | 0;
  $915(15512 | 0, 1064 | 0) | 0;
  $915(15524 | 0, 1072 | 0) | 0;
  $915(15536 | 0, 1055 | 0) | 0;
  $915(15548 | 0, 1105 | 0) | 0;
  $915(15560 | 0, 1082 | 0) | 0;
  $915(15572 | 0, 1298 | 0) | 0;
  $915(15584 | 0, 1360 | 0) | 0;
  $915(15596 | 0, 1499 | 0) | 0;
  $915(15608 | 0, 1514 | 0) | 0;
  $915(15620 | 0, 1158 | 0) | 0;
  $915(15632 | 0, 1385 | 0) | 0;
  $915(15644 | 0, 1211 | 0) | 0;
 }
 
 function $920($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 15656;
  label$1 : while (1) {
   $1_1 = $1371($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (15488 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $921($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 15320 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(15320 | 0) | 0)) {
    break label$1
   }
   $922();
   HEAP32[(0 + 15316 | 0) >> 2] = 15664;
   $1411(15320 | 0);
  }
  return HEAP32[(0 + 15316 | 0) >> 2] | 0 | 0;
 }
 
 function $922() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 15832 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(15832 | 0) | 0)) {
    break label$1
   }
   $0_1 = 15664;
   label$2 : while (1) {
    $0_1 = ($498($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (15832 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$0(15 | 0, 0 | 0, 1024 | 0) | 0;
   $1411(15832 | 0);
  }
  $924(15664 | 0, 11668 | 0) | 0;
  $924(15676 | 0, 11696 | 0) | 0;
  $924(15688 | 0, 11724 | 0) | 0;
  $924(15700 | 0, 11756 | 0) | 0;
  $924(15712 | 0, 11796 | 0) | 0;
  $924(15724 | 0, 11832 | 0) | 0;
  $924(15736 | 0, 11860 | 0) | 0;
  $924(15748 | 0, 11896 | 0) | 0;
  $924(15760 | 0, 11912 | 0) | 0;
  $924(15772 | 0, 11928 | 0) | 0;
  $924(15784 | 0, 11944 | 0) | 0;
  $924(15796 | 0, 11960 | 0) | 0;
  $924(15808 | 0, 11976 | 0) | 0;
  $924(15820 | 0, 11992 | 0) | 0;
 }
 
 function $923($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 15832;
  label$1 : while (1) {
   $1_1 = $1385($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (15664 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $924($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $959($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $925($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 15328 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(15328 | 0) | 0)) {
    break label$1
   }
   $926();
   HEAP32[(0 + 15324 | 0) >> 2] = 15840;
   $1411(15328 | 0);
  }
  return HEAP32[(0 + 15324 | 0) >> 2] | 0 | 0;
 }
 
 function $926() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 16128 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(16128 | 0) | 0)) {
    break label$1
   }
   $0_1 = 15840;
   label$2 : while (1) {
    $0_1 = ($224($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (16128 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$0(16 | 0, 0 | 0, 1024 | 0) | 0;
   $1411(16128 | 0);
  }
  $915(15840 | 0, 1042 | 0) | 0;
  $915(15852 | 0, 1033 | 0) | 0;
  $915(15864 | 0, 1389 | 0) | 0;
  $915(15876 | 0, 1379 | 0) | 0;
  $915(15888 | 0, 1112 | 0) | 0;
  $915(15900 | 0, 1509 | 0) | 0;
  $915(15912 | 0, 1050 | 0) | 0;
  $915(15924 | 0, 1200 | 0) | 0;
  $915(15936 | 0, 1243 | 0) | 0;
  $915(15948 | 0, 1226 | 0) | 0;
  $915(15960 | 0, 1234 | 0) | 0;
  $915(15972 | 0, 1253 | 0) | 0;
  $915(15984 | 0, 1368 | 0) | 0;
  $915(15996 | 0, 1522 | 0) | 0;
  $915(16008 | 0, 1278 | 0) | 0;
  $915(16020 | 0, 1215 | 0) | 0;
  $915(16032 | 0, 1112 | 0) | 0;
  $915(16044 | 0, 1302 | 0) | 0;
  $915(16056 | 0, 1372 | 0) | 0;
  $915(16068 | 0, 1395 | 0) | 0;
  $915(16080 | 0, 1282 | 0) | 0;
  $915(16092 | 0, 1207 | 0) | 0;
  $915(16104 | 0, 1154 | 0) | 0;
  $915(16116 | 0, 1518 | 0) | 0;
 }
 
 function $927($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 16128;
  label$1 : while (1) {
   $1_1 = $1371($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (15840 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $928($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 15336 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(15336 | 0) | 0)) {
    break label$1
   }
   $929();
   HEAP32[(0 + 15332 | 0) >> 2] = 16144;
   $1411(15336 | 0);
  }
  return HEAP32[(0 + 15332 | 0) >> 2] | 0 | 0;
 }
 
 function $929() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 16432 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(16432 | 0) | 0)) {
    break label$1
   }
   $0_1 = 16144;
   label$2 : while (1) {
    $0_1 = ($498($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (16432 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$0(17 | 0, 0 | 0, 1024 | 0) | 0;
   $1411(16432 | 0);
  }
  $924(16144 | 0, 12008 | 0) | 0;
  $924(16156 | 0, 12040 | 0) | 0;
  $924(16168 | 0, 12076 | 0) | 0;
  $924(16180 | 0, 12100 | 0) | 0;
  $924(16192 | 0, 12124 | 0) | 0;
  $924(16204 | 0, 12140 | 0) | 0;
  $924(16216 | 0, 12160 | 0) | 0;
  $924(16228 | 0, 12180 | 0) | 0;
  $924(16240 | 0, 12208 | 0) | 0;
  $924(16252 | 0, 12248 | 0) | 0;
  $924(16264 | 0, 12280 | 0) | 0;
  $924(16276 | 0, 12316 | 0) | 0;
  $924(16288 | 0, 12352 | 0) | 0;
  $924(16300 | 0, 12368 | 0) | 0;
  $924(16312 | 0, 12384 | 0) | 0;
  $924(16324 | 0, 12400 | 0) | 0;
  $924(16336 | 0, 12124 | 0) | 0;
  $924(16348 | 0, 12416 | 0) | 0;
  $924(16360 | 0, 12432 | 0) | 0;
  $924(16372 | 0, 12448 | 0) | 0;
  $924(16384 | 0, 12464 | 0) | 0;
  $924(16396 | 0, 12480 | 0) | 0;
  $924(16408 | 0, 12496 | 0) | 0;
  $924(16420 | 0, 12512 | 0) | 0;
 }
 
 function $930($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 16432;
  label$1 : while (1) {
   $1_1 = $1385($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (16144 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $931($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 15344 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(15344 | 0) | 0)) {
    break label$1
   }
   $932();
   HEAP32[(0 + 15340 | 0) >> 2] = 16448;
   $1411(15344 | 0);
  }
  return HEAP32[(0 + 15340 | 0) >> 2] | 0 | 0;
 }
 
 function $932() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 16472 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(16472 | 0) | 0)) {
    break label$1
   }
   $0_1 = 16448;
   label$2 : while (1) {
    $0_1 = ($224($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (16472 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$0(18 | 0, 0 | 0, 1024 | 0) | 0;
   $1411(16472 | 0);
  }
  $915(16448 | 0, 1569 | 0) | 0;
  $915(16460 | 0, 1566 | 0) | 0;
 }
 
 function $933($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 16472;
  label$1 : while (1) {
   $1_1 = $1371($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (16448 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $934($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 15352 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(15352 | 0) | 0)) {
    break label$1
   }
   $935();
   HEAP32[(0 + 15348 | 0) >> 2] = 16480;
   $1411(15352 | 0);
  }
  return HEAP32[(0 + 15348 | 0) >> 2] | 0 | 0;
 }
 
 function $935() {
  var $0_1 = 0;
  label$1 : {
   if ((HEAPU8[(0 + 16504 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(16504 | 0) | 0)) {
    break label$1
   }
   $0_1 = 16480;
   label$2 : while (1) {
    $0_1 = ($498($0_1 | 0) | 0) + 12 | 0;
    if (($0_1 | 0) != (16504 | 0)) {
     continue label$2
    }
    break label$2;
   };
   fimport$0(19 | 0, 0 | 0, 1024 | 0) | 0;
   $1411(16504 | 0);
  }
  $924(16480 | 0, 12528 | 0) | 0;
  $924(16492 | 0, 12540 | 0) | 0;
 }
 
 function $936($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 16504;
  label$1 : while (1) {
   $1_1 = $1385($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (16480 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $937($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 15368 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(15368 | 0) | 0)) {
    break label$1
   }
   $40(15356 | 0, 1116 | 0) | 0;
   fimport$0(20 | 0, 0 | 0, 1024 | 0) | 0;
   $1411(15368 | 0);
  }
  return 15356 | 0;
 }
 
 function $938($0_1) {
  $0_1 = $0_1 | 0;
  $1371(15356 | 0) | 0;
 }
 
 function $939($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 15384 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(15384 | 0) | 0)) {
    break label$1
   }
   $911(15372 | 0, 7492 | 0) | 0;
   fimport$0(21 | 0, 0 | 0, 1024 | 0) | 0;
   $1411(15384 | 0);
  }
  return 15372 | 0;
 }
 
 function $940($0_1) {
  $0_1 = $0_1 | 0;
  $1385(15372 | 0) | 0;
 }
 
 function $941($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 15400 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(15400 | 0) | 0)) {
    break label$1
   }
   $40(15388 | 0, 1553 | 0) | 0;
   fimport$0(22 | 0, 0 | 0, 1024 | 0) | 0;
   $1411(15400 | 0);
  }
  return 15388 | 0;
 }
 
 function $942($0_1) {
  $0_1 = $0_1 | 0;
  $1371(15388 | 0) | 0;
 }
 
 function $943($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 15416 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(15416 | 0) | 0)) {
    break label$1
   }
   $911(15404 | 0, 7528 | 0) | 0;
   fimport$0(23 | 0, 0 | 0, 1024 | 0) | 0;
   $1411(15416 | 0);
  }
  return 15404 | 0;
 }
 
 function $944($0_1) {
  $0_1 = $0_1 | 0;
  $1385(15404 | 0) | 0;
 }
 
 function $945($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 15432 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(15432 | 0) | 0)) {
    break label$1
   }
   $40(15420 | 0, 1526 | 0) | 0;
   fimport$0(24 | 0, 0 | 0, 1024 | 0) | 0;
   $1411(15432 | 0);
  }
  return 15420 | 0;
 }
 
 function $946($0_1) {
  $0_1 = $0_1 | 0;
  $1371(15420 | 0) | 0;
 }
 
 function $947($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 15448 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(15448 | 0) | 0)) {
    break label$1
   }
   $911(15436 | 0, 7564 | 0) | 0;
   fimport$0(25 | 0, 0 | 0, 1024 | 0) | 0;
   $1411(15448 | 0);
  }
  return 15436 | 0;
 }
 
 function $948($0_1) {
  $0_1 = $0_1 | 0;
  $1385(15436 | 0) | 0;
 }
 
 function $949($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 15464 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(15464 | 0) | 0)) {
    break label$1
   }
   $40(15452 | 0, 1286 | 0) | 0;
   fimport$0(26 | 0, 0 | 0, 1024 | 0) | 0;
   $1411(15464 | 0);
  }
  return 15452 | 0;
 }
 
 function $950($0_1) {
  $0_1 = $0_1 | 0;
  $1371(15452 | 0) | 0;
 }
 
 function $951($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 15480 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(15480 | 0) | 0)) {
    break label$1
   }
   $911(15468 | 0, 7648 | 0) | 0;
   fimport$0(27 | 0, 0 | 0, 1024 | 0) | 0;
   $1411(15480 | 0);
  }
  return 15468 | 0;
 }
 
 function $952($0_1) {
  $0_1 = $0_1 | 0;
  $1385(15468 | 0) | 0;
 }
 
 function $953($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1138($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $954($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 1;
  label$1 : {
   if (!($432($0_1 | 0) | 0)) {
    break label$1
   }
   $1_1 = ($998($0_1 | 0) | 0) + -1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $955($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $956($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!($432($0_1 | 0) | 0)) {
    break label$1
   }
   $611($0_1 | 0, $1_1 | 0);
   return;
  }
  $613($0_1 | 0, $1_1 | 0);
 }
 
 function $957($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($260() | 0 | 0)) {
    break label$1
   }
   $155(HEAP32[$0_1 >> 2] | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $958($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $959($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1391($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $960($0_1) {
  $0_1 = $0_1 | 0;
  $187($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $961($0_1) {
  $0_1 = $0_1 | 0;
  $187($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $962($0_1) {
  $0_1 = $0_1 | 0;
  $187($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $963($0_1) {
  $0_1 = $0_1 | 0;
  $187($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $964($0_1) {
  $0_1 = $0_1 | 0;
  $965($0_1 + 8 | 0 | 0) | 0;
  $187($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $965($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $966($0_1) {
  $0_1 = $0_1 | 0;
  $1303($964($0_1 | 0) | 0 | 0);
 }
 
 function $967($0_1) {
  $0_1 = $0_1 | 0;
  $968($0_1 + 8 | 0 | 0) | 0;
  $187($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $968($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $969($0_1) {
  $0_1 = $0_1 | 0;
  $1303($967($0_1 | 0) | 0 | 0);
 }
 
 function $970($0_1) {
  $0_1 = $0_1 | 0;
  $1303($971($0_1 | 0) | 0 | 0);
 }
 
 function $971($0_1) {
  $0_1 = $0_1 | 0;
  $957($0_1 + 8 | 0 | 0) | 0;
  $187($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $972($0_1) {
  $0_1 = $0_1 | 0;
  $1303($973($0_1 | 0) | 0 | 0);
 }
 
 function $973($0_1) {
  $0_1 = $0_1 | 0;
  $957($0_1 + 8 | 0 | 0) | 0;
  $187($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $974($0_1) {
  $0_1 = $0_1 | 0;
  $187($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $975($0_1) {
  $0_1 = $0_1 | 0;
  $187($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $976($0_1) {
  $0_1 = $0_1 | 0;
  $187($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $977($0_1) {
  $0_1 = $0_1 | 0;
  $187($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $978($0_1) {
  $0_1 = $0_1 | 0;
  $187($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $979($0_1) {
  $0_1 = $0_1 | 0;
  $187($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $980($0_1) {
  $0_1 = $0_1 | 0;
  $187($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $981($0_1) {
  $0_1 = $0_1 | 0;
  $187($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $982($0_1) {
  $0_1 = $0_1 | 0;
  $187($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $983($0_1) {
  $0_1 = $0_1 | 0;
  $187($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $984($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $985($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $986($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $987($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $987($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $990($1_1 | 0, $2_1 | 0, 1 | 0);
 }
 
 function $988($0_1) {
  $0_1 = $0_1 | 0;
  return $989($0_1 | 0) | 0 | 0;
 }
 
 function $989($0_1) {
  $0_1 = $0_1 | 0;
  return $993($0_1 | 0) | 0 | 0;
 }
 
 function $990($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $991($0_1 | 0, $1_1 | 0);
 }
 
 function $991($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $992($0_1 | 0);
 }
 
 function $992($0_1) {
  $0_1 = $0_1 | 0;
  $1303($0_1 | 0);
 }
 
 function $993($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $994($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $995($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $995($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $990($1_1 | 0, $2_1 << 2 | 0 | 0, 4 | 0);
 }
 
 function $996($0_1) {
  $0_1 = $0_1 | 0;
  return $997($0_1 | 0) | 0 | 0;
 }
 
 function $997($0_1) {
  $0_1 = $0_1 | 0;
  return $1000($0_1 | 0) | 0 | 0;
 }
 
 function $998($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[(($518($0_1 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
 }
 
 function $999($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1000($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1001($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1002($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1003($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1014($0_1 | 0, $1013($1_1 | 0) | 0 | 0) | 0;
  $25($2_1 | 0) | 0;
  $1015($0_1 + 8 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1004($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $1018($1017($0_1 | 0) | 0 | 0) | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $1019() | 0;
  $0_1 = HEAP32[($858($1_1 + 12 | 0 | 0, $1_1 + 8 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1005($0_1) {
  $0_1 = $0_1 | 0;
  return $1021($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $1006($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1020($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1007($0_1) {
  $0_1 = $0_1 | 0;
  return $1022($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $1008($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1025($0_1 | 0, $1023($0_1 | 0) | 0 | 0, ($1023($0_1 | 0) | 0) + (($1024($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1023($0_1 | 0) | 0) + (($1024($0_1 | 0) | 0) << 2 | 0) | 0 | 0, ($1023($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0);
 }
 
 function $1009($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + ($2_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1010($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1011($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1012($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$1_1 >> 2] = 0;
 }
 
 function $1013($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1014($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1013($1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $1015($0_1) {
  $0_1 = $0_1 | 0;
  $1016($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1016($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[($0_1 + 120 | 0) >> 0] = 0;
  return $0_1 | 0;
 }
 
 function $1017($0_1) {
  $0_1 = $0_1 | 0;
  return $1027($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $1018($0_1) {
  $0_1 = $0_1 | 0;
  return $1026($0_1 | 0) | 0 | 0;
 }
 
 function $1019() {
  return $1028() | 0 | 0;
 }
 
 function $1020($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (HEAPU8[($0_1 + 120 | 0) >> 0] | 0) {
     break label$2
    }
    if ($1_1 >>> 0 > 30 >>> 0) {
     break label$2
    }
    HEAP8[($0_1 + 120 | 0) >> 0] = 1;
    break label$1;
   }
   $0_1 = $1031($1030($3_1 + 8 | 0 | 0) | 0 | 0, $1_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1021($0_1) {
  $0_1 = $0_1 | 0;
  return $1037($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $1022($0_1) {
  $0_1 = $0_1 | 0;
  return $1038($0_1 | 0) | 0 | 0;
 }
 
 function $1023($0_1) {
  $0_1 = $0_1 | 0;
  return $1011(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1024($0_1) {
  $0_1 = $0_1 | 0;
  return $1039($0_1 | 0) | 0 | 0;
 }
 
 function $1025($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
 }
 
 function $1026($0_1) {
  $0_1 = $0_1 | 0;
  return 1073741823 | 0;
 }
 
 function $1027($0_1) {
  $0_1 = $0_1 | 0;
  return $1029($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $1028() {
  return 2147483647 | 0;
 }
 
 function $1029($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1030($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1031($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1032($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $1033(1426 | 0);
   abort();
  }
  return $1034($1_1 << 2 | 0 | 0, 4 | 0) | 0 | 0;
 }
 
 function $1032($0_1) {
  $0_1 = $0_1 | 0;
  return $1035($0_1 | 0) | 0 | 0;
 }
 
 function $1033($0_1) {
  $0_1 = $0_1 | 0;
  fimport$1();
  abort();
 }
 
 function $1034($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1036($0_1 | 0) | 0 | 0;
 }
 
 function $1035($0_1) {
  $0_1 = $0_1 | 0;
  return 1073741823 | 0;
 }
 
 function $1036($0_1) {
  $0_1 = $0_1 | 0;
  return $1302($0_1 | 0) | 0 | 0;
 }
 
 function $1037($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1038($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1039($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($1040($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1040($0_1) {
  $0_1 = $0_1 | 0;
  return $1041($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $1041($0_1) {
  $0_1 = $0_1 | 0;
  return $1042($0_1 | 0) | 0 | 0;
 }
 
 function $1042($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1043($0_1) {
  $0_1 = $0_1 | 0;
  return ($1044($92($0_1 | 0) | 0 | 0) | 0) + -16 | 0 | 0;
 }
 
 function $1044($0_1) {
  $0_1 = $0_1 | 0;
  return $1053($0_1 | 0) | 0 | 0;
 }
 
 function $1045($0_1) {
  $0_1 = $0_1 | 0;
  return $1054($0_1 | 0) | 0 | 0;
 }
 
 function $1046($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0;
  $1_1 = 10;
  label$1 : {
   if ($0_1 >>> 0 < 11 >>> 0) {
    break label$1
   }
   $0_1 = $1047($0_1 + 1 | 0 | 0) | 0;
   $7_1 = $0_1;
   $0_1 = $0_1 + -1 | 0;
   $1_1 = ($0_1 | 0) == (11 | 0) ? $7_1 : $0_1;
  }
  return $1_1 | 0;
 }
 
 function $1047($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + 15 | 0) & -16 | 0 | 0;
 }
 
 function $1048($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1049($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1049($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1044($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $1033(1426 | 0);
   abort();
  }
  return $1034($1_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $1050($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($95($0_1 | 0) | 0) >> 2] = $1_1;
 }
 
 function $1051($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($95($0_1 | 0) | 0) + 8 | 0) >> 2] = $1_1 | -2147483648 | 0;
 }
 
 function $1052($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1053($0_1) {
  $0_1 = $0_1 | 0;
  return -1 | 0;
 }
 
 function $1054($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1055($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1057($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1056($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (($2_1 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $2_1 = $2_1 + -4 | 0;
    $1058($1005($0_1 | 0) | 0 | 0, $1011($2_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
 }
 
 function $1057($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    if (($0_1 | 0) != ($1_1 | 0)) {
     break label$2
    }
    HEAP8[($0_1 + 120 | 0) >> 0] = 0;
    break label$1;
   }
   $1059($1030($3_1 + 8 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1058($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1059($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $990($1_1 | 0, $2_1 << 2 | 0 | 0, 4 | 0);
 }
 
 function $1060($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1061($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1062($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1063($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1064($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1065($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 12560;
  return $0_1 | 0;
 }
 
 function $1066($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 12596;
  return $0_1 | 0;
 }
 
 function $1067($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = $260() | 0;
  return $0_1 | 0;
 }
 
 function $1068($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1069($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  label$1 : {
   $3_1 = $1004($0_1 | 0) | 0;
   if ($3_1 >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   label$2 : {
    $0_1 = $1024($0_1 | 0) | 0;
    if ($0_1 >>> 0 >= ($3_1 >>> 1 | 0) >>> 0) {
     break label$2
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $0_1 << 1 | 0;
    $3_1 = HEAP32[($43($2_1 + 8 | 0 | 0, $2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
   }
   global$0 = $2_1 + 16 | 0;
   return $3_1 | 0;
  }
  $173($0_1 | 0);
  abort();
 }
 
 function $1070($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1071($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1072($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1071($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1073($0_1) {
  $0_1 = $0_1 | 0;
  $794($0_1 | 0) | 0;
 }
 
 function $1074($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1075($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  $1079($0_1 + 12 | 0 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0) | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $5_1 = $1006($1080($0_1 | 0) | 0 | 0, $1_1 | 0) | 0;
  }
  HEAP32[$0_1 >> 2] = $5_1;
  $2_1 = $5_1 + ($2_1 << 2 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[($1081($0_1 | 0) | 0) >> 2] = $5_1 + ($1_1 << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1076($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = $1082($2_1 | 0, $0_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (($3_1 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
    $1012($1080($0_1 | 0) | 0 | 0, $1011(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0);
    $3_1 = (HEAP32[$1_1 >> 2] | 0) + 4 | 0;
    HEAP32[$1_1 >> 2] = $3_1;
    continue label$2;
   };
  }
  $1083($1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1077($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $800($0_1 | 0);
  $2_1 = $1_1 + 4 | 0;
  $1084($1005($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $2_1 | 0);
  $1085($0_1 | 0, $2_1 | 0);
  $1085($0_1 + 4 | 0 | 0, $1_1 + 8 | 0 | 0);
  $1085($1007($0_1 | 0) | 0 | 0, $1081($1_1 | 0) | 0 | 0);
  HEAP32[$1_1 >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $1008($0_1 | 0, $750($0_1 | 0) | 0 | 0);
  $753($0_1 | 0);
 }
 
 function $1078($0_1) {
  $0_1 = $0_1 | 0;
  $1086($0_1 | 0);
  label$1 : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    break label$1
   }
   $1055($1080($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $1087($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1079($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1014($0_1 | 0, $1013($1_1 | 0) | 0 | 0) | 0;
  $1089($0_1 + 4 | 0 | 0, $1088($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1080($0_1) {
  $0_1 = $0_1 | 0;
  return $1090($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $1081($0_1) {
  $0_1 = $0_1 | 0;
  return $1091($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $1082($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + ($2_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1083($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1084($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $2_1 = $2_1 - $1_1 | 0;
  $4_1 = (HEAP32[$3_1 >> 2] | 0) - $2_1 | 0;
  HEAP32[$3_1 >> 2] = $4_1;
  label$1 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $1458($4_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
 }
 
 function $1085($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1093($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1093($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($1093($2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1086($0_1) {
  $0_1 = $0_1 | 0;
  $1094($0_1 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $1087($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($1095($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1088($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1089($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1088($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1090($0_1) {
  $0_1 = $0_1 | 0;
  return $1092($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1091($0_1) {
  $0_1 = $0_1 | 0;
  return $1038($0_1 | 0) | 0 | 0;
 }
 
 function $1092($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1093($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1094($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1096($0_1 | 0, $1_1 | 0);
 }
 
 function $1095($0_1) {
  $0_1 = $0_1 | 0;
  return $1097($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $1096($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $2_1 = $1080($0_1 | 0) | 0;
    $3_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    $1058($2_1 | 0, $1011($3_1 | 0) | 0 | 0);
    continue label$2;
   };
  }
 }
 
 function $1097($0_1) {
  $0_1 = $0_1 | 0;
  return $1042($0_1 | 0) | 0 | 0;
 }
 
 function $1098($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1100($0_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1099($0_1) {
  $0_1 = $0_1 | 0;
  $1101($0_1 | 0);
 }
 
 function $1100($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1101($0_1) {
  $0_1 = $0_1 | 0;
  $1103($1102(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0);
 }
 
 function $1102($0_1) {
  $0_1 = $0_1 | 0;
  return $1105($0_1 | 0) | 0 | 0;
 }
 
 function $1103($0_1) {
  $0_1 = $0_1 | 0;
  $1104($0_1 | 0);
 }
 
 function $1104($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $2_1 = (HEAP32[$0_1 >> 2] | 0) + ($1_1 >> 1 | 0) | 0;
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   if (!($1_1 & 1 | 0)) {
    break label$1
   }
   $0_1 = HEAP32[((HEAP32[$2_1 >> 2] | 0) + $0_1 | 0) >> 2] | 0;
  }
  FUNCTION_TABLE[$0_1 | 0]($2_1);
 }
 
 function $1105($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1106($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1107($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1107($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1108($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 & 255 | 0 | 0;
 }
 
 function $1109($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1110($0_1) {
  $0_1 = $0_1 | 0;
  $1117($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1111($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1118($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1112($0_1) {
  $0_1 = $0_1 | 0;
  return ($1119($515($0_1 | 0) | 0 | 0) | 0) + -16 | 0 | 0;
 }
 
 function $1113($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0;
  $1_1 = 1;
  label$1 : {
   if ($0_1 >>> 0 < 2 >>> 0) {
    break label$1
   }
   $0_1 = $1121($0_1 + 1 | 0 | 0) | 0;
   $7_1 = $0_1;
   $0_1 = $0_1 + -1 | 0;
   $1_1 = ($0_1 | 0) == (2 | 0) ? $7_1 : $0_1;
  }
  return $1_1 | 0;
 }
 
 function $1114($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1122($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1115($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($519($0_1 | 0) | 0) >> 2] = $1_1;
 }
 
 function $1116($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($519($0_1 | 0) | 0) + 8 | 0) >> 2] = $1_1 | -2147483648 | 0;
 }
 
 function $1117($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1118($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1119($0_1) {
  $0_1 = $0_1 | 0;
  return $1123($0_1 | 0) | 0 | 0;
 }
 
 function $1120($0_1) {
  $0_1 = $0_1 | 0;
  return $1126($0_1 | 0) | 0 | 0;
 }
 
 function $1121($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + 3 | 0) & -4 | 0 | 0;
 }
 
 function $1122($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (($1119($0_1 | 0) | 0) >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $1033(1426 | 0);
   abort();
  }
  return $1034($1_1 << 2 | 0 | 0, 4 | 0) | 0 | 0;
 }
 
 function $1123($0_1) {
  $0_1 = $0_1 | 0;
  return 1073741823 | 0;
 }
 
 function $1124($0_1) {
  $0_1 = $0_1 | 0;
  return $1125($0_1 | 0) | 0 | 0;
 }
 
 function $1125($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1126($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1127($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1128($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $51($0_1 | 0, $1_1 | 0);
 }
 
 function $1129($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1133($0_1 | 0, $1132($1_1 | 0) | 0 | 0) | 0;
  $55($0_1 + 4 | 0 | 0, $54($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1130($0_1) {
  $0_1 = $0_1 | 0;
  return $1134($0_1 | 0) | 0 | 0;
 }
 
 function $1131($0_1) {
  $0_1 = $0_1 | 0;
  return $56($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1132($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1133($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1132($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1134($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1135($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1136($0_1 | 0, $1_1 | 0);
 }
 
 function $1136($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1137($988($1_1 | 0) | 0 | 0) | 0;
  $988($0_1 | 0) | 0;
 }
 
 function $1137($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1138($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1139($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1140($0_1 | 0, $1_1 | 0);
 }
 
 function $1140($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1141($996($1_1 | 0) | 0 | 0) | 0;
  $996($0_1 | 0) | 0;
 }
 
 function $1141($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1142($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1143($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!($29($0_1 | 0) | 0)) {
     break label$2
    }
    $3_1 = $546($0_1 | 0) | 0;
    HEAP8[($2_1 + 15 | 0) >> 0] = 0;
    $547($3_1 + $1_1 | 0 | 0, $2_1 + 15 | 0 | 0);
    $548($0_1 | 0, $1_1 | 0);
    break label$1;
   }
   $3_1 = $549($0_1 | 0) | 0;
   HEAP8[($2_1 + 14 | 0) >> 0] = 0;
   $547($3_1 + $1_1 | 0 | 0, $2_1 + 14 | 0 | 0);
   $550($0_1 | 0, $1_1 | 0);
  }
  $1142($0_1 | 0, $1_1 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1144($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1145($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1144($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1146($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1147($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1146($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1146($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($1146($2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1148($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0 | 0) / (12 | 0) | 0 | 0;
 }
 
 function $1149() {
  return $1150() | 0 | 0;
 }
 
 function $1150() {
  return -2147483648 | 0;
 }
 
 function $1151() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1153() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1152() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1154() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1153() {
  i64toi32_i32$HIGH_BITS = -2147483648;
  return 0 | 0;
 }
 
 function $1154() {
  i64toi32_i32$HIGH_BITS = 2147483647;
  return -1 | 0;
 }
 
 function $1155() {
  return $1156() | 0 | 0;
 }
 
 function $1156() {
  return 65535 | 0;
 }
 
 function $1157() {
  return -1 | 0;
 }
 
 function $1158() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1159() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1159() {
  i64toi32_i32$HIGH_BITS = -1;
  return -1 | 0;
 }
 
 function $1160($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return Math_fround(Math_fround($183($0_1 | 0, $1_1 | 0, $260() | 0 | 0)));
 }
 
 function $1161($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return +(+$184($0_1 | 0, $1_1 | 0, $260() | 0 | 0));
 }
 
 function $1162($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $4$hi = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $185($3_1 | 0, $1_1 | 0, $2_1 | 0, $260() | 0 | 0);
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $17_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1163($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if ($19($266($1_1 | 0) | 0 | 0, $18() | 0 | 0) | 0) {
     break label$2
    }
    return !(HEAP32[$0_1 >> 2] | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return 1 | 0;
 }
 
 function $1164($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0 | 0) / (12 | 0) | 0 | 0;
 }
 
 function $1165($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if ($373($312($1_1 | 0) | 0 | 0, $372() | 0 | 0) | 0) {
     break label$2
    }
    return !(HEAP32[$0_1 >> 2] | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return 1 | 0;
 }
 
 function $1166($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1167($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1168($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1167($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1169($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1170($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1171($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1170($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1172($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1173($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $458($0_1 | 0, $1_1 | 0);
 }
 
 function $1174($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1147($0_1 | 0, $1_1 | 0);
 }
 
 function $1175($0_1) {
  $0_1 = $0_1 | 0;
  return $1176($518($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1176($0_1) {
  $0_1 = $0_1 | 0;
  return $1177($0_1 | 0) | 0 | 0;
 }
 
 function $1177($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1178($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if (($0_1 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $2_1 = HEAP8[$0_1 >> 0] | 0;
    $330($329($3_1 + 8 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $0_1 = $0_1 + 1 | 0;
    $332($3_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1179($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : while (1) {
    if (($0_1 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $365($364($3_1 + 8 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $0_1 = $0_1 + 4 | 0;
    $367($3_1 + 8 | 0 | 0) | 0;
    continue label$2;
   };
  }
  $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1180($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1181($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1185($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1182($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1_1 >>> 0 <= $0_1 >>> 0 & $0_1 >>> 0 < $2_1 >>> 0 | 0 | 0;
 }
 
 function $1183($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $1186($0_1 | 0, $4_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $1187($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1184($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!($29($0_1 | 0) | 0)) {
    break label$1
   }
   $548($0_1 | 0, $1_1 | 0);
   return;
  }
  $550($0_1 | 0, $1_1 | 0);
 }
 
 function $1185($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1186($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $25($1_1 | 0) | 0;
  $26($0_1 | 0) | 0;
  $1189($0_1 | 0, $1188($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1187($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $1181($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($1043($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $550($0_1 | 0, $4_1 | 0);
     $5_1 = $549($0_1 | 0) | 0;
     break label$2;
    }
    $5_1 = $1046($4_1 | 0) | 0;
    $6_1 = $5_1 + 1 | 0;
    $5_1 = $1048($988($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
    $1050($0_1 | 0, $5_1 | 0);
    $1051($0_1 | 0, $6_1 | 0);
    $548($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $547($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$5;
    };
   }
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $547($5_1 | 0, $3_1 + 15 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1368($0_1 | 0);
  abort();
 }
 
 function $1188($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1189($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1188($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1190($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1191($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[($1190($1_1 | 0) | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1192($0_1) {
  $0_1 = $0_1 | 0;
  return $1194($0_1 | 0) | 0 | 0;
 }
 
 function $1193($0_1) {
  $0_1 = $0_1 | 0;
  return $56($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1194($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1195($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1196($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAPU8[$1_1 >> 0] | 0 | 0) == (HEAPU8[$2_1 >> 0] | 0 | 0) | 0;
 }
 
 function $1197($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1198($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1_1 >>> 0 <= $0_1 >>> 0 & $0_1 >>> 0 < $2_1 >>> 0 | 0 | 0;
 }
 
 function $1199($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $1200($0_1 | 0, $4_1 + 8 | 0 | 0, $3_1 | 0) | 0;
  $1201($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1200($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $25($1_1 | 0) | 0;
  $1109($0_1 | 0) | 0;
  $1203($0_1 | 0, $1202($2_1 | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1201($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = $953($1_1 | 0, $2_1 | 0) | 0;
   if ($4_1 >>> 0 > ($1112($0_1 | 0) | 0) >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $613($0_1 | 0, $4_1 | 0);
     $5_1 = $612($0_1 | 0) | 0;
     break label$2;
    }
    $5_1 = $1113($4_1 | 0) | 0;
    $6_1 = $5_1 + 1 | 0;
    $5_1 = $1114($996($0_1 | 0) | 0 | 0, $6_1 | 0) | 0;
    $1115($0_1 | 0, $5_1 | 0);
    $1116($0_1 | 0, $6_1 | 0);
    $611($0_1 | 0, $4_1 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$4
     }
     $610($5_1 | 0, $1_1 | 0);
     $5_1 = $5_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$5;
    };
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   $610($5_1 | 0, $3_1 + 12 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1368($0_1 | 0);
  abort();
 }
 
 function $1202($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1203($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1202($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1204($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) == (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1205($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[($57() | 0) >> 2] = $0_1;
  return -1 | 0;
 }
 
 function $1206($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  i64toi32_i32$0 = $1$hi;
  $0_1 = $1205($1483(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 & 255 | 0 | 0, $3_1 + 8 | 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $1_1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  global$0 = i64toi32_i32$2 + 16 | 0;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $0_1 ? -1 : $1_1;
  i64toi32_i32$2 = $0_1 ? i64toi32_i32$1 : i64toi32_i32$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$3 | 0;
 }
 
 function $1207($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
  $6_1 = $1_1 + $2_1 | 0;
  $7_1 = 2;
  $1_1 = $3_1 + 16 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($1205(fimport$5(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
       break label$4
      }
      label$5 : while (1) {
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($4_1 | 0)) {
        break label$3
       }
       if (($4_1 | 0) <= (-1 | 0)) {
        break label$2
       }
       $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       $5_1 = $4_1 >>> 0 > $8_1 >>> 0;
       $9_1 = $1_1 + ($5_1 << 3 | 0) | 0;
       $8_1 = $4_1 - ($5_1 ? $8_1 : 0) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) + $8_1 | 0;
       $9_1 = $1_1 + ($5_1 ? 12 : 4) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) - $8_1 | 0;
       $6_1 = $6_1 - $4_1 | 0;
       $1_1 = $5_1 ? $1_1 + 8 | 0 : $1_1;
       $7_1 = $7_1 - $5_1 | 0;
       if (!($1205(fimport$5(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, $7_1 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     if (($6_1 | 0) != (-1 | 0)) {
      break label$2
     }
    }
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    $4_1 = $2_1;
    break label$1;
   }
   $4_1 = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
   if (($7_1 | 0) == (2 | 0)) {
    break label$1
   }
   $4_1 = $2_1 - (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $1208($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $2_1 - (($4_1 | 0) != (0 | 0)) | 0;
  $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $5_1;
  $4_1 = -1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1205(fimport$6(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
      break label$3
     }
     $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     if (($4_1 | 0) > (0 | 0)) {
      break label$2
     }
    }
    HEAP32[$0_1 >> 2] = ($4_1 & 48 | 0) ^ 16 | 0 | (HEAP32[$0_1 >> 2] | 0) | 0;
    break label$1;
   }
   $6_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
   if ($4_1 >>> 0 <= $6_1 >>> 0) {
    break label$1
   }
   $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $5_1 + ($4_1 - $6_1 | 0) | 0;
   label$4 : {
    if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
     break label$4
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
    HEAP8[(($2_1 + $1_1 | 0) + -1 | 0) >> 0] = HEAPU8[$5_1 >> 0] | 0;
   }
   $4_1 = $2_1;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $1209($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1210($0_1) {
  $0_1 = $0_1 | 0;
  return fimport$7($1209(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1211($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$3
     }
     return $1212($0_1 | 0) | 0 | 0;
    }
    $1_1 = $1464($0_1 | 0) | 0;
    $2_1 = $1212($0_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $1465($0_1 | 0);
    return $2_1 | 0;
   }
   $2_1 = 0;
   label$4 : {
    if (!(HEAP32[(0 + 14776 | 0) >> 2] | 0)) {
     break label$4
    }
    $2_1 = $1211(HEAP32[(0 + 14776 | 0) >> 2] | 0 | 0) | 0;
   }
   label$5 : {
    $0_1 = HEAP32[($106() | 0) >> 2] | 0;
    if (!$0_1) {
     break label$5
    }
    label$6 : while (1) {
     $1_1 = 0;
     label$7 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$7
      }
      $1_1 = $1464($0_1 | 0) | 0;
     }
     label$8 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      $2_1 = $1212($0_1 | 0) | 0 | $2_1 | 0;
     }
     label$9 : {
      if (!$1_1) {
       break label$9
      }
      $1465($0_1 | 0);
     }
     $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$6
     }
     break label$6;
    };
   }
   $107();
  }
  return $2_1 | 0;
 }
 
 function $1212($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
   if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
    break label$1
   }
   return -1 | 0;
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$2
   }
   i64toi32_i32$1 = $1_1 - $2_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  return 0 | 0;
 }
 
 function $1213($0_1) {
  $0_1 = $0_1 | 0;
  $46($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1214($0_1) {
  $0_1 = $0_1 | 0;
  $1303($1213($0_1 | 0) | 0 | 0);
 }
 
 function $1215($0_1) {
  $0_1 = $0_1 | 0;
  $46($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1216($0_1) {
  $0_1 = $0_1 | 0;
  $1303($1215($0_1 | 0) | 0 | 0);
 }
 
 function $1217($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 12632;
  $203($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1218($0_1) {
  $0_1 = $0_1 | 0;
  $1303($1217($0_1 | 0) | 0 | 0);
 }
 
 function $1219($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 12632;
  $813($0_1 + 4 | 0 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $1220($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1221($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $0_1 | 0;
 }
 
 function $1222($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $1223($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $1223($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $1224($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1223($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $1225($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1226($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1227($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ($5_1 >>> 0 >= $6_1 >>> 0) {
       break label$4
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = 2147483647;
      HEAP32[($3_1 + 8 | 0) >> 2] = $6_1 - $5_1 | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 - $4_1 | 0;
      $5_1 = $1228($3_1 + 12 | 0 | 0, $1228($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0 | 0) | 0;
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      $1229($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
      $1230($0_1 | 0, $5_1 | 0);
      break label$3;
     }
     $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0;
     if (($5_1 | 0) == (-1 | 0)) {
      break label$1
     }
     HEAP8[$1_1 >> 0] = $1231($5_1 | 0) | 0;
     $5_1 = 1;
    }
    $1_1 = $1_1 + $5_1 | 0;
    $4_1 = $5_1 + $4_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1228($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1232($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1229($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $1458($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1230($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $1_1 | 0;
 }
 
 function $1231($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 << 24 | 0) >> 24 | 0 | 0;
 }
 
 function $1232($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1300($2_1 + 8 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $1233($0_1) {
  $0_1 = $0_1 | 0;
  return $18() | 0 | 0;
 }
 
 function $1234($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0) != ($18() | 0 | 0)) {
    break label$1
   }
   return $18() | 0 | 0;
  }
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 1 | 0;
  return $1108(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $1235($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $18() | 0 | 0;
 }
 
 function $1236($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = $18() | 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     if ($6_1 >>> 0 < $7_1 >>> 0) {
      break label$3
     }
     if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $1108(HEAP8[$1_1 >> 0] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($5_1 | 0)) {
      break label$1
     }
     $4_1 = $4_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label$2;
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = $7_1 - $6_1 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $2_1 - $4_1 | 0;
    $6_1 = $1228($3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    $6_1 = HEAP32[$6_1 >> 2] | 0;
    $1229(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = $6_1 + (HEAP32[($0_1 + 24 | 0) >> 2] | 0) | 0;
    $4_1 = $6_1 + $4_1 | 0;
    $1_1 = $1_1 + $6_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1237($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $18() | 0 | 0;
 }
 
 function $1238($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 12696;
  $203($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1239($0_1) {
  $0_1 = $0_1 | 0;
  $1303($1238($0_1 | 0) | 0 | 0);
 }
 
 function $1240($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 12696;
  $813($0_1 + 4 | 0 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $1241($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1242($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $0_1 | 0;
 }
 
 function $1243($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $1223($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $1244($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1223($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $1245($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1246($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1247($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ($5_1 >>> 0 >= $6_1 >>> 0) {
       break label$4
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = 2147483647;
      HEAP32[($3_1 + 8 | 0) >> 2] = ($6_1 - $5_1 | 0) >> 2 | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 - $4_1 | 0;
      $5_1 = $1228($3_1 + 12 | 0 | 0, $1228($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0 | 0) | 0;
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      $1248($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
      $1249($0_1 | 0, $5_1 | 0);
      $1_1 = $1_1 + ($5_1 << 2 | 0) | 0;
      break label$3;
     }
     $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0;
     if (($5_1 | 0) == (-1 | 0)) {
      break label$1
     }
     HEAP32[$1_1 >> 2] = $1250($5_1 | 0) | 0;
     $1_1 = $1_1 + 4 | 0;
     $5_1 = 1;
    }
    $4_1 = $5_1 + $4_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1248($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $0_1 = $157($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1249($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0;
 }
 
 function $1250($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1251($0_1) {
  $0_1 = $0_1 | 0;
  return $372() | 0 | 0;
 }
 
 function $1252($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0) != ($372() | 0 | 0)) {
    break label$1
   }
   return $372() | 0 | 0;
  }
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 4 | 0;
  return $1166(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1253($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $372() | 0 | 0;
 }
 
 function $1254($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = $372() | 0;
  label$1 : {
   label$2 : while (1) {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$1
    }
    label$3 : {
     $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     if ($6_1 >>> 0 < $7_1 >>> 0) {
      break label$3
     }
     if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $1166(HEAP32[$1_1 >> 2] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($5_1 | 0)) {
      break label$1
     }
     $4_1 = $4_1 + 1 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label$2;
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = ($7_1 - $6_1 | 0) >> 2 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $2_1 - $4_1 | 0;
    $6_1 = $1228($3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    $6_1 = HEAP32[$6_1 >> 2] | 0;
    $1248(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
    $7_1 = $6_1 << 2 | 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + $7_1 | 0;
    $4_1 = $6_1 + $4_1 | 0;
    $1_1 = $1_1 + $7_1 | 0;
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1255($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $372() | 0 | 0;
 }
 
 function $1256($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1257($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1256($0_1 | 0, 12792 | 0) | 0;
  $1213($0_1 + 8 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1258($0_1) {
  $0_1 = $0_1 | 0;
  return $1257($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1259($0_1) {
  $0_1 = $0_1 | 0;
  $1303($1257($0_1 | 0) | 0 | 0);
 }
 
 function $1260($0_1) {
  $0_1 = $0_1 | 0;
  $1259($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $1261($0_1) {
  $0_1 = $0_1 | 0;
  return $1264($0_1 | 0) | 0 | 0;
 }
 
 function $1262($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
 }
 
 function $1263($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!($17($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    $2_1 = $1265($1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
    if (!($5($2_1 | 0) | 0)) {
     break label$2
    }
    if (($1266($17($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
     break label$2
    }
    $11($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
   }
   $1267($2_1 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1264($0_1) {
  $0_1 = $0_1 | 0;
  return !(HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
 }
 
 function $1265($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP8[$0_1 >> 0] = 0;
  label$1 : {
   if (!($1261($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if (!($1262($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $1263($1262($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0;
   }
   HEAP8[$0_1 >> 0] = 1;
  }
  return $0_1 | 0;
 }
 
 function $1266($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1267($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($17($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($1261($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!(($7($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 8192 | 0)) {
    break label$1
   }
   if ($1400() | 0) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($1266($17($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $11($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1268($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1269($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1268($0_1 | 0, 12840 | 0) | 0;
  $1215($0_1 + 8 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1270($0_1) {
  $0_1 = $0_1 | 0;
  return $1269($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1271($0_1) {
  $0_1 = $0_1 | 0;
  $1303($1269($0_1 | 0) | 0 | 0);
 }
 
 function $1272($0_1) {
  $0_1 = $0_1 | 0;
  $1271($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $1273($0_1) {
  $0_1 = $0_1 | 0;
  return $1264($0_1 | 0) | 0 | 0;
 }
 
 function $1274($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
 }
 
 function $1275($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!($1277($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    $2_1 = $1278($1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
    if (!($1279($2_1 | 0) | 0)) {
     break label$2
    }
    if (($1280($1277($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
     break label$2
    }
    $1276($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
   }
   $1281($2_1 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1276($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $21($0_1 | 0, $1_1 | 0);
 }
 
 function $1277($0_1) {
  $0_1 = $0_1 | 0;
  return $36($0_1 | 0) | 0 | 0;
 }
 
 function $1278($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP8[$0_1 >> 0] = 0;
  label$1 : {
   if (!($1273($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : {
    if (!($1274($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
     break label$2
    }
    $1275($1274($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0;
   }
   HEAP8[$0_1 >> 0] = 1;
  }
  return $0_1 | 0;
 }
 
 function $1279($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 >> 0] | 0 | 0;
 }
 
 function $1280($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1281($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($1277($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($1273($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!(($7($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 8192 | 0)) {
    break label$1
   }
   if ($1400() | 0) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($1280($1277($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $1276($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1282($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1283($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1282($0_1 | 0, 12888 | 0) | 0;
  $1213($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1284($0_1) {
  $0_1 = $0_1 | 0;
  return $1283($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1285($0_1) {
  $0_1 = $0_1 | 0;
  $1303($1283($0_1 | 0) | 0 | 0);
 }
 
 function $1286($0_1) {
  $0_1 = $0_1 | 0;
  $1285($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $1287($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1288($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1287($0_1 | 0, 12936 | 0) | 0;
  $1215($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1289($0_1) {
  $0_1 = $0_1 | 0;
  return $1288($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1290($0_1) {
  $0_1 = $0_1 | 0;
  $1303($1288($0_1 | 0) | 0 | 0);
 }
 
 function $1291($0_1) {
  $0_1 = $0_1 | 0;
  $1290($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $1292($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $811($0_1 | 0, $1_1 + 4 | 0 | 0) | 0;
 }
 
 function $1293($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($19($0_1 | 0, $18() | 0 | 0) | 0)) {
    break label$1
   }
   $0_1 = ($18() | 0) ^ -1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $1294($0_1) {
  $0_1 = $0_1 | 0;
  return $208($0_1 | 0, 15260 | 0) | 0 | 0;
 }
 
 function $1295($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1296($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $1297($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $1298($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1299($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $1300($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) < (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1301() {
  fimport$1();
  abort();
 }
 
 function $1302($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $0_1 ? $0_1 : 1;
  label$1 : {
   label$2 : while (1) {
    $0_1 = $1448($1_1 | 0) | 0;
    if ($0_1) {
     break label$1
    }
    label$3 : {
     $0_1 = $1418() | 0;
     if (!$0_1) {
      break label$3
     }
     FUNCTION_TABLE[$0_1 | 0]();
     continue label$2;
    }
    break label$2;
   };
   fimport$1();
   abort();
  }
  return $0_1 | 0;
 }
 
 function $1303($0_1) {
  $0_1 = $0_1 | 0;
  $1449($0_1 | 0);
 }
 
 function $1304($0_1) {
  $0_1 = $0_1 | 0;
  $1303($0_1 | 0);
 }
 
 function $1305($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1306($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function $1307($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = -1;
  label$1 : {
   if (($0_1 | 0) == (-1 | 0)) {
    break label$1
   }
   $3_1 = 0;
   label$2 : {
    if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    $3_1 = $1464($1_1 | 0) | 0;
   }
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if ($2_1) {
        break label$6
       }
       $108($1_1 | 0) | 0;
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$5
       }
      }
      if ($2_1 >>> 0 > ((HEAP32[($1_1 + 44 | 0) >> 2] | 0) + -8 | 0) >>> 0) {
       break label$4
      }
     }
     $2_1 = -1;
     if ($3_1) {
      break label$3
     }
     break label$1;
    }
    $2_1 = $2_1 + -1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
    HEAP8[$2_1 >> 0] = $0_1;
    HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) & -17 | 0;
    $2_1 = $0_1;
    if (!$3_1) {
     break label$1
    }
   }
   $1465($1_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $1308($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    if ($1464($0_1 | 0) | 0) {
     break label$1
    }
   }
   label$3 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($1_1 >>> 0 >= (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
    return HEAPU8[$1_1 >> 0] | 0 | 0;
   }
   return $109($0_1 | 0) | 0 | 0;
  }
  label$4 : {
   label$5 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($1_1 >>> 0 >= (HEAP32[($0_1 + 8 | 0) >> 2] | 0) >>> 0) {
     break label$5
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
    $1_1 = HEAPU8[$1_1 >> 0] | 0;
    break label$4;
   }
   $1_1 = $109($0_1 | 0) | 0;
  }
  $1465($0_1 | 0);
  return $1_1 | 0;
 }
 
 function $1309() {
  $1310(19752 | 0) | 0;
 }
 
 function $1310($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ((HEAPU8[(0 + 20112 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   if (!($1403(20112 | 0) | 0)) {
    break label$1
   }
   $1311(20108 | 0) | 0;
   fimport$0(307 | 0, 0 | 0, 1024 | 0) | 0;
   $1411(20112 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1311($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[(0 + 13496 | 0) >> 2] | 0;
  $1312(19756 | 0, $1_1 | 0, 19812 | 0) | 0;
  $1313(19072 | 0, 19756 | 0) | 0;
  $1314(19820 | 0, $1_1 | 0, 19876 | 0) | 0;
  $1315(19160 | 0, 19820 | 0) | 0;
  $1_1 = HEAP32[(0 + 13500 | 0) >> 2] | 0;
  $1316(19884 | 0, $1_1 | 0, 19932 | 0) | 0;
  $1317(19248 | 0, 19884 | 0) | 0;
  $1318(19940 | 0, $1_1 | 0, 19988 | 0) | 0;
  $1319(19332 | 0, 19940 | 0) | 0;
  $1_1 = HEAP32[(0 + 13504 | 0) >> 2] | 0;
  $1316(19996 | 0, $1_1 | 0, 20044 | 0) | 0;
  $1317(19416 | 0, 19996 | 0) | 0;
  $1317(19584 | 0, $17((HEAP32[((HEAP32[(0 + 19416 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 19416 | 0 | 0) | 0 | 0) | 0;
  $1318(20052 | 0, $1_1 | 0, 20100 | 0) | 0;
  $1319(19500 | 0, 20052 | 0) | 0;
  $1319(19668 | 0, $1277((HEAP32[((HEAP32[(0 + 19500 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 19500 | 0 | 0) | 0 | 0) | 0;
  $1320((HEAP32[((HEAP32[(0 + 19072 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 19072 | 0 | 0, 19248 | 0) | 0;
  $1321((HEAP32[((HEAP32[(0 + 19160 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 19160 | 0 | 0, 19332 | 0) | 0;
  $1322((HEAP32[((HEAP32[(0 + 19416 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 19416 | 0 | 0) | 0;
  $1322((HEAP32[((HEAP32[(0 + 19500 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 19500 | 0 | 0) | 0;
  $1320((HEAP32[((HEAP32[(0 + 19416 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 19416 | 0 | 0, 19248 | 0) | 0;
  $1321((HEAP32[((HEAP32[(0 + 19500 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 19500 | 0 | 0, 19332 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1312($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $1219($0_1 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 13516;
  $1_1 = $18() | 0;
  HEAP8[($0_1 + 52 | 0) >> 0] = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
  $1292($3_1 + 8 | 0 | 0, $4_1 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1, $3_1 + 8 | 0);
  $203($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1313($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1323($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 12752 + 12 | 0;
  HEAP32[$2_1 >> 2] = 12752 + 32 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  $1324($0_1 + (HEAP32[(0 + 12752 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1314($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $1240($0_1 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 13616;
  $1_1 = $372() | 0;
  HEAP8[($0_1 + 52 | 0) >> 0] = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
  $1325($3_1 + 8 | 0 | 0, $4_1 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1, $3_1 + 8 | 0);
  $203($3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1315($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1326($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 12800 + 12 | 0;
  HEAP32[$2_1 >> 2] = 12800 + 32 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  $1327($0_1 + (HEAP32[(0 + 12800 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1316($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $1219($0_1 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 13716;
  $1292($3_1 + 8 | 0 | 0, $4_1 | 0);
  $1_1 = $1294($3_1 + 8 | 0 | 0) | 0;
  $203($3_1 + 8 | 0 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $1295($1_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1317($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1323($0_1 + 4 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 12848 + 12 | 0;
  HEAP32[$2_1 >> 2] = 12848 + 32 | 0;
  $1324($0_1 + (HEAP32[(0 + 12848 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1318($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $1240($0_1 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 13820;
  $1325($3_1 + 8 | 0 | 0, $4_1 | 0);
  $1_1 = $1328($3_1 + 8 | 0 | 0) | 0;
  $203($3_1 + 8 | 0 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $1329($1_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1319($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1326($0_1 + 4 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 12896 + 12 | 0;
  HEAP32[$2_1 >> 2] = 12896 + 32 | 0;
  $1327($0_1 + (HEAP32[(0 + 12896 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1320($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $1321($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $1322($0_1) {
  $0_1 = $0_1 | 0;
  $1330($0_1 | 0, 8192 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1323($0_1) {
  $0_1 = $0_1 | 0;
  $1342($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 12944 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1324($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $49($0_1 | 0, $1_1 | 0);
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
  HEAP32[($0_1 + 76 | 0) >> 2] = $18() | 0;
 }
 
 function $1325($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $811($0_1 | 0, $1_1 + 4 | 0 | 0) | 0;
 }
 
 function $1326($0_1) {
  $0_1 = $0_1 | 0;
  $1342($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 13016 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1327($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $49($0_1 | 0, $1_1 | 0);
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
  HEAP32[($0_1 + 76 | 0) >> 2] = $372() | 0;
 }
 
 function $1328($0_1) {
  $0_1 = $0_1 | 0;
  return $208($0_1 | 0, 15268 | 0) | 0 | 0;
 }
 
 function $1329($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1330($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 | $1_1 | 0;
  return $2_1 | 0;
 }
 
 function $1331($0_1) {
  $0_1 = $0_1 | 0;
  $1263(19248 | 0) | 0;
  $1275(19332 | 0) | 0;
  $1263(19584 | 0) | 0;
  $1275(19668 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1332($0_1) {
  $0_1 = $0_1 | 0;
  $1331(20108 | 0) | 0;
 }
 
 function $1333($0_1) {
  $0_1 = $0_1 | 0;
  $1217($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $1334($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1294($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 44 | 0) >> 2] = $1298($1_1 | 0) | 0;
  HEAP8[($0_1 + 53 | 0) >> 0] = $1295(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) < (9 | 0)) {
    break label$1
   }
   $468(1162 | 0);
   abort();
  }
 }
 
 function $1335($0_1) {
  $0_1 = $0_1 | 0;
  return $1336($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1336($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $7$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($0_1 + 52 | 0) >> 0] | 0)) {
     break label$2
    }
    $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = $18() | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
    break label$1;
   }
   HEAP32[($2_1 + 24 | 0) >> 2] = 1;
   $3_1 = 0;
   $5_1 = HEAP32[($1339($2_1 + 24 | 0 | 0, $0_1 + 44 | 0 | 0) | 0) >> 2] | 0;
   $6_1 = ($5_1 | 0) > (0 | 0) ? $5_1 : 0;
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      if (($3_1 | 0) == ($6_1 | 0)) {
       break label$4
      }
      $4_1 = $1308(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
      if (($4_1 | 0) == (-1 | 0)) {
       break label$3
      }
      HEAP8[(($2_1 + 24 | 0) + $3_1 | 0) >> 0] = $4_1;
      $3_1 = $3_1 + 1 | 0;
      continue label$5;
     };
    }
    label$6 : {
     label$7 : {
      if (!(HEAPU8[($0_1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP8[($2_1 + 23 | 0) >> 0] = HEAPU8[($2_1 + 24 | 0) >> 0] | 0;
      break label$6;
     }
     $6_1 = ($2_1 + 23 | 0) + 1 | 0;
     label$8 : {
      label$9 : while (1) {
       $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       label$10 : {
        $4_1 = ($2_1 + 24 | 0) + $5_1 | 0;
        switch (($1296(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0, $2_1 + 23 | 0 | 0, $6_1 | 0, $2_1 + 12 | 0 | 0) | 0) + -1 | 0 | 0) {
        case 0:
         break label$10;
        case 1:
         break label$3;
        case 2:
         break label$8;
        default:
         break label$6;
        };
       }
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $7_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       if (($5_1 | 0) == (8 | 0)) {
        break label$3
       }
       $3_1 = $1308(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
       if (($3_1 | 0) == (-1 | 0)) {
        break label$3
       }
       HEAP8[$4_1 >> 0] = $3_1;
       $5_1 = $5_1 + 1 | 0;
       continue label$9;
      };
     }
     HEAP8[($2_1 + 23 | 0) >> 0] = HEAPU8[($2_1 + 24 | 0) >> 0] | 0;
    }
    label$11 : {
     label$12 : {
      if ($1_1) {
       break label$12
      }
      label$13 : while (1) {
       if (($5_1 | 0) < (1 | 0)) {
        break label$11
       }
       $5_1 = $5_1 + -1 | 0;
       if (($1307($1108(HEAP8[(($2_1 + 24 | 0) + $5_1 | 0) >> 0] | 0 | 0) | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (-1 | 0)) {
        break label$3
       }
       continue label$13;
      };
     }
     HEAP32[($0_1 + 48 | 0) >> 2] = $1108(HEAP8[($2_1 + 23 | 0) >> 0] | 0 | 0) | 0;
    }
    $3_1 = $1108(HEAP8[($2_1 + 23 | 0) >> 0] | 0 | 0) | 0;
    break label$1;
   }
   $3_1 = $18() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $1337($0_1) {
  $0_1 = $0_1 | 0;
  return $1336($0_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $1338($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = $19($1_1 | 0, $18() | 0 | 0) | 0;
  $4_1 = HEAPU8[($0_1 + 52 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    if (!$3_1) {
     break label$2
    }
    if ($4_1 & 255 | 0) {
     break label$1
    }
    $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = ($19($1_1 | 0, $18() | 0 | 0) | 0) ^ 1 | 0;
    break label$1;
   }
   label$3 : {
    if (!($4_1 & 255 | 0)) {
     break label$3
    }
    HEAP8[($2_1 + 19 | 0) >> 0] = $1231(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) | 0;
    label$4 : {
     switch (($1297(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $2_1 + 19 | 0 | 0, ($2_1 + 19 | 0) + 1 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 20 | 0 | 0) | 0) + -1 | 0 | 0) {
     case 2:
      $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = ($2_1 + 24 | 0) + 1 | 0;
      HEAP8[($2_1 + 24 | 0) >> 0] = $3_1;
     default:
      label$7 : while (1) {
       $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
       if ($3_1 >>> 0 <= ($2_1 + 24 | 0) >>> 0) {
        break label$3
       }
       $3_1 = $3_1 + -1 | 0;
       HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
       if (($1307(HEAP8[$3_1 >> 0] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (-1 | 0)) {
        continue label$7
       }
       break label$7;
      };
      break;
     case 0:
     case 1:
      break label$4;
     };
    }
    $1_1 = $18() | 0;
    break label$1;
   }
   HEAP8[($0_1 + 52 | 0) >> 0] = 1;
   HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
  }
  global$0 = $2_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1339($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1340($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1340($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1341($2_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $1341($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) < (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1342($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 1664 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1343($0_1) {
  $0_1 = $0_1 | 0;
  $1238($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $1344($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1328($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 44 | 0) >> 2] = $1345($1_1 | 0) | 0;
  HEAP8[($0_1 + 53 | 0) >> 0] = $1329(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) < (9 | 0)) {
    break label$1
   }
   $468(1162 | 0);
   abort();
  }
 }
 
 function $1345($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1346($0_1) {
  $0_1 = $0_1 | 0;
  return $1347($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1347($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $7$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($0_1 + 52 | 0) >> 0] | 0)) {
     break label$2
    }
    $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$1
    }
    $4_1 = $372() | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
    break label$1;
   }
   HEAP32[($2_1 + 24 | 0) >> 2] = 1;
   $3_1 = 0;
   $5_1 = HEAP32[($1339($2_1 + 24 | 0 | 0, $0_1 + 44 | 0 | 0) | 0) >> 2] | 0;
   $6_1 = ($5_1 | 0) > (0 | 0) ? $5_1 : 0;
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      if (($3_1 | 0) == ($6_1 | 0)) {
       break label$4
      }
      $4_1 = $1308(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
      if (($4_1 | 0) == (-1 | 0)) {
       break label$3
      }
      HEAP8[(($2_1 + 24 | 0) + $3_1 | 0) >> 0] = $4_1;
      $3_1 = $3_1 + 1 | 0;
      continue label$5;
     };
    }
    label$6 : {
     label$7 : {
      if (!(HEAPU8[($0_1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP8[($2_1 + 24 | 0) >> 0] | 0;
      break label$6;
     }
     $6_1 = $2_1 + 24 | 0;
     label$8 : {
      label$9 : while (1) {
       $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       label$10 : {
        $4_1 = ($2_1 + 24 | 0) + $5_1 | 0;
        switch (($1351(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0, $2_1 + 20 | 0 | 0, $6_1 | 0, $2_1 + 12 | 0 | 0) | 0) + -1 | 0 | 0) {
        case 0:
         break label$10;
        case 1:
         break label$3;
        case 2:
         break label$8;
        default:
         break label$6;
        };
       }
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $7_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       if (($5_1 | 0) == (8 | 0)) {
        break label$3
       }
       $3_1 = $1308(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
       if (($3_1 | 0) == (-1 | 0)) {
        break label$3
       }
       HEAP8[$4_1 >> 0] = $3_1;
       $5_1 = $5_1 + 1 | 0;
       continue label$9;
      };
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = HEAP8[($2_1 + 24 | 0) >> 0] | 0;
    }
    label$11 : {
     label$12 : {
      if ($1_1) {
       break label$12
      }
      label$13 : while (1) {
       if (($5_1 | 0) < (1 | 0)) {
        break label$11
       }
       $5_1 = $5_1 + -1 | 0;
       if (($1307($1166(HEAP8[(($2_1 + 24 | 0) + $5_1 | 0) >> 0] | 0 | 0) | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (-1 | 0)) {
        break label$3
       }
       continue label$13;
      };
     }
     HEAP32[($0_1 + 48 | 0) >> 2] = $1166(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    }
    $3_1 = $1166(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   $3_1 = $372() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $1348($0_1) {
  $0_1 = $0_1 | 0;
  return $1347($0_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $1349($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = $373($1_1 | 0, $372() | 0 | 0) | 0;
  $4_1 = HEAPU8[($0_1 + 52 | 0) >> 0] | 0;
  label$1 : {
   label$2 : {
    if (!$3_1) {
     break label$2
    }
    if ($4_1 & 255 | 0) {
     break label$1
    }
    $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = ($373($1_1 | 0, $372() | 0 | 0) | 0) ^ 1 | 0;
    break label$1;
   }
   label$3 : {
    if (!($4_1 & 255 | 0)) {
     break label$3
    }
    HEAP32[($2_1 + 16 | 0) >> 2] = $1250(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) | 0;
    label$4 : {
     switch (($1350(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $2_1 + 16 | 0 | 0, $2_1 + 20 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 20 | 0 | 0) | 0) + -1 | 0 | 0) {
     case 2:
      $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = $2_1 + 25 | 0;
      HEAP8[($2_1 + 24 | 0) >> 0] = $3_1;
     default:
      label$7 : while (1) {
       $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
       if ($3_1 >>> 0 <= ($2_1 + 24 | 0) >>> 0) {
        break label$3
       }
       $3_1 = $3_1 + -1 | 0;
       HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
       if (($1307(HEAP8[$3_1 >> 0] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (-1 | 0)) {
        continue label$7
       }
       break label$7;
      };
      break;
     case 0:
     case 1:
      break label$4;
     };
    }
    $1_1 = $372() | 0;
    break label$1;
   }
   HEAP8[($0_1 + 52 | 0) >> 0] = 1;
   HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
  }
  global$0 = $2_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1350($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $1351($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $1352($0_1) {
  $0_1 = $0_1 | 0;
  $1217($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $1353($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0;
  $1_1 = $1294($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $1295($1_1 | 0) | 0;
 }
 
 function $1354($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1_1 + 16 | 0;
  label$1 : {
   label$2 : while (1) {
    $3_1 = $1299(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $1_1 + 8 | 0 | 0, $2_1 | 0, $1_1 + 4 | 0 | 0) | 0;
    $4_1 = -1;
    $5_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - ($1_1 + 8 | 0) | 0;
    if (($1463($1_1 + 8 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
     break label$1
    }
    label$3 : {
     switch ($3_1 + -1 | 0 | 0) {
     case 1:
      break label$1;
     case 0:
      continue label$2;
     default:
      break label$3;
     };
    }
    break label$2;
   };
   $4_1 = $1211(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 ? -1 : 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1355($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   label$2 : {
    if (HEAPU8[($0_1 + 44 | 0) >> 0] | 0) {
     break label$2
    }
    $3_1 = 0;
    $2_1 = ($2_1 | 0) > (0 | 0) ? $2_1 : 0;
    label$3 : while (1) {
     if (($3_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $1108(HEAP8[$1_1 >> 0] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) != ($18() | 0 | 0)) {
       break label$4
      }
      return $3_1 | 0;
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = $3_1 + 1 | 0;
     continue label$3;
    };
   }
   $2_1 = $1463($1_1 | 0, 1 | 0, $2_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $1356($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($19($1_1 | 0, $18() | 0 | 0) | 0) {
      break label$3
     }
     HEAP8[($2_1 + 23 | 0) >> 0] = $1231($1_1 | 0) | 0;
     label$4 : {
      if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
       break label$4
      }
      if (($1463($2_1 + 23 | 0 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (1 | 0)) {
       break label$2
      }
      break label$3;
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $2_1 + 24 | 0;
     $3_1 = $2_1 + 32 | 0;
     $4_1 = ($2_1 + 23 | 0) + 1 | 0;
     $5_1 = $2_1 + 23 | 0;
     label$5 : while (1) {
      $6_1 = $1297(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $5_1 | 0, $4_1 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $3_1 | 0, $2_1 + 16 | 0 | 0) | 0;
      if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) == ($5_1 | 0)) {
       break label$2
      }
      label$6 : {
       if (($6_1 | 0) != (3 | 0)) {
        break label$6
       }
       if (($1463($5_1 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (1 | 0)) {
        break label$3
       }
       break label$2;
      }
      if ($6_1 >>> 0 > 1 >>> 0) {
       break label$2
      }
      $5_1 = (HEAP32[($2_1 + 16 | 0) >> 2] | 0) - ($2_1 + 24 | 0) | 0;
      if (($1463($2_1 + 24 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
       break label$2
      }
      $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      if (($6_1 | 0) == (1 | 0)) {
       continue label$5
      }
      break label$5;
     };
    }
    $0_1 = $1293($1_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $18() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $1357($0_1) {
  $0_1 = $0_1 | 0;
  $1238($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $1358($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0;
  $1_1 = $1328($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $1329($1_1 | 0) | 0;
 }
 
 function $1359($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1_1 + 16 | 0;
  label$1 : {
   label$2 : while (1) {
    $3_1 = $1360(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $1_1 + 8 | 0 | 0, $2_1 | 0, $1_1 + 4 | 0 | 0) | 0;
    $4_1 = -1;
    $5_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - ($1_1 + 8 | 0) | 0;
    if (($1463($1_1 + 8 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
     break label$1
    }
    label$3 : {
     switch ($3_1 + -1 | 0 | 0) {
     case 1:
      break label$1;
     case 0:
      continue label$2;
     default:
      break label$3;
     };
    }
    break label$2;
   };
   $4_1 = $1211(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 ? -1 : 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1360($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $1361($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   label$2 : {
    if (HEAPU8[($0_1 + 44 | 0) >> 0] | 0) {
     break label$2
    }
    $3_1 = 0;
    $2_1 = ($2_1 | 0) > (0 | 0) ? $2_1 : 0;
    label$3 : while (1) {
     if (($3_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     label$4 : {
      if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $1166(HEAP32[$1_1 >> 2] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) != ($372() | 0 | 0)) {
       break label$4
      }
      return $3_1 | 0;
     }
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 1 | 0;
     continue label$3;
    };
   }
   $2_1 = $1463($1_1 | 0, 4 | 0, $2_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $1362($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($373($1_1 | 0, $372() | 0 | 0) | 0) {
      break label$3
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = $1250($1_1 | 0) | 0;
     label$4 : {
      if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
       break label$4
      }
      if (($1463($2_1 + 20 | 0 | 0, 4 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != (1 | 0)) {
       break label$2
      }
      break label$3;
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $2_1 + 24 | 0;
     $3_1 = $2_1 + 32 | 0;
     $4_1 = $2_1 + 24 | 0;
     $5_1 = $2_1 + 20 | 0;
     label$5 : while (1) {
      $6_1 = $1350(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $5_1 | 0, $4_1 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $3_1 | 0, $2_1 + 16 | 0 | 0) | 0;
      if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) == ($5_1 | 0)) {
       break label$2
      }
      label$6 : {
       if (($6_1 | 0) != (3 | 0)) {
        break label$6
       }
       if (($1463($5_1 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (1 | 0)) {
        break label$3
       }
       break label$2;
      }
      if ($6_1 >>> 0 > 1 >>> 0) {
       break label$2
      }
      $5_1 = (HEAP32[($2_1 + 16 | 0) >> 2] | 0) - ($2_1 + 24 | 0) | 0;
      if (($1463($2_1 + 24 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
       break label$2
      }
      $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      if (($6_1 | 0) == (1 | 0)) {
       continue label$5
      }
      break label$5;
     };
    }
    $0_1 = $1363($1_1 | 0) | 0;
    break label$1;
   }
   $0_1 = $372() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $1363($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($373($0_1 | 0, $372() | 0 | 0) | 0)) {
    break label$1
   }
   $0_1 = ($372() | 0) ^ -1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $1364() {
  $1309();
 }
 
 function $1365() {
  
 }
 
 function $1366($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    if ((($0_1 - $1_1 | 0) >> 2 | 0) >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    label$3 : while (1) {
     $2_1 = $2_1 + -1 | 0;
     $3_1 = $2_1 << 2 | 0;
     HEAP32[($0_1 + $3_1 | 0) >> 2] = HEAP32[($1_1 + $3_1 | 0) >> 2] | 0;
     if ($2_1) {
      continue label$3
     }
     break label$1;
    };
   }
   if (!$2_1) {
    break label$1
   }
   $3_1 = $0_1;
   label$4 : while (1) {
    HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$4
    }
    break label$4;
   };
  }
  return $0_1 | 0;
 }
 
 function $1367($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $0_1;
   label$2 : while (1) {
    HEAP32[$3_1 >> 2] = $1_1;
    $3_1 = $3_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $1368($0_1) {
  $0_1 = $0_1 | 0;
  $1033(1399 | 0);
  abort();
 }
 
 function $1369($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $1460($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1370($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  label$1 : {
   $9_1 = $1043($0_1 | 0) | 0;
   if (($9_1 + ($1_1 ^ -1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $10_1 = $263($0_1 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((($9_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[($8_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
     HEAP32[($8_1 + 12 | 0) >> 2] = $2_1 + $1_1 | 0;
     $2_1 = $1046(HEAP32[($43($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    $2_1 = $9_1 + -1 | 0;
   }
   $11_1 = $2_1 + 1 | 0;
   $2_1 = $1048($988($0_1 | 0) | 0 | 0, $11_1 | 0) | 0;
   $545($0_1 | 0);
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $1229($1052($2_1 | 0) | 0 | 0, $1052($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$5 : {
    if (!$6_1) {
     break label$5
    }
    $1229(($1052($2_1 | 0) | 0) + $4_1 | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
   }
   label$6 : {
    $9_1 = $3_1 - ($4_1 + $5_1 | 0) | 0;
    if (!$9_1) {
     break label$6
    }
    $1229((($1052($2_1 | 0) | 0) + $4_1 | 0) + $6_1 | 0 | 0, (($1052($10_1 | 0) | 0) + $4_1 | 0) + $5_1 | 0 | 0, $9_1 | 0) | 0;
   }
   label$7 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (11 | 0)) {
     break label$7
    }
    $986($988($0_1 | 0) | 0 | 0, $10_1 | 0, $1_1 | 0);
   }
   $1050($0_1 | 0, $2_1 | 0);
   $1051($0_1 | 0, $11_1 | 0);
   $4_1 = ($6_1 + $4_1 | 0) + $9_1 | 0;
   $548($0_1 | 0, $4_1 | 0);
   HEAP8[($8_1 + 7 | 0) >> 0] = 0;
   $547($2_1 + $4_1 | 0 | 0, $8_1 + 7 | 0 | 0);
   global$0 = $8_1 + 16 | 0;
   return;
  }
  $1368($0_1 | 0);
  abort();
 }
 
 function $1371($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($29($0_1 | 0) | 0)) {
    break label$1
   }
   $986($988($0_1 | 0) | 0 | 0, $546($0_1 | 0) | 0 | 0, $262($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1372($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  label$1 : {
   $8_1 = $1043($0_1 | 0) | 0;
   if (($8_1 - $1_1 | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $9_1 = $263($0_1 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((($8_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[($7_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
     HEAP32[($7_1 + 12 | 0) >> 2] = $2_1 + $1_1 | 0;
     $2_1 = $1046(HEAP32[($43($7_1 + 12 | 0 | 0, $7_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    $2_1 = $8_1 + -1 | 0;
   }
   $8_1 = $2_1 + 1 | 0;
   $2_1 = $1048($988($0_1 | 0) | 0 | 0, $8_1 | 0) | 0;
   $545($0_1 | 0);
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $1229($1052($2_1 | 0) | 0 | 0, $1052($9_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$5 : {
    $3_1 = $3_1 - ($4_1 + $5_1 | 0) | 0;
    if (!$3_1) {
     break label$5
    }
    $1229((($1052($2_1 | 0) | 0) + $4_1 | 0) + $6_1 | 0 | 0, (($1052($9_1 | 0) | 0) + $4_1 | 0) + $5_1 | 0 | 0, $3_1 | 0) | 0;
   }
   label$6 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (11 | 0)) {
     break label$6
    }
    $986($988($0_1 | 0) | 0 | 0, $9_1 | 0, $1_1 | 0);
   }
   $1050($0_1 | 0, $2_1 | 0);
   $1051($0_1 | 0, $8_1 | 0);
   global$0 = $7_1 + 16 | 0;
   return;
  }
  $1368($0_1 | 0);
  abort();
 }
 
 function $1373($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1459($0_1 | 0, $1108($2_1 | 0) | 0 | 0, $1_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1374($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1043($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $550($0_1 | 0, $2_1 | 0);
     $4_1 = $549($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = $1046($2_1 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    $4_1 = $1048($988($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
    $1050($0_1 | 0, $4_1 | 0);
    $1051($0_1 | 0, $5_1 | 0);
    $548($0_1 | 0, $2_1 | 0);
   }
   $1229($1052($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $547($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1368($0_1 | 0);
  abort();
 }
 
 function $1375($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $3_1 = $549($0_1 | 0) | 0;
     $550($0_1 | 0, $2_1 | 0);
     break label$2;
    }
    if (($1043($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
     break label$1
    }
    $3_1 = $1046($2_1 | 0) | 0;
    $4_1 = $3_1 + 1 | 0;
    $3_1 = $1048($988($0_1 | 0) | 0 | 0, $4_1 | 0) | 0;
    $1050($0_1 | 0, $3_1 | 0);
    $1051($0_1 | 0, $4_1 | 0);
    $548($0_1 | 0, $2_1 | 0);
   }
   $1229($1052($3_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0;
   return;
  }
  $1368($0_1 | 0);
  abort();
 }
 
 function $1376($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $225($0_1 | 0) | 0;
    if ($4_1 >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    $4_1 = $1052($263($0_1 | 0) | 0 | 0) | 0;
    $1369($4_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $547($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
    $1184($0_1 | 0, $2_1 | 0);
    $1142($0_1 | 0, $2_1 | 0);
    break label$1;
   }
   $5_1 = $89($0_1 | 0) | 0;
   $1370($0_1 | 0, $4_1 | 0, $2_1 - $4_1 | 0 | 0, $5_1 | 0, 0 | 0, $5_1 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1377($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1376($0_1 | 0, $1_1 | 0, $3($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1378($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $225($0_1 | 0) | 0;
    $5_1 = $89($0_1 | 0) | 0;
    if (($4_1 - $5_1 | 0) >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    if (!$2_1) {
     break label$1
    }
    $4_1 = $1052($263($0_1 | 0) | 0 | 0) | 0;
    $1229($4_1 + $5_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $2_1 = $5_1 + $2_1 | 0;
    $1184($0_1 | 0, $2_1 | 0);
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $547($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
    break label$1;
   }
   $1370($0_1 | 0, $4_1 | 0, ($5_1 + $2_1 | 0) - $4_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1379($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1043($0_1 | 0) | 0) >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 > 10 >>> 0) {
      break label$3
     }
     $550($0_1 | 0, $1_1 | 0);
     $4_1 = $549($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = $1046($1_1 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    $4_1 = $1048($988($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
    $1050($0_1 | 0, $4_1 | 0);
    $1051($0_1 | 0, $5_1 | 0);
    $548($0_1 | 0, $1_1 | 0);
   }
   $1373($1052($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $547($4_1 + $1_1 | 0 | 0, $3_1 + 15 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1368($0_1 | 0);
  abort();
 }
 
 function $1380($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!($29($0_1 | 0) | 0)) {
        break label$5
       }
       $1_1 = $262($0_1 | 0) | 0;
       $3_1 = $96($0_1 | 0) | 0;
       $4_1 = $1_1 + -1 | 0;
       if (($3_1 | 0) == ($4_1 | 0)) {
        break label$4
       }
       break label$2;
      }
      $3_1 = 10;
      $4_1 = 10;
      $1_1 = $100($0_1 | 0) | 0;
      if (($1_1 | 0) != (10 | 0)) {
       break label$3
      }
     }
     $1372($0_1 | 0, $4_1 | 0, 1 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
     $1_1 = $3_1;
     if ($29($0_1 | 0) | 0) {
      break label$2
     }
    }
    $4_1 = $549($0_1 | 0) | 0;
    $550($0_1 | 0, $1_1 + 1 | 0 | 0);
    break label$1;
   }
   $4_1 = $546($0_1 | 0) | 0;
   $548($0_1 | 0, $3_1 + 1 | 0 | 0);
   $1_1 = $3_1;
  }
  $0_1 = $4_1 + $1_1 | 0;
  $547($0_1 | 0, $2_1 + 15 | 0 | 0);
  HEAP8[($2_1 + 14 | 0) >> 0] = 0;
  $547($0_1 + 1 | 0 | 0, $2_1 + 14 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1381($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $4_1 = $225($0_1 | 0) | 0;
   $5_1 = $89($0_1 | 0) | 0;
   $6_1 = $5_1 + $1_1 | 0;
   label$2 : {
    if (($4_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    $1372($0_1 | 0, $4_1 | 0, $6_1 - $4_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, 0 | 0);
   }
   $4_1 = $263($0_1 | 0) | 0;
   $1373(($1052($4_1 | 0) | 0) + $5_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   $1184($0_1 | 0, $6_1 | 0);
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $547($4_1 + $6_1 | 0 | 0, $3_1 + 15 | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1382($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   $3_1 = $89($0_1 | 0) | 0;
   if ($3_1 >>> 0 >= $1_1 >>> 0) {
    break label$1
   }
   $1381($0_1 | 0, $1_1 - $3_1 | 0 | 0, $2_1 | 0) | 0;
   return;
  }
  $1143($0_1 | 0, $1_1 | 0);
 }
 
 function $1383($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $0_1 = $1366($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1384($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  label$1 : {
   $9_1 = $1112($0_1 | 0) | 0;
   if (($9_1 + ($1_1 ^ -1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $10_1 = $368($0_1 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((($9_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[($8_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
     HEAP32[($8_1 + 12 | 0) >> 2] = $2_1 + $1_1 | 0;
     $2_1 = $1113(HEAP32[($43($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    $2_1 = $9_1 + -1 | 0;
   }
   $11_1 = $2_1 + 1 | 0;
   $2_1 = $1114($996($0_1 | 0) | 0 | 0, $11_1 | 0) | 0;
   $608($0_1 | 0);
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $1248($1127($2_1 | 0) | 0 | 0, $1127($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$5 : {
    if (!$6_1) {
     break label$5
    }
    $1248(($1127($2_1 | 0) | 0) + ($4_1 << 2 | 0) | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
   }
   label$6 : {
    $9_1 = $3_1 - ($4_1 + $5_1 | 0) | 0;
    if (!$9_1) {
     break label$6
    }
    $3_1 = $4_1 << 2 | 0;
    $1248((($1127($2_1 | 0) | 0) + $3_1 | 0) + ($6_1 << 2 | 0) | 0 | 0, (($1127($10_1 | 0) | 0) + $3_1 | 0) + ($5_1 << 2 | 0) | 0 | 0, $9_1 | 0) | 0;
   }
   label$7 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (2 | 0)) {
     break label$7
    }
    $994($996($0_1 | 0) | 0 | 0, $10_1 | 0, $1_1 | 0);
   }
   $1115($0_1 | 0, $2_1 | 0);
   $1116($0_1 | 0, $11_1 | 0);
   $4_1 = ($6_1 + $4_1 | 0) + $9_1 | 0;
   $611($0_1 | 0, $4_1 | 0);
   HEAP32[($8_1 + 4 | 0) >> 2] = 0;
   $610($2_1 + ($4_1 << 2 | 0) | 0 | 0, $8_1 + 4 | 0 | 0);
   global$0 = $8_1 + 16 | 0;
   return;
  }
  $1368($0_1 | 0);
  abort();
 }
 
 function $1385($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!($432($0_1 | 0) | 0)) {
    break label$1
   }
   $994($996($0_1 | 0) | 0 | 0, $609($0_1 | 0) | 0 | 0, $998($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1386($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  label$1 : {
   $8_1 = $1112($0_1 | 0) | 0;
   if (($8_1 - $1_1 | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   $9_1 = $368($0_1 | 0) | 0;
   label$2 : {
    label$3 : {
     if ((($8_1 >>> 1 | 0) + -16 | 0) >>> 0 <= $1_1 >>> 0) {
      break label$3
     }
     HEAP32[($7_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
     HEAP32[($7_1 + 12 | 0) >> 2] = $2_1 + $1_1 | 0;
     $2_1 = $1113(HEAP32[($43($7_1 + 12 | 0 | 0, $7_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
     break label$2;
    }
    $2_1 = $8_1 + -1 | 0;
   }
   $8_1 = $2_1 + 1 | 0;
   $2_1 = $1114($996($0_1 | 0) | 0 | 0, $8_1 | 0) | 0;
   $608($0_1 | 0);
   label$4 : {
    if (!$4_1) {
     break label$4
    }
    $1248($1127($2_1 | 0) | 0 | 0, $1127($9_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   label$5 : {
    $3_1 = $3_1 - ($4_1 + $5_1 | 0) | 0;
    if (!$3_1) {
     break label$5
    }
    $4_1 = $4_1 << 2 | 0;
    $1248((($1127($2_1 | 0) | 0) + $4_1 | 0) + ($6_1 << 2 | 0) | 0 | 0, (($1127($9_1 | 0) | 0) + $4_1 | 0) + ($5_1 << 2 | 0) | 0 | 0, $3_1 | 0) | 0;
   }
   label$6 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (2 | 0)) {
     break label$6
    }
    $994($996($0_1 | 0) | 0 | 0, $9_1 | 0, $1_1 | 0);
   }
   $1115($0_1 | 0, $2_1 | 0);
   $1116($0_1 | 0, $8_1 | 0);
   global$0 = $7_1 + 16 | 0;
   return;
  }
  $1368($0_1 | 0);
  abort();
 }
 
 function $1387($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $0_1 = $1367($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $1388($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1112($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $613($0_1 | 0, $2_1 | 0);
     $4_1 = $612($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = $1113($2_1 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    $4_1 = $1114($996($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
    $1115($0_1 | 0, $4_1 | 0);
    $1116($0_1 | 0, $5_1 | 0);
    $611($0_1 | 0, $2_1 | 0);
   }
   $1248($1127($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   $610($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1368($0_1 | 0);
  abort();
 }
 
 function $1389($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $3_1 = $612($0_1 | 0) | 0;
     $613($0_1 | 0, $2_1 | 0);
     break label$2;
    }
    if (($1112($0_1 | 0) | 0) >>> 0 < $2_1 >>> 0) {
     break label$1
    }
    $3_1 = $1113($2_1 | 0) | 0;
    $4_1 = $3_1 + 1 | 0;
    $3_1 = $1114($996($0_1 | 0) | 0 | 0, $4_1 | 0) | 0;
    $1115($0_1 | 0, $3_1 | 0);
    $1116($0_1 | 0, $4_1 | 0);
    $611($0_1 | 0, $2_1 | 0);
   }
   $1248($1127($3_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0;
   return;
  }
  $1368($0_1 | 0);
  abort();
 }
 
 function $1390($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $954($0_1 | 0) | 0;
    if ($4_1 >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    $4_1 = $1127($368($0_1 | 0) | 0 | 0) | 0;
    $1383($4_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    $610($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
    $956($0_1 | 0, $2_1 | 0);
    $955($0_1 | 0, $2_1 | 0);
    break label$1;
   }
   $5_1 = $282($0_1 | 0) | 0;
   $1384($0_1 | 0, $4_1 | 0, $2_1 - $4_1 | 0 | 0, $5_1 | 0, 0 | 0, $5_1 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1391($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1390($0_1 | 0, $1_1 | 0, $912($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1392($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = $954($0_1 | 0) | 0;
    $5_1 = $282($0_1 | 0) | 0;
    if (($4_1 - $5_1 | 0) >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    if (!$2_1) {
     break label$1
    }
    $4_1 = $1127($368($0_1 | 0) | 0 | 0) | 0;
    $1248($4_1 + ($5_1 << 2 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $2_1 = $5_1 + $2_1 | 0;
    $956($0_1 | 0, $2_1 | 0);
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    $610($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
    break label$1;
   }
   $1384($0_1 | 0, $4_1 | 0, ($5_1 + $2_1 | 0) - $4_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1393($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($1112($0_1 | 0) | 0) >>> 0 < $1_1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($1_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     $613($0_1 | 0, $1_1 | 0);
     $4_1 = $612($0_1 | 0) | 0;
     break label$2;
    }
    $4_1 = $1113($1_1 | 0) | 0;
    $5_1 = $4_1 + 1 | 0;
    $4_1 = $1114($996($0_1 | 0) | 0 | 0, $5_1 | 0) | 0;
    $1115($0_1 | 0, $4_1 | 0);
    $1116($0_1 | 0, $5_1 | 0);
    $611($0_1 | 0, $1_1 | 0);
   }
   $1387($1127($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   $610($4_1 + ($1_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1368($0_1 | 0);
  abort();
 }
 
 function $1394($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!($432($0_1 | 0) | 0)) {
        break label$5
       }
       $1_1 = $998($0_1 | 0) | 0;
       $3_1 = $433($0_1 | 0) | 0;
       $4_1 = $1_1 + -1 | 0;
       if (($3_1 | 0) == ($4_1 | 0)) {
        break label$4
       }
       break label$2;
      }
      $3_1 = 1;
      $4_1 = 1;
      $1_1 = $434($0_1 | 0) | 0;
      if (($1_1 | 0) != (1 | 0)) {
       break label$3
      }
     }
     $1386($0_1 | 0, $4_1 | 0, 1 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
     $1_1 = $3_1;
     if ($432($0_1 | 0) | 0) {
      break label$2
     }
    }
    $4_1 = $612($0_1 | 0) | 0;
    $613($0_1 | 0, $1_1 + 1 | 0 | 0);
    break label$1;
   }
   $4_1 = $609($0_1 | 0) | 0;
   $611($0_1 | 0, $3_1 + 1 | 0 | 0);
   $1_1 = $3_1;
  }
  $0_1 = $4_1 + ($1_1 << 2 | 0) | 0;
  $610($0_1 | 0, $2_1 + 12 | 0 | 0);
  HEAP32[($2_1 + 8 | 0) >> 2] = 0;
  $610($0_1 + 4 | 0 | 0, $2_1 + 8 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1395($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $170(20116 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if ((HEAP32[$0_1 >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    $1396(20144 | 0, 20116 | 0) | 0;
    continue label$2;
   };
  }
  label$3 : {
   if (HEAP32[$0_1 >> 2] | 0) {
    break label$3
   }
   $1397($0_1 | 0);
   $171(20116 | 0) | 0;
   FUNCTION_TABLE[$2_1 | 0]($1_1);
   $170(20116 | 0) | 0;
   $1398($0_1 | 0);
   $171(20116 | 0) | 0;
   $1399(20144 | 0) | 0;
   return;
  }
  $171(20116 | 0) | 0;
 }
 
 function $1396($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $60($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1397($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 1;
 }
 
 function $1398($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = -1;
 }
 
 function $1399($0_1) {
  $0_1 = $0_1 | 0;
  return $61($0_1 | 0) | 0 | 0;
 }
 
 function $1400() {
  return ($1401() | 0 | 0) > (0 | 0) | 0;
 }
 
 function $1401() {
  return $1447() | 0 | 0;
 }
 
 function $1402($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  abort();
 }
 
 function $1403($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = $1405($1404($1_1 | 0, $0_1 | 0) | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1404($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1406($0_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1405($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  label$1 : {
   if ($1408($1407($1_1 + 8 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) {
    break label$1
   }
   $2_1 = $1410($1409($0_1 | 0) | 0 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1406($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + 1 | 0;
  return $0_1 | 0;
 }
 
 function $1407($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1408($0_1) {
  $0_1 = $0_1 | 0;
  return $1415(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1409($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1410($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $0_1 = HEAPU8[$2_1 >> 0] | 0;
    if (($0_1 | 0) == (1 | 0)) {
     break label$2
    }
    if ($0_1 & 2 | 0) {
     break label$1
    }
    HEAP8[$2_1 >> 0] = 2;
    $1_1 = 1;
   }
   return $1_1 | 0;
  }
  $1402(1306 | 0, 0 | 0);
  abort();
 }
 
 function $1411($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1412($1404($1_1 | 0, $0_1 | 0) | 0 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1412($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1413($1407($1_1 + 8 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
  $1414($1409($0_1 | 0) | 0 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1413($0_1) {
  $0_1 = $0_1 | 0;
  $1416(HEAP32[$0_1 >> 2] | 0 | 0);
 }
 
 function $1414($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 0] = 1;
 }
 
 function $1415($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 >> 0] | 0 | 0;
 }
 
 function $1416($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[$0_1 >> 0] = 1;
 }
 
 function $1417($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1418() {
  return $1417(20192 | 0) | 0 | 0;
 }
 
 function $1419() {
  $1402(1618 | 0, 0 | 0);
  abort();
 }
 
 function $1420($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1421($0_1) {
  $0_1 = $0_1 | 0;
  $1420($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1422($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1423($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1424($0_1) {
  $0_1 = $0_1 | 0;
  $1421($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $1425($0_1) {
  $0_1 = $0_1 | 0;
  $1421($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $1426($0_1) {
  $0_1 = $0_1 | 0;
  $1421($0_1 | 0) | 0;
  $1303($0_1 | 0);
 }
 
 function $1427($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  }
  label$2 : {
   if (($0_1 | 0) != ($1_1 | 0)) {
    break label$2
   }
   return 1 | 0;
  }
  return !($142($1428($0_1 | 0) | 0 | 0, $1428($1_1 | 0) | 0 | 0) | 0) | 0;
 }
 
 function $1428($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1429($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 64 | 0;
  global$0 = $3_1;
  $4_1 = 1;
  label$1 : {
   if ($1427($0_1 | 0, $1_1 | 0, 0 | 0) | 0) {
    break label$1
   }
   $4_1 = 0;
   if (!$1_1) {
    break label$1
   }
   $4_1 = 0;
   $1_1 = $1430($1_1 | 0, 13976 | 0, 14024 | 0, 0 | 0) | 0;
   if (!$1_1) {
    break label$1
   }
   $1459($3_1 + 8 | 0 | 4 | 0 | 0, 0 | 0, 52 | 0) | 0;
   HEAP32[($3_1 + 56 | 0) >> 2] = 1;
   HEAP32[($3_1 + 20 | 0) >> 2] = -1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1, $3_1 + 8 | 0, HEAP32[$2_1 >> 2] | 0, 1);
   label$2 : {
    $4_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
    if (($4_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
   }
   $4_1 = ($4_1 | 0) == (1 | 0);
  }
  global$0 = $3_1 + 64 | 0;
  return $4_1 | 0;
 }
 
 function $1430($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$0_1 >> 2] | 0;
  $6_1 = HEAP32[($5_1 + -4 | 0) >> 2] | 0;
  $5_1 = HEAP32[($5_1 + -8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($4_1 + 16 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $2_1;
  $1_1 = 0;
  $1459($4_1 + 24 | 0 | 0, 0 | 0, 39 | 0) | 0;
  $0_1 = $0_1 + $5_1 | 0;
  label$1 : {
   label$2 : {
    if (!($1427($6_1 | 0, $2_1 | 0, 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 56 | 0) >> 2] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6_1, $4_1 + 8 | 0, $0_1, $0_1, 1, 0);
    $1_1 = (HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0) ? $0_1 : 0;
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($6_1, $4_1 + 8 | 0, $0_1, 1, 0);
   label$3 : {
    switch (HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0) {
    case 0:
     $1_1 = (wasm2js_i32$0 = (wasm2js_i32$3 = (wasm2js_i32$6 = HEAP32[($4_1 + 28 | 0) >> 2] | 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = (HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), wasm2js_i32$4 = 0, wasm2js_i32$5 = (HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     break label$1;
    case 1:
     break label$3;
    default:
     break label$1;
    };
   }
   label$5 : {
    if ((HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break label$5
    }
    if (HEAP32[($4_1 + 48 | 0) >> 2] | 0) {
     break label$1
    }
    if ((HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($4_1 + 40 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
   }
   $1_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 64 | 0;
  return $1_1 | 0;
 }
 
 function $1431($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   if ($4_1) {
    break label$1
   }
   HEAP32[($1_1 + 36 | 0) >> 2] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   return;
  }
  label$2 : {
   label$3 : {
    if (($4_1 | 0) != ($2_1 | 0)) {
     break label$3
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
    return;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = 2;
   HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function $1432($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($1427($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $1431($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
 }
 
 function $1433($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (!($1427($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $1431($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $1434($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    $5_1 = 0;
    break label$1;
   }
   $5_1 = $4_1 >> 8 | 0;
   if (!($4_1 & 1 | 0)) {
    break label$1
   }
   $5_1 = $1435(HEAP32[$2_1 >> 2] | 0 | 0, $5_1 | 0) | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1 + $5_1 | 0, $4_1 & 2 | 0 ? $3_1 : 2);
 }
 
 function $1435($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[($0_1 + $1_1 | 0) >> 2] | 0 | 0;
 }
 
 function $1436($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!($1427($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   $1431($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $5_1 = $0_1 + 16 | 0;
  $1434($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  label$2 : {
   if (($4_1 | 0) < (2 | 0)) {
    break label$2
   }
   $4_1 = $5_1 + ($4_1 << 3 | 0) | 0;
   $0_1 = $0_1 + 24 | 0;
   label$3 : while (1) {
    $1434($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    $0_1 = $0_1 + 8 | 0;
    if ($0_1 >>> 0 < $4_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
 }
 
 function $1437($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 1;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
    break label$1
   }
   HEAP8[($1_1 + 52 | 0) >> 0] = 1;
   label$2 : {
    label$3 : {
     $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     if ($3_1) {
      break label$3
     }
     HEAP32[($1_1 + 36 | 0) >> 2] = 1;
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
     if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$1
     }
     if (($4_1 | 0) == (1 | 0)) {
      break label$2
     }
     break label$1;
    }
    label$4 : {
     if (($3_1 | 0) != ($2_1 | 0)) {
      break label$4
     }
     label$5 : {
      $3_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      if (($3_1 | 0) != (2 | 0)) {
       break label$5
      }
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
      $3_1 = $4_1;
     }
     if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$1
     }
     if (($3_1 | 0) == (1 | 0)) {
      break label$2
     }
     break label$1;
    }
    HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
  }
 }
 
 function $1438($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
    break label$1
   }
   if ((HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $3_1;
  }
 }
 
 function $1439($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   if (!($1427($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $1438($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($1427($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     $5_1 = $0_1 + 16 | 0;
     $3_1 = $5_1 + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
     $6_1 = 0;
     $7_1 = 0;
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : while (1) {
         if ($5_1 >>> 0 >= $3_1 >>> 0) {
          break label$9
         }
         HEAP16[($1_1 + 52 | 0) >> 1] = 0;
         $1440($5_1 | 0, $1_1 | 0, $2_1 | 0, $2_1 | 0, 1 | 0, $4_1 | 0);
         if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
          break label$9
         }
         label$11 : {
          if (!(HEAPU8[($1_1 + 53 | 0) >> 0] | 0)) {
           break label$11
          }
          label$12 : {
           if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
            break label$12
           }
           $8_1 = 1;
           if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
            break label$8
           }
           $6_1 = 1;
           $7_1 = 1;
           $8_1 = 1;
           if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
            break label$11
           }
           break label$8;
          }
          $6_1 = 1;
          $8_1 = $7_1;
          if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
           break label$8
          }
         }
         $5_1 = $5_1 + 8 | 0;
         continue label$10;
        };
       }
       $5_1 = 4;
       $8_1 = $7_1;
       if (!($6_1 & 1 | 0)) {
        break label$7
       }
      }
      $5_1 = 3;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = $5_1;
     if ($8_1 & 1 | 0) {
      break label$2
     }
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $8_1 = $0_1 + 16 | 0;
   $1441($8_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   if (($5_1 | 0) < (2 | 0)) {
    break label$2
   }
   $8_1 = $8_1 + ($5_1 << 3 | 0) | 0;
   $5_1 = $0_1 + 24 | 0;
   label$13 : {
    label$14 : {
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if ($0_1 & 2 | 0) {
      break label$14
     }
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$13
     }
    }
    label$15 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     $1441($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $8_1 >>> 0) {
      continue label$15
     }
     break label$2;
    };
   }
   label$16 : {
    if ($0_1 & 1 | 0) {
     break label$16
    }
    label$17 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
     $1441($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $8_1 >>> 0) {
      continue label$17
     }
     break label$2;
    };
   }
   label$18 : while (1) {
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$19 : {
     if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$19
     }
     if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
    }
    $1441($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
    $5_1 = $5_1 + 8 | 0;
    if ($5_1 >>> 0 < $8_1 >>> 0) {
     continue label$18
    }
    break label$18;
   };
  }
 }
 
 function $1440($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $7_1 = $6_1 >> 8 | 0;
  label$1 : {
   if (!($6_1 & 1 | 0)) {
    break label$1
   }
   $7_1 = $1435(HEAP32[$3_1 >> 2] | 0 | 0, $7_1 | 0) | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1 + $7_1 | 0, $6_1 & 2 | 0 ? $4_1 : 2, $5_1);
 }
 
 function $1441($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $6_1 = $5_1 >> 8 | 0;
  label$1 : {
   if (!($5_1 & 1 | 0)) {
    break label$1
   }
   $6_1 = $1435(HEAP32[$2_1 >> 2] | 0 | 0, $6_1 | 0) | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1 + $6_1 | 0, $5_1 & 2 | 0 ? $3_1 : 2, $4_1);
 }
 
 function $1442($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($1427($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $1438($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!($1427($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$4
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    label$6 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     HEAP16[($1_1 + 52 | 0) >> 1] = 0;
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $2_1, 1, $4_1);
     label$7 : {
      if (!(HEAPU8[($1_1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP32[($1_1 + 44 | 0) >> 2] = 3;
      if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
       break label$6
      }
      break label$2;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = 4;
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1);
  }
 }
 
 function $1443($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  label$1 : {
   if (!($1427($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$1
   }
   $1438($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  label$2 : {
   if (!($1427($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
      break label$4
     }
     if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
      break label$3
     }
    }
    if (($3_1 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = 1;
    return;
   }
   HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
   label$5 : {
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$5
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$5
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   }
   HEAP32[($1_1 + 44 | 0) >> 2] = 4;
  }
 }
 
 function $1444($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  label$1 : {
   if (!($1427($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $1437($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $6_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 0;
  $8_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  HEAP8[($1_1 + 52 | 0) >> 0] = 0;
  $9_1 = $0_1 + 16 | 0;
  $1440($9_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  $10_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $6_1 = $6_1 | $10_1 | 0;
  $11_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  $8_1 = $8_1 | $11_1 | 0;
  label$2 : {
   if (($7_1 | 0) < (2 | 0)) {
    break label$2
   }
   $9_1 = $9_1 + ($7_1 << 3 | 0) | 0;
   $7_1 = $0_1 + 24 | 0;
   label$3 : while (1) {
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$4 : {
     label$5 : {
      if (!($11_1 & 255 | 0)) {
       break label$5
      }
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       break label$2
      }
      if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
       break label$4
      }
      break label$2;
     }
     if (!($10_1 & 255 | 0)) {
      break label$4
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP16[($1_1 + 52 | 0) >> 1] = 0;
    $1440($7_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
    $10_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
    $6_1 = $10_1 | $6_1 | 0;
    $11_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
    $8_1 = $11_1 | $8_1 | 0;
    $7_1 = $7_1 + 8 | 0;
    if ($7_1 >>> 0 < $9_1 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  HEAP8[($1_1 + 53 | 0) >> 0] = ($6_1 & 255 | 0 | 0) != (0 | 0);
  HEAP8[($1_1 + 52 | 0) >> 0] = ($8_1 & 255 | 0 | 0) != (0 | 0);
 }
 
 function $1445($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($1427($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $1437($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $1446($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!($1427($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $1437($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
  }
 }
 
 function $1447() {
  return 0 | 0;
 }
 
 function $1448($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $3_1 = 0, $2_1 = 0, $11_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, i64toi32_i32$2 = 0, $10_1 = 0, $1_1 = 0, $79_1 = 0, $92_1 = 0, $103_1 = 0, $111_1 = 0, $119_1 = 0, $210_1 = 0, $221_1 = 0, $229_1 = 0, $237_1 = 0, $272_1 = 0, $339_1 = 0, $346_1 = 0, $353_1 = 0, $444_1 = 0, $455_1 = 0, $463_1 = 0, $471_1 = 0, $1157_1 = 0, $1164_1 = 0, $1171_1 = 0, $1293_1 = 0, $1295_1 = 0, $1356_1 = 0, $1363_1 = 0, $1370_1 = 0, $1606 = 0, $1613 = 0, $1620 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              if ($0_1 >>> 0 > 244 >>> 0) {
               break label$12
              }
              label$13 : {
               $2_1 = HEAP32[(0 + 20196 | 0) >> 2] | 0;
               $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & -8 | 0;
               $4_1 = $3_1 >>> 3 | 0;
               $0_1 = $2_1 >>> $4_1 | 0;
               if (!($0_1 & 3 | 0)) {
                break label$13
               }
               $5_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
               $6_1 = $5_1 << 3 | 0;
               $4_1 = HEAP32[($6_1 + 20244 | 0) >> 2] | 0;
               $0_1 = $4_1 + 8 | 0;
               label$14 : {
                label$15 : {
                 $3_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                 $6_1 = $6_1 + 20236 | 0;
                 if (($3_1 | 0) != ($6_1 | 0)) {
                  break label$15
                 }
                 HEAP32[(0 + 20196 | 0) >> 2] = $2_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
                 break label$14;
                }
                HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
                HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
               }
               $5_1 = $5_1 << 3 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 3 | 0;
               $4_1 = $4_1 + $5_1 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
               break label$1;
              }
              $7_1 = HEAP32[(0 + 20204 | 0) >> 2] | 0;
              if ($3_1 >>> 0 <= $7_1 >>> 0) {
               break label$11
              }
              label$16 : {
               if (!$0_1) {
                break label$16
               }
               label$17 : {
                label$18 : {
                 $79_1 = $0_1 << $4_1 | 0;
                 $0_1 = 2 << $4_1 | 0;
                 $0_1 = $79_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0;
                 $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                 $92_1 = $0_1;
                 $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                 $4_1 = $92_1 >>> $0_1 | 0;
                 $5_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                 $103_1 = $5_1 | $0_1 | 0;
                 $0_1 = $4_1 >>> $5_1 | 0;
                 $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                 $111_1 = $103_1 | $4_1 | 0;
                 $0_1 = $0_1 >>> $4_1 | 0;
                 $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                 $119_1 = $111_1 | $4_1 | 0;
                 $0_1 = $0_1 >>> $4_1 | 0;
                 $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                 $5_1 = ($119_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0;
                 $6_1 = $5_1 << 3 | 0;
                 $4_1 = HEAP32[($6_1 + 20244 | 0) >> 2] | 0;
                 $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                 $6_1 = $6_1 + 20236 | 0;
                 if (($0_1 | 0) != ($6_1 | 0)) {
                  break label$18
                 }
                 $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
                 HEAP32[(0 + 20196 | 0) >> 2] = $2_1;
                 break label$17;
                }
                HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
                HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
               }
               $0_1 = $4_1 + 8 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
               $6_1 = $4_1 + $3_1 | 0;
               $8_1 = $5_1 << 3 | 0;
               $5_1 = $8_1 - $3_1 | 0;
               HEAP32[($6_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
               HEAP32[($4_1 + $8_1 | 0) >> 2] = $5_1;
               label$19 : {
                if (!$7_1) {
                 break label$19
                }
                $8_1 = $7_1 >>> 3 | 0;
                $3_1 = ($8_1 << 3 | 0) + 20236 | 0;
                $4_1 = HEAP32[(0 + 20216 | 0) >> 2] | 0;
                label$20 : {
                 label$21 : {
                  $8_1 = 1 << $8_1 | 0;
                  if ($2_1 & $8_1 | 0) {
                   break label$21
                  }
                  HEAP32[(0 + 20196 | 0) >> 2] = $2_1 | $8_1 | 0;
                  $8_1 = $3_1;
                  break label$20;
                 }
                 $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                }
                HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
                HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
                HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
                HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
               }
               HEAP32[(0 + 20216 | 0) >> 2] = $6_1;
               HEAP32[(0 + 20204 | 0) >> 2] = $5_1;
               break label$1;
              }
              $9_1 = HEAP32[(0 + 20200 | 0) >> 2] | 0;
              if (!$9_1) {
               break label$11
              }
              $0_1 = ($9_1 & (0 - $9_1 | 0) | 0) + -1 | 0;
              $210_1 = $0_1;
              $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
              $4_1 = $210_1 >>> $0_1 | 0;
              $5_1 = ($4_1 >>> 5 | 0) & 8 | 0;
              $221_1 = $5_1 | $0_1 | 0;
              $0_1 = $4_1 >>> $5_1 | 0;
              $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
              $229_1 = $221_1 | $4_1 | 0;
              $0_1 = $0_1 >>> $4_1 | 0;
              $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
              $237_1 = $229_1 | $4_1 | 0;
              $0_1 = $0_1 >>> $4_1 | 0;
              $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
              $6_1 = HEAP32[(((($237_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 20500 | 0) >> 2] | 0;
              $4_1 = ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
              $5_1 = $6_1;
              label$22 : {
               label$23 : while (1) {
                label$24 : {
                 $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                 if ($0_1) {
                  break label$24
                 }
                 $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                 if (!$0_1) {
                  break label$22
                 }
                }
                $5_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                $272_1 = $5_1;
                $5_1 = $5_1 >>> 0 < $4_1 >>> 0;
                $4_1 = $5_1 ? $272_1 : $4_1;
                $6_1 = $5_1 ? $0_1 : $6_1;
                $5_1 = $0_1;
                continue label$23;
               };
              }
              $10_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
              label$25 : {
               $8_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
               if (($8_1 | 0) == ($6_1 | 0)) {
                break label$25
               }
               $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
               HEAP32[(0 + 20212 | 0) >> 2] | 0;
               HEAP32[($0_1 + 12 | 0) >> 2] = $8_1;
               HEAP32[($8_1 + 8 | 0) >> 2] = $0_1;
               break label$2;
              }
              label$26 : {
               $5_1 = $6_1 + 20 | 0;
               $0_1 = HEAP32[$5_1 >> 2] | 0;
               if ($0_1) {
                break label$26
               }
               $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$10
               }
               $5_1 = $6_1 + 16 | 0;
              }
              label$27 : while (1) {
               $11_1 = $5_1;
               $8_1 = $0_1;
               $5_1 = $0_1 + 20 | 0;
               $0_1 = HEAP32[$5_1 >> 2] | 0;
               if ($0_1) {
                continue label$27
               }
               $5_1 = $8_1 + 16 | 0;
               $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$27
               }
               break label$27;
              };
              HEAP32[$11_1 >> 2] = 0;
              break label$2;
             }
             $3_1 = -1;
             if ($0_1 >>> 0 > -65 >>> 0) {
              break label$11
             }
             $0_1 = $0_1 + 11 | 0;
             $3_1 = $0_1 & -8 | 0;
             $7_1 = HEAP32[(0 + 20200 | 0) >> 2] | 0;
             if (!$7_1) {
              break label$11
             }
             $11_1 = 0;
             label$28 : {
              if ($3_1 >>> 0 < 256 >>> 0) {
               break label$28
              }
              $11_1 = 31;
              if ($3_1 >>> 0 > 16777215 >>> 0) {
               break label$28
              }
              $0_1 = $0_1 >>> 8 | 0;
              $339_1 = $0_1;
              $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
              $4_1 = $339_1 << $0_1 | 0;
              $346_1 = $4_1;
              $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
              $5_1 = $346_1 << $4_1 | 0;
              $353_1 = $5_1;
              $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
              $0_1 = (($353_1 << $5_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $5_1 | 0) | 0;
              $11_1 = ($0_1 << 1 | 0 | (($3_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
             }
             $4_1 = 0 - $3_1 | 0;
             label$29 : {
              label$30 : {
               label$31 : {
                label$32 : {
                 $5_1 = HEAP32[(($11_1 << 2 | 0) + 20500 | 0) >> 2] | 0;
                 if ($5_1) {
                  break label$32
                 }
                 $0_1 = 0;
                 $8_1 = 0;
                 break label$31;
                }
                $0_1 = 0;
                $6_1 = $3_1 << (($11_1 | 0) == (31 | 0) ? 0 : 25 - ($11_1 >>> 1 | 0) | 0) | 0;
                $8_1 = 0;
                label$33 : while (1) {
                 label$34 : {
                  $2_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                  if ($2_1 >>> 0 >= $4_1 >>> 0) {
                   break label$34
                  }
                  $4_1 = $2_1;
                  $8_1 = $5_1;
                  if ($4_1) {
                   break label$34
                  }
                  $4_1 = 0;
                  $8_1 = $5_1;
                  $0_1 = $5_1;
                  break label$30;
                 }
                 $2_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                 $5_1 = HEAP32[(($5_1 + (($6_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                 $0_1 = $2_1 ? (($2_1 | 0) == ($5_1 | 0) ? $0_1 : $2_1) : $0_1;
                 $6_1 = $6_1 << 1 | 0;
                 if ($5_1) {
                  continue label$33
                 }
                 break label$33;
                };
               }
               label$35 : {
                if ($0_1 | $8_1 | 0) {
                 break label$35
                }
                $8_1 = 0;
                $0_1 = 2 << $11_1 | 0;
                $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $7_1 | 0;
                if (!$0_1) {
                 break label$11
                }
                $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                $444_1 = $0_1;
                $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                $5_1 = $444_1 >>> $0_1 | 0;
                $6_1 = ($5_1 >>> 5 | 0) & 8 | 0;
                $455_1 = $6_1 | $0_1 | 0;
                $0_1 = $5_1 >>> $6_1 | 0;
                $5_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                $463_1 = $455_1 | $5_1 | 0;
                $0_1 = $0_1 >>> $5_1 | 0;
                $5_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                $471_1 = $463_1 | $5_1 | 0;
                $0_1 = $0_1 >>> $5_1 | 0;
                $5_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                $0_1 = HEAP32[(((($471_1 | $5_1 | 0) + ($0_1 >>> $5_1 | 0) | 0) << 2 | 0) + 20500 | 0) >> 2] | 0;
               }
               if (!$0_1) {
                break label$29
               }
              }
              label$36 : while (1) {
               $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
               $6_1 = $2_1 >>> 0 < $4_1 >>> 0;
               label$37 : {
                $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                if ($5_1) {
                 break label$37
                }
                $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
               }
               $4_1 = $6_1 ? $2_1 : $4_1;
               $8_1 = $6_1 ? $0_1 : $8_1;
               $0_1 = $5_1;
               if ($0_1) {
                continue label$36
               }
               break label$36;
              };
             }
             if (!$8_1) {
              break label$11
             }
             if ($4_1 >>> 0 >= ((HEAP32[(0 + 20204 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
              break label$11
             }
             $11_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
             label$38 : {
              $6_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
              if (($6_1 | 0) == ($8_1 | 0)) {
               break label$38
              }
              $0_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
              HEAP32[(0 + 20212 | 0) >> 2] | 0;
              HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
              HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
              break label$3;
             }
             label$39 : {
              $5_1 = $8_1 + 20 | 0;
              $0_1 = HEAP32[$5_1 >> 2] | 0;
              if ($0_1) {
               break label$39
              }
              $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
              if (!$0_1) {
               break label$9
              }
              $5_1 = $8_1 + 16 | 0;
             }
             label$40 : while (1) {
              $2_1 = $5_1;
              $6_1 = $0_1;
              $5_1 = $0_1 + 20 | 0;
              $0_1 = HEAP32[$5_1 >> 2] | 0;
              if ($0_1) {
               continue label$40
              }
              $5_1 = $6_1 + 16 | 0;
              $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
              if ($0_1) {
               continue label$40
              }
              break label$40;
             };
             HEAP32[$2_1 >> 2] = 0;
             break label$3;
            }
            label$41 : {
             $0_1 = HEAP32[(0 + 20204 | 0) >> 2] | 0;
             if ($0_1 >>> 0 < $3_1 >>> 0) {
              break label$41
             }
             $4_1 = HEAP32[(0 + 20216 | 0) >> 2] | 0;
             label$42 : {
              label$43 : {
               $5_1 = $0_1 - $3_1 | 0;
               if ($5_1 >>> 0 < 16 >>> 0) {
                break label$43
               }
               HEAP32[(0 + 20204 | 0) >> 2] = $5_1;
               $6_1 = $4_1 + $3_1 | 0;
               HEAP32[(0 + 20216 | 0) >> 2] = $6_1;
               HEAP32[($6_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
               HEAP32[($4_1 + $0_1 | 0) >> 2] = $5_1;
               HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
               break label$42;
              }
              HEAP32[(0 + 20216 | 0) >> 2] = 0;
              HEAP32[(0 + 20204 | 0) >> 2] = 0;
              HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
              $0_1 = $4_1 + $0_1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
             }
             $0_1 = $4_1 + 8 | 0;
             break label$1;
            }
            label$44 : {
             $6_1 = HEAP32[(0 + 20208 | 0) >> 2] | 0;
             if ($6_1 >>> 0 <= $3_1 >>> 0) {
              break label$44
             }
             $4_1 = $6_1 - $3_1 | 0;
             HEAP32[(0 + 20208 | 0) >> 2] = $4_1;
             $0_1 = HEAP32[(0 + 20220 | 0) >> 2] | 0;
             $5_1 = $0_1 + $3_1 | 0;
             HEAP32[(0 + 20220 | 0) >> 2] = $5_1;
             HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
             HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
             $0_1 = $0_1 + 8 | 0;
             break label$1;
            }
            label$45 : {
             label$46 : {
              if (!(HEAP32[(0 + 20668 | 0) >> 2] | 0)) {
               break label$46
              }
              $4_1 = HEAP32[(0 + 20676 | 0) >> 2] | 0;
              break label$45;
             }
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = -1;
             HEAP32[(i64toi32_i32$1 + 20680 | 0) >> 2] = -1;
             HEAP32[(i64toi32_i32$1 + 20684 | 0) >> 2] = i64toi32_i32$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = 4096;
             HEAP32[(i64toi32_i32$1 + 20672 | 0) >> 2] = 4096;
             HEAP32[(i64toi32_i32$1 + 20676 | 0) >> 2] = i64toi32_i32$0;
             HEAP32[(0 + 20668 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
             HEAP32[(0 + 20688 | 0) >> 2] = 0;
             HEAP32[(0 + 20640 | 0) >> 2] = 0;
             $4_1 = 4096;
            }
            $0_1 = 0;
            $7_1 = $3_1 + 47 | 0;
            $2_1 = $4_1 + $7_1 | 0;
            $11_1 = 0 - $4_1 | 0;
            $8_1 = $2_1 & $11_1 | 0;
            if ($8_1 >>> 0 <= $3_1 >>> 0) {
             break label$1
            }
            $0_1 = 0;
            label$47 : {
             $4_1 = HEAP32[(0 + 20636 | 0) >> 2] | 0;
             if (!$4_1) {
              break label$47
             }
             $5_1 = HEAP32[(0 + 20628 | 0) >> 2] | 0;
             $9_1 = $5_1 + $8_1 | 0;
             if ($9_1 >>> 0 <= $5_1 >>> 0) {
              break label$1
             }
             if ($9_1 >>> 0 > $4_1 >>> 0) {
              break label$1
             }
            }
            if ((HEAPU8[(0 + 20640 | 0) >> 0] | 0) & 4 | 0) {
             break label$6
            }
            label$48 : {
             label$49 : {
              label$50 : {
               $4_1 = HEAP32[(0 + 20220 | 0) >> 2] | 0;
               if (!$4_1) {
                break label$50
               }
               $0_1 = 20644;
               label$51 : while (1) {
                label$52 : {
                 $5_1 = HEAP32[$0_1 >> 2] | 0;
                 if ($5_1 >>> 0 > $4_1 >>> 0) {
                  break label$52
                 }
                 if (($5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4_1 >>> 0) {
                  break label$49
                 }
                }
                $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                if ($0_1) {
                 continue label$51
                }
                break label$51;
               };
              }
              $6_1 = $1454(0 | 0) | 0;
              if (($6_1 | 0) == (-1 | 0)) {
               break label$7
              }
              $2_1 = $8_1;
              label$53 : {
               $0_1 = HEAP32[(0 + 20672 | 0) >> 2] | 0;
               $4_1 = $0_1 + -1 | 0;
               if (!($4_1 & $6_1 | 0)) {
                break label$53
               }
               $2_1 = ($8_1 - $6_1 | 0) + (($4_1 + $6_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
              }
              if ($2_1 >>> 0 <= $3_1 >>> 0) {
               break label$7
              }
              if ($2_1 >>> 0 > 2147483646 >>> 0) {
               break label$7
              }
              label$54 : {
               $0_1 = HEAP32[(0 + 20636 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$54
               }
               $4_1 = HEAP32[(0 + 20628 | 0) >> 2] | 0;
               $5_1 = $4_1 + $2_1 | 0;
               if ($5_1 >>> 0 <= $4_1 >>> 0) {
                break label$7
               }
               if ($5_1 >>> 0 > $0_1 >>> 0) {
                break label$7
               }
              }
              $0_1 = $1454($2_1 | 0) | 0;
              if (($0_1 | 0) != ($6_1 | 0)) {
               break label$48
              }
              break label$5;
             }
             $2_1 = ($2_1 - $6_1 | 0) & $11_1 | 0;
             if ($2_1 >>> 0 > 2147483646 >>> 0) {
              break label$7
             }
             $6_1 = $1454($2_1 | 0) | 0;
             if (($6_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
              break label$8
             }
             $0_1 = $6_1;
            }
            label$55 : {
             if (($0_1 | 0) == (-1 | 0)) {
              break label$55
             }
             if (($3_1 + 48 | 0) >>> 0 <= $2_1 >>> 0) {
              break label$55
             }
             label$56 : {
              $4_1 = HEAP32[(0 + 20676 | 0) >> 2] | 0;
              $4_1 = (($7_1 - $2_1 | 0) + $4_1 | 0) & (0 - $4_1 | 0) | 0;
              if ($4_1 >>> 0 <= 2147483646 >>> 0) {
               break label$56
              }
              $6_1 = $0_1;
              break label$5;
             }
             label$57 : {
              if (($1454($4_1 | 0) | 0 | 0) == (-1 | 0)) {
               break label$57
              }
              $2_1 = $4_1 + $2_1 | 0;
              $6_1 = $0_1;
              break label$5;
             }
             $1454(0 - $2_1 | 0 | 0) | 0;
             break label$7;
            }
            $6_1 = $0_1;
            if (($0_1 | 0) != (-1 | 0)) {
             break label$5
            }
            break label$7;
           }
           $8_1 = 0;
           break label$2;
          }
          $6_1 = 0;
          break label$3;
         }
         if (($6_1 | 0) != (-1 | 0)) {
          break label$5
         }
        }
        HEAP32[(0 + 20640 | 0) >> 2] = HEAP32[(0 + 20640 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8_1 >>> 0 > 2147483646 >>> 0) {
        break label$4
       }
       $6_1 = $1454($8_1 | 0) | 0;
       $0_1 = $1454(0 | 0) | 0;
       if (($6_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if (($0_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if ($6_1 >>> 0 >= $0_1 >>> 0) {
        break label$4
       }
       $2_1 = $0_1 - $6_1 | 0;
       if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
        break label$4
       }
      }
      $0_1 = (HEAP32[(0 + 20628 | 0) >> 2] | 0) + $2_1 | 0;
      HEAP32[(0 + 20628 | 0) >> 2] = $0_1;
      label$58 : {
       if ($0_1 >>> 0 <= (HEAP32[(0 + 20632 | 0) >> 2] | 0) >>> 0) {
        break label$58
       }
       HEAP32[(0 + 20632 | 0) >> 2] = $0_1;
      }
      label$59 : {
       label$60 : {
        label$61 : {
         label$62 : {
          $4_1 = HEAP32[(0 + 20220 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$62
          }
          $0_1 = 20644;
          label$63 : while (1) {
           $5_1 = HEAP32[$0_1 >> 2] | 0;
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($6_1 | 0) == ($5_1 + $8_1 | 0 | 0)) {
            break label$61
           }
           $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($0_1) {
            continue label$63
           }
           break label$60;
          };
         }
         label$64 : {
          label$65 : {
           $0_1 = HEAP32[(0 + 20212 | 0) >> 2] | 0;
           if (!$0_1) {
            break label$65
           }
           if ($6_1 >>> 0 >= $0_1 >>> 0) {
            break label$64
           }
          }
          HEAP32[(0 + 20212 | 0) >> 2] = $6_1;
         }
         $0_1 = 0;
         HEAP32[(0 + 20648 | 0) >> 2] = $2_1;
         HEAP32[(0 + 20644 | 0) >> 2] = $6_1;
         HEAP32[(0 + 20228 | 0) >> 2] = -1;
         HEAP32[(0 + 20232 | 0) >> 2] = HEAP32[(0 + 20668 | 0) >> 2] | 0;
         HEAP32[(0 + 20656 | 0) >> 2] = 0;
         label$66 : while (1) {
          $4_1 = $0_1 << 3 | 0;
          $5_1 = $4_1 + 20236 | 0;
          HEAP32[($4_1 + 20244 | 0) >> 2] = $5_1;
          HEAP32[($4_1 + 20248 | 0) >> 2] = $5_1;
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != (32 | 0)) {
           continue label$66
          }
          break label$66;
         };
         $0_1 = $2_1 + -40 | 0;
         $4_1 = ($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0;
         $5_1 = $0_1 - $4_1 | 0;
         HEAP32[(0 + 20208 | 0) >> 2] = $5_1;
         $4_1 = $6_1 + $4_1 | 0;
         HEAP32[(0 + 20220 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
         HEAP32[(($6_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 20224 | 0) >> 2] = HEAP32[(0 + 20684 | 0) >> 2] | 0;
         break label$59;
        }
        if ((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0) {
         break label$60
        }
        if ($5_1 >>> 0 > $4_1 >>> 0) {
         break label$60
        }
        if ($6_1 >>> 0 <= $4_1 >>> 0) {
         break label$60
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
        $0_1 = ($4_1 + 8 | 0) & 7 | 0 ? (-8 - $4_1 | 0) & 7 | 0 : 0;
        $5_1 = $4_1 + $0_1 | 0;
        HEAP32[(0 + 20220 | 0) >> 2] = $5_1;
        $6_1 = (HEAP32[(0 + 20208 | 0) >> 2] | 0) + $2_1 | 0;
        $0_1 = $6_1 - $0_1 | 0;
        HEAP32[(0 + 20208 | 0) >> 2] = $0_1;
        HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[(($4_1 + $6_1 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 20224 | 0) >> 2] = HEAP32[(0 + 20684 | 0) >> 2] | 0;
        break label$59;
       }
       label$67 : {
        $8_1 = HEAP32[(0 + 20212 | 0) >> 2] | 0;
        if ($6_1 >>> 0 >= $8_1 >>> 0) {
         break label$67
        }
        HEAP32[(0 + 20212 | 0) >> 2] = $6_1;
        $8_1 = $6_1;
       }
       $5_1 = $6_1 + $2_1 | 0;
       $0_1 = 20644;
       label$68 : {
        label$69 : {
         label$70 : {
          label$71 : {
           label$72 : {
            label$73 : {
             label$74 : {
              label$75 : while (1) {
               if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($5_1 | 0)) {
                break label$74
               }
               $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$75
               }
               break label$73;
              };
             }
             if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$72
             }
            }
            $0_1 = 20644;
            label$76 : while (1) {
             label$77 : {
              $5_1 = HEAP32[$0_1 >> 2] | 0;
              if ($5_1 >>> 0 > $4_1 >>> 0) {
               break label$77
              }
              $5_1 = $5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
              if ($5_1 >>> 0 > $4_1 >>> 0) {
               break label$71
              }
             }
             $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             continue label$76;
            };
           }
           HEAP32[$0_1 >> 2] = $6_1;
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
           $11_1 = $6_1 + (($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($11_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
           $2_1 = $5_1 + (($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0) | 0;
           $3_1 = $11_1 + $3_1 | 0;
           $5_1 = $2_1 - $3_1 | 0;
           label$78 : {
            if (($4_1 | 0) != ($2_1 | 0)) {
             break label$78
            }
            HEAP32[(0 + 20220 | 0) >> 2] = $3_1;
            $0_1 = (HEAP32[(0 + 20208 | 0) >> 2] | 0) + $5_1 | 0;
            HEAP32[(0 + 20208 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            break label$69;
           }
           label$79 : {
            if ((HEAP32[(0 + 20216 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
             break label$79
            }
            HEAP32[(0 + 20216 | 0) >> 2] = $3_1;
            $0_1 = (HEAP32[(0 + 20204 | 0) >> 2] | 0) + $5_1 | 0;
            HEAP32[(0 + 20204 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[($3_1 + $0_1 | 0) >> 2] = $0_1;
            break label$69;
           }
           label$80 : {
            $0_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
            if (($0_1 & 3 | 0 | 0) != (1 | 0)) {
             break label$80
            }
            $7_1 = $0_1 & -8 | 0;
            label$81 : {
             label$82 : {
              if ($0_1 >>> 0 > 255 >>> 0) {
               break label$82
              }
              $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
              $8_1 = $0_1 >>> 3 | 0;
              $6_1 = ($8_1 << 3 | 0) + 20236 | 0;
              label$83 : {
               $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
               if (($0_1 | 0) != ($4_1 | 0)) {
                break label$83
               }
               HEAP32[(0 + 20196 | 0) >> 2] = (HEAP32[(0 + 20196 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $8_1 | 0) | 0) | 0;
               break label$81;
              }
              HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
              HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
              break label$81;
             }
             $9_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
             label$84 : {
              label$85 : {
               $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
               if (($6_1 | 0) == ($2_1 | 0)) {
                break label$85
               }
               $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
               HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
               HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
               break label$84;
              }
              label$86 : {
               $0_1 = $2_1 + 20 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                break label$86
               }
               $0_1 = $2_1 + 16 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                break label$86
               }
               $6_1 = 0;
               break label$84;
              }
              label$87 : while (1) {
               $8_1 = $0_1;
               $6_1 = $4_1;
               $0_1 = $4_1 + 20 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                continue label$87
               }
               $0_1 = $6_1 + 16 | 0;
               $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
               if ($4_1) {
                continue label$87
               }
               break label$87;
              };
              HEAP32[$8_1 >> 2] = 0;
             }
             if (!$9_1) {
              break label$81
             }
             label$88 : {
              label$89 : {
               $4_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
               $0_1 = ($4_1 << 2 | 0) + 20500 | 0;
               if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
                break label$89
               }
               HEAP32[$0_1 >> 2] = $6_1;
               if ($6_1) {
                break label$88
               }
               HEAP32[(0 + 20200 | 0) >> 2] = (HEAP32[(0 + 20200 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
               break label$81;
              }
              HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
              if (!$6_1) {
               break label$81
              }
             }
             HEAP32[($6_1 + 24 | 0) >> 2] = $9_1;
             label$90 : {
              $0_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
              if (!$0_1) {
               break label$90
              }
              HEAP32[($6_1 + 16 | 0) >> 2] = $0_1;
              HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
             }
             $0_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
             if (!$0_1) {
              break label$81
             }
             HEAP32[($6_1 + 20 | 0) >> 2] = $0_1;
             HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
            }
            $5_1 = $7_1 + $5_1 | 0;
            $2_1 = $2_1 + $7_1 | 0;
           }
           HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) & -2 | 0;
           HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
           HEAP32[($3_1 + $5_1 | 0) >> 2] = $5_1;
           label$91 : {
            if ($5_1 >>> 0 > 255 >>> 0) {
             break label$91
            }
            $4_1 = $5_1 >>> 3 | 0;
            $0_1 = ($4_1 << 3 | 0) + 20236 | 0;
            label$92 : {
             label$93 : {
              $5_1 = HEAP32[(0 + 20196 | 0) >> 2] | 0;
              $4_1 = 1 << $4_1 | 0;
              if ($5_1 & $4_1 | 0) {
               break label$93
              }
              HEAP32[(0 + 20196 | 0) >> 2] = $5_1 | $4_1 | 0;
              $4_1 = $0_1;
              break label$92;
             }
             $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
            HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
            HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
            break label$69;
           }
           $0_1 = 31;
           label$94 : {
            if ($5_1 >>> 0 > 16777215 >>> 0) {
             break label$94
            }
            $0_1 = $5_1 >>> 8 | 0;
            $1157_1 = $0_1;
            $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $4_1 = $1157_1 << $0_1 | 0;
            $1164_1 = $4_1;
            $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $6_1 = $1164_1 << $4_1 | 0;
            $1171_1 = $6_1;
            $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $0_1 = (($1171_1 << $6_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $6_1 | 0) | 0;
            $0_1 = ($0_1 << 1 | 0 | (($5_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
           }
           HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
           i64toi32_i32$1 = $3_1;
           i64toi32_i32$0 = 0;
           HEAP32[($3_1 + 16 | 0) >> 2] = 0;
           HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
           $4_1 = ($0_1 << 2 | 0) + 20500 | 0;
           label$95 : {
            label$96 : {
             $6_1 = HEAP32[(0 + 20200 | 0) >> 2] | 0;
             $8_1 = 1 << $0_1 | 0;
             if ($6_1 & $8_1 | 0) {
              break label$96
             }
             HEAP32[(0 + 20200 | 0) >> 2] = $6_1 | $8_1 | 0;
             HEAP32[$4_1 >> 2] = $3_1;
             HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
             break label$95;
            }
            $0_1 = $5_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
            $6_1 = HEAP32[$4_1 >> 2] | 0;
            label$97 : while (1) {
             $4_1 = $6_1;
             if (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($5_1 | 0)) {
              break label$70
             }
             $6_1 = $0_1 >>> 29 | 0;
             $0_1 = $0_1 << 1 | 0;
             $8_1 = ($4_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
             $6_1 = HEAP32[$8_1 >> 2] | 0;
             if ($6_1) {
              continue label$97
             }
             break label$97;
            };
            HEAP32[$8_1 >> 2] = $3_1;
            HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
           }
           HEAP32[($3_1 + 12 | 0) >> 2] = $3_1;
           HEAP32[($3_1 + 8 | 0) >> 2] = $3_1;
           break label$69;
          }
          $0_1 = $2_1 + -40 | 0;
          $8_1 = ($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0;
          $11_1 = $0_1 - $8_1 | 0;
          HEAP32[(0 + 20208 | 0) >> 2] = $11_1;
          $8_1 = $6_1 + $8_1 | 0;
          HEAP32[(0 + 20220 | 0) >> 2] = $8_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = $11_1 | 1 | 0;
          HEAP32[(($6_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 20224 | 0) >> 2] = HEAP32[(0 + 20684 | 0) >> 2] | 0;
          $0_1 = ($5_1 + (($5_1 + -39 | 0) & 7 | 0 ? (39 - $5_1 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20652 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20656 | 0) >> 2] | 0;
          $1293_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $8_1 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1293_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20644 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20648 | 0) >> 2] | 0;
          $1295_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $8_1;
          HEAP32[($8_1 + 8 | 0) >> 2] = $1295_1;
          HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 20652 | 0) >> 2] = $8_1 + 8 | 0;
          HEAP32[(0 + 20648 | 0) >> 2] = $2_1;
          HEAP32[(0 + 20644 | 0) >> 2] = $6_1;
          HEAP32[(0 + 20656 | 0) >> 2] = 0;
          $0_1 = $8_1 + 24 | 0;
          label$98 : while (1) {
           HEAP32[($0_1 + 4 | 0) >> 2] = 7;
           $6_1 = $0_1 + 8 | 0;
           $0_1 = $0_1 + 4 | 0;
           if ($5_1 >>> 0 > $6_1 >>> 0) {
            continue label$98
           }
           break label$98;
          };
          if (($8_1 | 0) == ($4_1 | 0)) {
           break label$59
          }
          HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
          $2_1 = $8_1 - $4_1 | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
          HEAP32[$8_1 >> 2] = $2_1;
          label$99 : {
           if ($2_1 >>> 0 > 255 >>> 0) {
            break label$99
           }
           $5_1 = $2_1 >>> 3 | 0;
           $0_1 = ($5_1 << 3 | 0) + 20236 | 0;
           label$100 : {
            label$101 : {
             $6_1 = HEAP32[(0 + 20196 | 0) >> 2] | 0;
             $5_1 = 1 << $5_1 | 0;
             if ($6_1 & $5_1 | 0) {
              break label$101
             }
             HEAP32[(0 + 20196 | 0) >> 2] = $6_1 | $5_1 | 0;
             $5_1 = $0_1;
             break label$100;
            }
            $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
           HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
           HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
           HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
           break label$59;
          }
          $0_1 = 31;
          label$102 : {
           if ($2_1 >>> 0 > 16777215 >>> 0) {
            break label$102
           }
           $0_1 = $2_1 >>> 8 | 0;
           $1356_1 = $0_1;
           $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
           $5_1 = $1356_1 << $0_1 | 0;
           $1363_1 = $5_1;
           $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
           $6_1 = $1363_1 << $5_1 | 0;
           $1370_1 = $6_1;
           $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
           $0_1 = (($1370_1 << $6_1 | 0) >>> 15 | 0) - ($0_1 | $5_1 | 0 | $6_1 | 0) | 0;
           $0_1 = ($0_1 << 1 | 0 | (($2_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = 0;
          HEAP32[($4_1 + 16 | 0) >> 2] = 0;
          HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
          $5_1 = ($0_1 << 2 | 0) + 20500 | 0;
          label$103 : {
           label$104 : {
            $6_1 = HEAP32[(0 + 20200 | 0) >> 2] | 0;
            $8_1 = 1 << $0_1 | 0;
            if ($6_1 & $8_1 | 0) {
             break label$104
            }
            HEAP32[(0 + 20200 | 0) >> 2] = $6_1 | $8_1 | 0;
            HEAP32[$5_1 >> 2] = $4_1;
            HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
            break label$103;
           }
           $0_1 = $2_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
           $6_1 = HEAP32[$5_1 >> 2] | 0;
           label$105 : while (1) {
            $5_1 = $6_1;
            if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($2_1 | 0)) {
             break label$68
            }
            $6_1 = $0_1 >>> 29 | 0;
            $0_1 = $0_1 << 1 | 0;
            $8_1 = ($5_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
            $6_1 = HEAP32[$8_1 >> 2] | 0;
            if ($6_1) {
             continue label$105
            }
            break label$105;
           };
           HEAP32[$8_1 >> 2] = $4_1;
           HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
          }
          HEAP32[($4_1 + 12 | 0) >> 2] = $4_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $4_1;
          break label$59;
         }
         $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
         HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
         HEAP32[($3_1 + 24 | 0) >> 2] = 0;
         HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
        }
        $0_1 = $11_1 + 8 | 0;
        break label$1;
       }
       $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 24 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
      }
      $0_1 = HEAP32[(0 + 20208 | 0) >> 2] | 0;
      if ($0_1 >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      $4_1 = $0_1 - $3_1 | 0;
      HEAP32[(0 + 20208 | 0) >> 2] = $4_1;
      $0_1 = HEAP32[(0 + 20220 | 0) >> 2] | 0;
      $5_1 = $0_1 + $3_1 | 0;
      HEAP32[(0 + 20220 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $0_1 + 8 | 0;
      break label$1;
     }
     HEAP32[($57() | 0) >> 2] = 48;
     $0_1 = 0;
     break label$1;
    }
    label$106 : {
     if (!$11_1) {
      break label$106
     }
     label$107 : {
      label$108 : {
       $5_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       $0_1 = ($5_1 << 2 | 0) + 20500 | 0;
       if (($8_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
        break label$108
       }
       HEAP32[$0_1 >> 2] = $6_1;
       if ($6_1) {
        break label$107
       }
       $7_1 = $7_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       HEAP32[(0 + 20200 | 0) >> 2] = $7_1;
       break label$106;
      }
      HEAP32[($11_1 + ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) == ($8_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$106
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $11_1;
     label$109 : {
      $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$109
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
     }
     $0_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$106
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
    }
    label$110 : {
     label$111 : {
      if ($4_1 >>> 0 > 15 >>> 0) {
       break label$111
      }
      $0_1 = $4_1 + $3_1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
      $0_1 = $8_1 + $0_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$110;
     }
     HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     $6_1 = $8_1 + $3_1 | 0;
     HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
     HEAP32[($6_1 + $4_1 | 0) >> 2] = $4_1;
     label$112 : {
      if ($4_1 >>> 0 > 255 >>> 0) {
       break label$112
      }
      $4_1 = $4_1 >>> 3 | 0;
      $0_1 = ($4_1 << 3 | 0) + 20236 | 0;
      label$113 : {
       label$114 : {
        $5_1 = HEAP32[(0 + 20196 | 0) >> 2] | 0;
        $4_1 = 1 << $4_1 | 0;
        if ($5_1 & $4_1 | 0) {
         break label$114
        }
        HEAP32[(0 + 20196 | 0) >> 2] = $5_1 | $4_1 | 0;
        $4_1 = $0_1;
        break label$113;
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $6_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
      HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
      break label$110;
     }
     $0_1 = 31;
     label$115 : {
      if ($4_1 >>> 0 > 16777215 >>> 0) {
       break label$115
      }
      $0_1 = $4_1 >>> 8 | 0;
      $1606 = $0_1;
      $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $5_1 = $1606 << $0_1 | 0;
      $1613 = $5_1;
      $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3_1 = $1613 << $5_1 | 0;
      $1620 = $3_1;
      $3_1 = (($3_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0_1 = (($1620 << $3_1 | 0) >>> 15 | 0) - ($0_1 | $5_1 | 0 | $3_1 | 0) | 0;
      $0_1 = ($0_1 << 1 | 0 | (($4_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$0 = 0;
     HEAP32[($6_1 + 16 | 0) >> 2] = 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $5_1 = ($0_1 << 2 | 0) + 20500 | 0;
     label$116 : {
      label$117 : {
       label$118 : {
        $3_1 = 1 << $0_1 | 0;
        if ($7_1 & $3_1 | 0) {
         break label$118
        }
        HEAP32[(0 + 20200 | 0) >> 2] = $7_1 | $3_1 | 0;
        HEAP32[$5_1 >> 2] = $6_1;
        HEAP32[($6_1 + 24 | 0) >> 2] = $5_1;
        break label$117;
       }
       $0_1 = $4_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
       $3_1 = HEAP32[$5_1 >> 2] | 0;
       label$119 : while (1) {
        $5_1 = $3_1;
        if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4_1 | 0)) {
         break label$116
        }
        $3_1 = $0_1 >>> 29 | 0;
        $0_1 = $0_1 << 1 | 0;
        $2_1 = ($5_1 + ($3_1 & 4 | 0) | 0) + 16 | 0;
        $3_1 = HEAP32[$2_1 >> 2] | 0;
        if ($3_1) {
         continue label$119
        }
        break label$119;
       };
       HEAP32[$2_1 >> 2] = $6_1;
       HEAP32[($6_1 + 24 | 0) >> 2] = $5_1;
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $6_1;
      HEAP32[($6_1 + 8 | 0) >> 2] = $6_1;
      break label$110;
     }
     $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
     HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
     HEAP32[($6_1 + 24 | 0) >> 2] = 0;
     HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
    }
    $0_1 = $8_1 + 8 | 0;
    break label$1;
   }
   label$120 : {
    if (!$10_1) {
     break label$120
    }
    label$121 : {
     label$122 : {
      $5_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
      $0_1 = ($5_1 << 2 | 0) + 20500 | 0;
      if (($6_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
       break label$122
      }
      HEAP32[$0_1 >> 2] = $8_1;
      if ($8_1) {
       break label$121
      }
      HEAP32[(0 + 20200 | 0) >> 2] = $9_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
      break label$120;
     }
     HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($6_1 | 0) ? 16 : 20) | 0) >> 2] = $8_1;
     if (!$8_1) {
      break label$120
     }
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = $10_1;
    label$123 : {
     $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$123
     }
     HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
    }
    $0_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$120
    }
    HEAP32[($8_1 + 20 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
   }
   label$124 : {
    label$125 : {
     if ($4_1 >>> 0 > 15 >>> 0) {
      break label$125
     }
     $0_1 = $4_1 + $3_1 | 0;
     HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
     $0_1 = $6_1 + $0_1 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$124;
    }
    HEAP32[($6_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
    $5_1 = $6_1 + $3_1 | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
    HEAP32[($5_1 + $4_1 | 0) >> 2] = $4_1;
    label$126 : {
     if (!$7_1) {
      break label$126
     }
     $8_1 = $7_1 >>> 3 | 0;
     $3_1 = ($8_1 << 3 | 0) + 20236 | 0;
     $0_1 = HEAP32[(0 + 20216 | 0) >> 2] | 0;
     label$127 : {
      label$128 : {
       $8_1 = 1 << $8_1 | 0;
       if ($8_1 & $2_1 | 0) {
        break label$128
       }
       HEAP32[(0 + 20196 | 0) >> 2] = $8_1 | $2_1 | 0;
       $8_1 = $3_1;
       break label$127;
      }
      $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($8_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
    }
    HEAP32[(0 + 20216 | 0) >> 2] = $5_1;
    HEAP32[(0 + 20204 | 0) >> 2] = $4_1;
   }
   $0_1 = $6_1 + 8 | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1449($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $6_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $7_1 = 0, $379_1 = 0, $386_1 = 0, $393_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $0_1 + -8 | 0;
   $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
   $0_1 = $2_1 & -8 | 0;
   $3_1 = $1_1 + $0_1 | 0;
   label$2 : {
    if ($2_1 & 1 | 0) {
     break label$2
    }
    if (!($2_1 & 3 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $1_1 - $2_1 | 0;
    $4_1 = HEAP32[(0 + 20212 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     break label$1
    }
    $0_1 = $2_1 + $0_1 | 0;
    label$3 : {
     if ((HEAP32[(0 + 20216 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      $5_1 = $2_1 >>> 3 | 0;
      $6_1 = ($5_1 << 3 | 0) + 20236 | 0;
      label$5 : {
       $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($2_1 | 0) != ($4_1 | 0)) {
        break label$5
       }
       HEAP32[(0 + 20196 | 0) >> 2] = (HEAP32[(0 + 20196 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
      break label$2;
     }
     $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     label$6 : {
      label$7 : {
       $6_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($1_1 | 0)) {
        break label$7
       }
       $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
       break label$6;
      }
      label$8 : {
       $2_1 = $1_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$8
       }
       $2_1 = $1_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$8
       }
       $6_1 = 0;
       break label$6;
      }
      label$9 : while (1) {
       $5_1 = $2_1;
       $6_1 = $4_1;
       $2_1 = $6_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        continue label$9
       }
       $2_1 = $6_1 + 16 | 0;
       $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$9
       }
       break label$9;
      };
      HEAP32[$5_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$10 : {
      label$11 : {
       $4_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
       $2_1 = ($4_1 << 2 | 0) + 20500 | 0;
       if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$11
       }
       HEAP32[$2_1 >> 2] = $6_1;
       if ($6_1) {
        break label$10
       }
       HEAP32[(0 + 20200 | 0) >> 2] = (HEAP32[(0 + 20200 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$2
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
     label$12 : {
      $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$12
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     }
     $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     break label$2;
    }
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 20204 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    return;
   }
   if ($3_1 >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 1 | 0)) {
    break label$1
   }
   label$13 : {
    label$14 : {
     if ($2_1 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if ((HEAP32[(0 + 20220 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$15
      }
      HEAP32[(0 + 20220 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 20208 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 20208 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      if (($1_1 | 0) != (HEAP32[(0 + 20216 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 20204 | 0) >> 2] = 0;
      HEAP32[(0 + 20216 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if ((HEAP32[(0 + 20216 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$16
      }
      HEAP32[(0 + 20216 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 20204 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 20204 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
      return;
     }
     $0_1 = ($2_1 & -8 | 0) + $0_1 | 0;
     label$17 : {
      label$18 : {
       if ($2_1 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       $5_1 = $2_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 20236 | 0;
       label$19 : {
        $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($2_1 | 0) != ($4_1 | 0)) {
         break label$19
        }
        HEAP32[(0 + 20196 | 0) >> 2] = (HEAP32[(0 + 20196 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
       break label$17;
      }
      $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($3_1 | 0)) {
         break label$21
        }
        $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 20212 | 0) >> 2] | 0;
        HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
        break label$20;
       }
       label$22 : {
        $2_1 = $3_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$22
        }
        $2_1 = $3_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$22
        }
        $6_1 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5_1 = $2_1;
        $6_1 = $4_1;
        $2_1 = $6_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         continue label$23
        }
        $2_1 = $6_1 + 16 | 0;
        $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
        $2_1 = ($4_1 << 2 | 0) + 20500 | 0;
        if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($3_1 | 0)) {
         break label$25
        }
        HEAP32[$2_1 >> 2] = $6_1;
        if ($6_1) {
         break label$24
        }
        HEAP32[(0 + 20200 | 0) >> 2] = (HEAP32[(0 + 20200 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$17
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$26 : {
       $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$26
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
      }
      $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$17
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
     if (($1_1 | 0) != (HEAP32[(0 + 20216 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 20204 | 0) >> 2] = $0_1;
     return;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
   }
   label$27 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $2_1 = $0_1 >>> 3 | 0;
    $0_1 = ($2_1 << 3 | 0) + 20236 | 0;
    label$28 : {
     label$29 : {
      $4_1 = HEAP32[(0 + 20196 | 0) >> 2] | 0;
      $2_1 = 1 << $2_1 | 0;
      if ($4_1 & $2_1 | 0) {
       break label$29
      }
      HEAP32[(0 + 20196 | 0) >> 2] = $4_1 | $2_1 | 0;
      $2_1 = $0_1;
      break label$28;
     }
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
    return;
   }
   $2_1 = 31;
   label$30 : {
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $2_1 = $0_1 >>> 8 | 0;
    $379_1 = $2_1;
    $2_1 = (($2_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $379_1 << $2_1 | 0;
    $386_1 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6_1 = $386_1 << $4_1 | 0;
    $393_1 = $6_1;
    $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2_1 = (($393_1 << $6_1 | 0) >>> 15 | 0) - ($2_1 | $4_1 | 0 | $6_1 | 0) | 0;
    $2_1 = ($2_1 << 1 | 0 | (($0_1 >>> ($2_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
   $4_1 = ($2_1 << 2 | 0) + 20500 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      label$34 : {
       $6_1 = HEAP32[(0 + 20200 | 0) >> 2] | 0;
       $3_1 = 1 << $2_1 | 0;
       if ($6_1 & $3_1 | 0) {
        break label$34
       }
       HEAP32[(0 + 20200 | 0) >> 2] = $6_1 | $3_1 | 0;
       HEAP32[$4_1 >> 2] = $1_1;
       HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
       break label$33;
      }
      $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
      $6_1 = HEAP32[$4_1 >> 2] | 0;
      label$35 : while (1) {
       $4_1 = $6_1;
       if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
        break label$32
       }
       $6_1 = $2_1 >>> 29 | 0;
       $2_1 = $2_1 << 1 | 0;
       $3_1 = ($4_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
       $6_1 = HEAP32[$3_1 >> 2] | 0;
       if ($6_1) {
        continue label$35
       }
       break label$35;
      };
      HEAP32[$3_1 >> 2] = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $1_1;
     break label$31;
    }
    $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
   }
   $1_1 = (HEAP32[(0 + 20228 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 20228 | 0) >> 2] = $1_1 ? $1_1 : -1;
  }
 }
 
 function $1450($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return $1448($1_1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1_1 >>> 0 < -64 >>> 0) {
    break label$2
   }
   HEAP32[($57() | 0) >> 2] = 48;
   return 0 | 0;
  }
  label$3 : {
   $2_1 = $1451($0_1 + -8 | 0 | 0, ($1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2_1) {
    break label$3
   }
   return $2_1 + 8 | 0 | 0;
  }
  label$4 : {
   $2_1 = $1448($1_1 | 0) | 0;
   if ($2_1) {
    break label$4
   }
   return 0 | 0;
  }
  $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
  $3_1 = ($3_1 & 3 | 0 ? -4 : -8) + ($3_1 & -8 | 0) | 0;
  $1458($2_1 | 0, $0_1 | 0, ($3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1) | 0) | 0;
  $1449($0_1 | 0);
  return $2_1 | 0;
 }
 
 function $1451($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $2_1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $8_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = $2_1 & -8 | 0;
  label$1 : {
   label$2 : {
    if ($2_1 & 3 | 0) {
     break label$2
    }
    label$3 : {
     if ($1_1 >>> 0 >= 256 >>> 0) {
      break label$3
     }
     return 0 | 0;
    }
    label$4 : {
     if ($3_1 >>> 0 < ($1_1 + 4 | 0) >>> 0) {
      break label$4
     }
     $4_1 = $0_1;
     if (($3_1 - $1_1 | 0) >>> 0 <= ((HEAP32[(0 + 20676 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
      break label$1
     }
    }
    return 0 | 0;
   }
   $5_1 = $0_1 + $3_1 | 0;
   label$5 : {
    label$6 : {
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$6
     }
     $3_1 = $3_1 - $1_1 | 0;
     if ($3_1 >>> 0 < 16 >>> 0) {
      break label$5
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $1_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     $1452($1_1 | 0, $3_1 | 0);
     break label$5;
    }
    $4_1 = 0;
    label$7 : {
     if ((HEAP32[(0 + 20220 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
      break label$7
     }
     $3_1 = (HEAP32[(0 + 20208 | 0) >> 2] | 0) + $3_1 | 0;
     if ($3_1 >>> 0 <= $1_1 >>> 0) {
      break label$1
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
     $2_1 = $0_1 + $1_1 | 0;
     $1_1 = $3_1 - $1_1 | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[(0 + 20208 | 0) >> 2] = $1_1;
     HEAP32[(0 + 20220 | 0) >> 2] = $2_1;
     break label$5;
    }
    label$8 : {
     if ((HEAP32[(0 + 20216 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
      break label$8
     }
     $4_1 = 0;
     $3_1 = (HEAP32[(0 + 20204 | 0) >> 2] | 0) + $3_1 | 0;
     if ($3_1 >>> 0 < $1_1 >>> 0) {
      break label$1
     }
     label$9 : {
      label$10 : {
       $4_1 = $3_1 - $1_1 | 0;
       if ($4_1 >>> 0 < 16 >>> 0) {
        break label$10
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
       $1_1 = $0_1 + $1_1 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
       $3_1 = $0_1 + $3_1 | 0;
       HEAP32[$3_1 >> 2] = $4_1;
       HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) & -2 | 0;
       break label$9;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $3_1 | 0 | 2 | 0;
      $1_1 = $0_1 + $3_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $4_1 = 0;
      $1_1 = 0;
     }
     HEAP32[(0 + 20216 | 0) >> 2] = $1_1;
     HEAP32[(0 + 20204 | 0) >> 2] = $4_1;
     break label$5;
    }
    $4_1 = 0;
    $6_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    if ($6_1 & 2 | 0) {
     break label$1
    }
    $7_1 = ($6_1 & -8 | 0) + $3_1 | 0;
    if ($7_1 >>> 0 < $1_1 >>> 0) {
     break label$1
    }
    $8_1 = $7_1 - $1_1 | 0;
    label$11 : {
     label$12 : {
      if ($6_1 >>> 0 > 255 >>> 0) {
       break label$12
      }
      $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
      $9_1 = $6_1 >>> 3 | 0;
      $6_1 = ($9_1 << 3 | 0) + 20236 | 0;
      label$13 : {
       $4_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       if (($4_1 | 0) != ($3_1 | 0)) {
        break label$13
       }
       HEAP32[(0 + 20196 | 0) >> 2] = (HEAP32[(0 + 20196 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9_1 | 0) | 0) | 0;
       break label$11;
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
      HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
      break label$11;
     }
     $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
     label$14 : {
      label$15 : {
       $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($5_1 | 0)) {
        break label$15
       }
       $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       HEAP32[(0 + 20212 | 0) >> 2] | 0;
       HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
       break label$14;
      }
      label$16 : {
       $3_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$16
       }
       $3_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        break label$16
       }
       $6_1 = 0;
       break label$14;
      }
      label$17 : while (1) {
       $9_1 = $3_1;
       $6_1 = $4_1;
       $3_1 = $6_1 + 20 | 0;
       $4_1 = HEAP32[$3_1 >> 2] | 0;
       if ($4_1) {
        continue label$17
       }
       $3_1 = $6_1 + 16 | 0;
       $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$17
       }
       break label$17;
      };
      HEAP32[$9_1 >> 2] = 0;
     }
     if (!$10_1) {
      break label$11
     }
     label$18 : {
      label$19 : {
       $4_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
       $3_1 = ($4_1 << 2 | 0) + 20500 | 0;
       if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
        break label$19
       }
       HEAP32[$3_1 >> 2] = $6_1;
       if ($6_1) {
        break label$18
       }
       HEAP32[(0 + 20200 | 0) >> 2] = (HEAP32[(0 + 20200 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$11;
      }
      HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$11
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $10_1;
     label$20 : {
      $3_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$20
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     $3_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$11
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
     HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
    }
    label$21 : {
     if ($8_1 >>> 0 > 15 >>> 0) {
      break label$21
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $7_1 | 0 | 2 | 0;
     $1_1 = $0_1 + $7_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$5;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 & 1 | 0 | $1_1 | 0 | 2 | 0;
    $1_1 = $0_1 + $1_1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $8_1 | 3 | 0;
    $3_1 = $0_1 + $7_1 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 1 | 0;
    $1452($1_1 | 0, $8_1 | 0);
   }
   $4_1 = $0_1;
  }
  return $4_1 | 0;
 }
 
 function $1452($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $6_1 = 0, $4_1 = 0, $2_1 = 0, $5_1 = 0, $7_1 = 0, $360_1 = 0, $367_1 = 0, $374_1 = 0;
  $2_1 = $0_1 + $1_1 | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ($3_1 & 1 | 0) {
     break label$2
    }
    if (!($3_1 & 3 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    $1_1 = $3_1 + $1_1 | 0;
    label$3 : {
     label$4 : {
      $0_1 = $0_1 - $3_1 | 0;
      if ((HEAP32[(0 + 20216 | 0) >> 2] | 0 | 0) == ($0_1 | 0)) {
       break label$4
      }
      label$5 : {
       if ($3_1 >>> 0 > 255 >>> 0) {
        break label$5
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
       $5_1 = $3_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 20236 | 0;
       $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       if (($3_1 | 0) != ($4_1 | 0)) {
        break label$3
       }
       HEAP32[(0 + 20196 | 0) >> 2] = (HEAP32[(0 + 20196 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$2;
      }
      $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      label$6 : {
       label$7 : {
        $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($0_1 | 0)) {
         break label$7
        }
        $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 20212 | 0) >> 2] | 0;
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
        break label$6;
       }
       label$8 : {
        $3_1 = $0_1 + 20 | 0;
        $4_1 = HEAP32[$3_1 >> 2] | 0;
        if ($4_1) {
         break label$8
        }
        $3_1 = $0_1 + 16 | 0;
        $4_1 = HEAP32[$3_1 >> 2] | 0;
        if ($4_1) {
         break label$8
        }
        $6_1 = 0;
        break label$6;
       }
       label$9 : while (1) {
        $5_1 = $3_1;
        $6_1 = $4_1;
        $3_1 = $6_1 + 20 | 0;
        $4_1 = HEAP32[$3_1 >> 2] | 0;
        if ($4_1) {
         continue label$9
        }
        $3_1 = $6_1 + 16 | 0;
        $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$9
        }
        break label$9;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$2
      }
      label$10 : {
       label$11 : {
        $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
        $3_1 = ($4_1 << 2 | 0) + 20500 | 0;
        if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
         break label$11
        }
        HEAP32[$3_1 >> 2] = $6_1;
        if ($6_1) {
         break label$10
        }
        HEAP32[(0 + 20200 | 0) >> 2] = (HEAP32[(0 + 20200 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$2;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($0_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$2
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$12 : {
       $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$12
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      }
      $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$2
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      break label$2;
     }
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
      break label$2
     }
     HEAP32[(0 + 20204 | 0) >> 2] = $1_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[$2_1 >> 2] = $1_1;
     return;
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
   }
   label$13 : {
    label$14 : {
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if ($3_1 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if ((HEAP32[(0 + 20220 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$15
      }
      HEAP32[(0 + 20220 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 20208 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 20208 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      if (($0_1 | 0) != (HEAP32[(0 + 20216 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 20204 | 0) >> 2] = 0;
      HEAP32[(0 + 20216 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if ((HEAP32[(0 + 20216 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break label$16
      }
      HEAP32[(0 + 20216 | 0) >> 2] = $0_1;
      $1_1 = (HEAP32[(0 + 20204 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[(0 + 20204 | 0) >> 2] = $1_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
      return;
     }
     $1_1 = ($3_1 & -8 | 0) + $1_1 | 0;
     label$17 : {
      label$18 : {
       if ($3_1 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
       $5_1 = $3_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 20236 | 0;
       label$19 : {
        $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($3_1 | 0) != ($4_1 | 0)) {
         break label$19
        }
        HEAP32[(0 + 20196 | 0) >> 2] = (HEAP32[(0 + 20196 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
       break label$17;
      }
      $7_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($2_1 | 0)) {
         break label$21
        }
        $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 20212 | 0) >> 2] | 0;
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
        break label$20;
       }
       label$22 : {
        $4_1 = $2_1 + 20 | 0;
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        if ($3_1) {
         break label$22
        }
        $4_1 = $2_1 + 16 | 0;
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        if ($3_1) {
         break label$22
        }
        $6_1 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5_1 = $4_1;
        $6_1 = $3_1;
        $4_1 = $3_1 + 20 | 0;
        $3_1 = HEAP32[$4_1 >> 2] | 0;
        if ($3_1) {
         continue label$23
        }
        $4_1 = $6_1 + 16 | 0;
        $3_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($3_1) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
        $3_1 = ($4_1 << 2 | 0) + 20500 | 0;
        if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
         break label$25
        }
        HEAP32[$3_1 >> 2] = $6_1;
        if ($6_1) {
         break label$24
        }
        HEAP32[(0 + 20200 | 0) >> 2] = (HEAP32[(0 + 20200 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$17
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$26 : {
       $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$26
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
      }
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$17
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $3_1;
      HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
     if (($0_1 | 0) != (HEAP32[(0 + 20216 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 20204 | 0) >> 2] = $1_1;
     return;
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
    HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
   }
   label$27 : {
    if ($1_1 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $3_1 = $1_1 >>> 3 | 0;
    $1_1 = ($3_1 << 3 | 0) + 20236 | 0;
    label$28 : {
     label$29 : {
      $4_1 = HEAP32[(0 + 20196 | 0) >> 2] | 0;
      $3_1 = 1 << $3_1 | 0;
      if ($4_1 & $3_1 | 0) {
       break label$29
      }
      HEAP32[(0 + 20196 | 0) >> 2] = $4_1 | $3_1 | 0;
      $3_1 = $1_1;
      break label$28;
     }
     $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    return;
   }
   $3_1 = 31;
   label$30 : {
    if ($1_1 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $3_1 = $1_1 >>> 8 | 0;
    $360_1 = $3_1;
    $3_1 = (($3_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $360_1 << $3_1 | 0;
    $367_1 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6_1 = $367_1 << $4_1 | 0;
    $374_1 = $6_1;
    $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $3_1 = (($374_1 << $6_1 | 0) >>> 15 | 0) - ($3_1 | $4_1 | 0 | $6_1 | 0) | 0;
    $3_1 = ($3_1 << 1 | 0 | (($1_1 >>> ($3_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
   $4_1 = ($3_1 << 2 | 0) + 20500 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      $6_1 = HEAP32[(0 + 20200 | 0) >> 2] | 0;
      $2_1 = 1 << $3_1 | 0;
      if ($6_1 & $2_1 | 0) {
       break label$33
      }
      HEAP32[(0 + 20200 | 0) >> 2] = $6_1 | $2_1 | 0;
      HEAP32[$4_1 >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
      break label$32;
     }
     $3_1 = $1_1 << (($3_1 | 0) == (31 | 0) ? 0 : 25 - ($3_1 >>> 1 | 0) | 0) | 0;
     $6_1 = HEAP32[$4_1 >> 2] | 0;
     label$34 : while (1) {
      $4_1 = $6_1;
      if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1_1 | 0)) {
       break label$31
      }
      $6_1 = $3_1 >>> 29 | 0;
      $3_1 = $3_1 << 1 | 0;
      $2_1 = ($4_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
      $6_1 = HEAP32[$2_1 >> 2] | 0;
      if ($6_1) {
       continue label$34
      }
      break label$34;
     };
     HEAP32[$2_1 >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
    return;
   }
   $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($0_1 + 24 | 0) >> 2] = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  }
 }
 
 function $1453() {
  return __wasm_memory_size() << 16 | 0 | 0;
 }
 
 function $1454($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[(0 + 14928 | 0) >> 2] | 0;
  $2_1 = ($0_1 + 3 | 0) & -4 | 0;
  $0_1 = $1_1 + $2_1 | 0;
  label$1 : {
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    if ($0_1 >>> 0 <= $1_1 >>> 0) {
     break label$1
    }
   }
   label$3 : {
    if ($0_1 >>> 0 <= ($1453() | 0) >>> 0) {
     break label$3
    }
    if (!(fimport$8($0_1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 14928 | 0) >> 2] = $0_1;
   return $1_1 | 0;
  }
  HEAP32[($57() | 0) >> 2] = 48;
  return -1 | 0;
 }
 
 function $1455($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $5_1 = 0, i64toi32_i32$5 = 0, $10$hi = 0, $10_1 = 0, $9$hi = 0, $7_1 = 0, $9_1 = 0, i64toi32_i32$6 = 0, $8_1 = 0, $11$hi = 0, $64_1 = 0, $6_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $70_1 = 0, $11_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0, $86_1 = 0, $52_1 = 0, $52$hi = 0, $55$hi = 0, $57_1 = 0, $57$hi = 0, $59_1 = 0, $59$hi = 0, $60_1 = 0, $60$hi = 0, $67$hi = 0, $69_1 = 0, $69$hi = 0, $131$hi = 0, $134_1 = 0, $135$hi = 0, $156_1 = 0, $156$hi = 0, $158$hi = 0, $161_1 = 0, $161$hi = 0, $163$hi = 0, $175$hi = 0, $178_1 = 0, $179$hi = 0, $208_1 = 0, $208$hi = 0, $210$hi = 0, $219_1 = 0, $220_1 = 0, $220$hi = 0, $222_1 = 0, $222$hi = 0, $228$hi = 0, $229_1 = 0, $229$hi = 0, $236_1 = 0, $236$hi = 0, $241$hi = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!($119($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     if (!($1457($3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $64_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $64_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $6_1 = $64_1;
     $7_1 = $6_1 & 32767 | 0;
     if (($7_1 | 0) != (32767 | 0)) {
      break label$2
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    $114($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    $126($5_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$2 = $5_1 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $1$hi;
    $52_1 = $1_1;
    $52$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $65_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $65_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $55$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $57_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $57$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $55$hi;
    i64toi32_i32$1 = $65_1;
    i64toi32_i32$3 = $57$hi;
    i64toi32_i32$0 = $57_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $9_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $9$hi = i64toi32_i32$3;
    $59_1 = $9_1;
    $59$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    $60_1 = $3_1;
    $60$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $66_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $66_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $66_1 & 32767 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = $8_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $67_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $67_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $67$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $69_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $69$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $67$hi;
    i64toi32_i32$2 = $67_1;
    i64toi32_i32$1 = $69$hi;
    i64toi32_i32$0 = $69_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $10_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $52$hi;
    i64toi32_i32$2 = $59$hi;
    i64toi32_i32$3 = $60$hi;
    i64toi32_i32$0 = $10$hi;
    if (($119($52_1 | 0, i64toi32_i32$1 | 0, $59_1 | 0, i64toi32_i32$2 | 0, $60_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break label$4
    }
    label$5 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $10$hi;
     if (!($119($1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$1 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    $114($5_1 + 112 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$2 = $5_1 + 120 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   label$6 : {
    label$7 : {
     if (!$7_1) {
      break label$7
     }
     i64toi32_i32$0 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$0;
     break label$6;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1081540608;
    $114($5_1 + 96 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5_1 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$1;
    $9$hi = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $68_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $68_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $7_1 = $68_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
   }
   label$8 : {
    if ($8_1) {
     break label$8
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1081540608;
    $114($5_1 + 80 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1 + 88 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $70_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $70_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $70_1 + -120 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $11_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $11$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$0 = $9_1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $9_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $9$hi = i64toi32_i32$0;
   label$9 : {
    if (($7_1 | 0) <= ($8_1 | 0)) {
     break label$9
    }
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$1 = $9_1;
       i64toi32_i32$2 = $11$hi;
       i64toi32_i32$3 = $11_1;
       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
       $131$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$0 = $4_1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3_1;
       $134_1 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$0 = 0;
       $135$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $131$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$5 = $135$hi;
       i64toi32_i32$1 = $134_1;
       i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
       i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
       $10_1 = i64toi32_i32$2;
       $10$hi = i64toi32_i32$4;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 0;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
        $71_1 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
          $72_1 = 0
         } else {
          $72_1 = 1
         }
         $73_1 = $72_1;
        } else {
         $73_1 = 0
        }
        $71_1 = $73_1;
       }
       if ($71_1) {
        break label$12
       }
       label$13 : {
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$13
        }
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 0;
        $114($5_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$1 = $5_1 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$0;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$1 = $5_1;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$0;
        break label$1;
       }
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$1 = $10_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
        $74_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
        $74_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       }
       $156_1 = $74_1;
       $156$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $4$hi;
       i64toi32_i32$0 = $4_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 63;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $75_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $75_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
       }
       $158$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $156$hi;
       i64toi32_i32$3 = $156_1;
       i64toi32_i32$0 = $158$hi;
       i64toi32_i32$2 = $75_1;
       i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       $9_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
       $9$hi = i64toi32_i32$0;
       break label$11;
      }
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $76_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $76_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $161_1 = $76_1;
      $161$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$0 = $4_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 63;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $77_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $77_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      $163$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $161$hi;
      i64toi32_i32$3 = $161_1;
      i64toi32_i32$0 = $163$hi;
      i64toi32_i32$2 = $77_1;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $9_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $9$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $78_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $78_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4_1 = $78_1;
     $4$hi = i64toi32_i32$3;
     $7_1 = $7_1 + -1 | 0;
     if (($7_1 | 0) > ($8_1 | 0)) {
      continue label$10
     }
     break label$10;
    };
    $7_1 = $8_1;
   }
   label$14 : {
    label$15 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$0 = $9_1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $175$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3_1;
     $178_1 = $4$hi >>> 0 < i64toi32_i32$0 >>> 0 | (($4$hi | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $179$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $175$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $179$hi;
     i64toi32_i32$0 = $178_1;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
      $79_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        $80_1 = 0
       } else {
        $80_1 = 1
       }
       $81_1 = $80_1;
      } else {
       $81_1 = 0
      }
      $79_1 = $81_1;
     }
     if ($79_1) {
      break label$15
     }
     i64toi32_i32$3 = $9$hi;
     $10_1 = $9_1;
     $10$hi = i64toi32_i32$3;
     break label$14;
    }
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$14
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    $114($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$0 = $5_1 + 56 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$16 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$16
    }
    label$17 : while (1) {
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $82_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $82_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3_1 = $82_1;
     $3$hi = i64toi32_i32$3;
     $7_1 = $7_1 + -1 | 0;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $83_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $83_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $4_1 = $83_1;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $208_1 = $3_1;
     $208$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $84_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $84_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $210$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $208$hi;
     i64toi32_i32$1 = $208_1;
     i64toi32_i32$3 = $210$hi;
     i64toi32_i32$2 = $84_1;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $10_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $10_1;
     i64toi32_i32$1 = 65536;
     i64toi32_i32$2 = 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
      continue label$17
     }
     break label$17;
    };
   }
   $8_1 = $6_1 & 32768 | 0;
   label$18 : {
    if (($7_1 | 0) > (0 | 0)) {
     break label$18
    }
    $219_1 = $5_1 + 64 | 0;
    i64toi32_i32$0 = $4$hi;
    $220_1 = $4_1;
    $220$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$2 = $10_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $222_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $222$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = $7_1 + 120 | 0 | $8_1 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $85_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $85_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $228$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $222$hi;
    i64toi32_i32$3 = $222_1;
    i64toi32_i32$0 = $228$hi;
    i64toi32_i32$1 = $85_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $229_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $229$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $220$hi;
    i64toi32_i32$3 = $229$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1065811968;
    $114($219_1 | 0, $220_1 | 0, i64toi32_i32$0 | 0, $229_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5_1 + 72 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$1;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$0 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $236_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $236$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = $7_1 | $8_1 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $86_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $86_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $241$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $236$hi;
   i64toi32_i32$2 = $236_1;
   i64toi32_i32$1 = $241$hi;
   i64toi32_i32$0 = $86_1;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $2$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $5_1 + 128 | 0;
 }
 
 function $1456($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $32_1 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    label$3 : {
     if (($1_1 | 0) >= (2047 | 0)) {
      break label$3
     }
     $1_1 = $1_1 + -1023 | 0;
     break label$1;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = (($1_1 | 0) < (3069 | 0) ? $1_1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   label$4 : {
    if (($1_1 | 0) <= (-2045 | 0)) {
     break label$4
    }
    $1_1 = $1_1 + 1022 | 0;
    break label$1;
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   $1_1 = (($1_1 | 0) > (-3066 | 0) ? $1_1 : -3066) + 2044 | 0;
  }
  $32_1 = $0_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1_1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32_1 * +wasm2js_scratch_load_f64());
 }
 
 function $1457($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2$hi = 0, $2_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $2_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $2$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $13_1 & 32767 | 0;
    if (($3_1 | 0) == (32767 | 0)) {
     break label$2
    }
    $4_1 = 4;
    if ($3_1) {
     break label$1
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4_1 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $4_1 | 0;
 }
 
 function $1458($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 512 >>> 0) {
    break label$1
   }
   fimport$9($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $0_1 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ($0_1 & 3 | 0) {
       break label$5
      }
      $2_1 = $0_1;
      break label$4;
     }
     label$6 : {
      if (($2_1 | 0) >= (1 | 0)) {
       break label$6
      }
      $2_1 = $0_1;
      break label$4;
     }
     $2_1 = $0_1;
     label$7 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if (!($2_1 & 3 | 0)) {
       break label$4
      }
      if ($2_1 >>> 0 < $3_1 >>> 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4_1 = $3_1 & -4 | 0;
     if ($4_1 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2_1 = $0_1;
    break label$2;
   }
   label$12 : {
    $4_1 = $3_1 + -4 | 0;
    if ($4_1 >>> 0 >= $0_1 >>> 0) {
     break label$12
    }
    $2_1 = $0_1;
    break label$2;
   }
   $2_1 = $0_1;
   label$13 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $1459($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0, $6$hi = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $2_1 + $0_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   HEAP8[$0_1 >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$0;
   $1_1 = $3_1 + $5_1 | 0;
   label$2 : while (1) {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $1460($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : {
    $3_1 = $0_1 + $2_1 | 0;
    if (($1_1 - $3_1 | 0) >>> 0 > (0 - ($2_1 << 1 | 0) | 0) >>> 0) {
     break label$2
    }
    return $1458($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
   }
   $4_1 = ($1_1 ^ $0_1 | 0) & 3 | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
       break label$5
      }
      label$6 : {
       if (!$4_1) {
        break label$6
       }
       $3_1 = $0_1;
       break label$3;
      }
      label$7 : {
       if ($0_1 & 3 | 0) {
        break label$7
       }
       $3_1 = $0_1;
       break label$4;
      }
      $3_1 = $0_1;
      label$8 : while (1) {
       if (!$2_1) {
        break label$1
       }
       HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
       $1_1 = $1_1 + 1 | 0;
       $2_1 = $2_1 + -1 | 0;
       $3_1 = $3_1 + 1 | 0;
       if (!($3_1 & 3 | 0)) {
        break label$4
       }
       continue label$8;
      };
     }
     label$9 : {
      if ($4_1) {
       break label$9
      }
      label$10 : {
       if (!($3_1 & 3 | 0)) {
        break label$10
       }
       label$11 : while (1) {
        if (!$2_1) {
         break label$1
        }
        $2_1 = $2_1 + -1 | 0;
        $3_1 = $0_1 + $2_1 | 0;
        HEAP8[$3_1 >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
        if ($3_1 & 3 | 0) {
         continue label$11
        }
        break label$11;
       };
      }
      if ($2_1 >>> 0 <= 3 >>> 0) {
       break label$9
      }
      label$12 : while (1) {
       $2_1 = $2_1 + -4 | 0;
       HEAP32[($0_1 + $2_1 | 0) >> 2] = HEAP32[($1_1 + $2_1 | 0) >> 2] | 0;
       if ($2_1 >>> 0 > 3 >>> 0) {
        continue label$12
       }
       break label$12;
      };
     }
     if (!$2_1) {
      break label$1
     }
     label$13 : while (1) {
      $2_1 = $2_1 + -1 | 0;
      HEAP8[($0_1 + $2_1 | 0) >> 0] = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
      if ($2_1) {
       continue label$13
      }
      break label$1;
     };
    }
    if ($2_1 >>> 0 <= 3 >>> 0) {
     break label$3
    }
    label$14 : while (1) {
     HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3 >>> 0) {
      continue label$14
     }
     break label$14;
    };
   }
   if (!$2_1) {
    break label$1
   }
   label$15 : while (1) {
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $1461($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $1462($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 0;
    if ($1461($2_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if (($3_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   label$4 : {
    label$5 : {
     if ((HEAP8[($2_1 + 75 | 0) >> 0] | 0 | 0) >= (0 | 0)) {
      break label$5
     }
     $3_1 = 0;
     break label$4;
    }
    $4_1 = $1_1;
    label$6 : while (1) {
     label$7 : {
      $3_1 = $4_1;
      if ($3_1) {
       break label$7
      }
      $3_1 = 0;
      break label$4;
     }
     $4_1 = $3_1 + -1 | 0;
     if ((HEAPU8[($0_1 + $4_1 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      continue label$6
     }
     break label$6;
    };
    $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $3_1) | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     break label$1
    }
    $0_1 = $0_1 + $3_1 | 0;
    $1_1 = $1_1 - $3_1 | 0;
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
   }
   $1458($5_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $1_1 | 0;
   $4_1 = $3_1 + $1_1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $1463($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = Math_imul($2_1, $1_1);
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $0_1 = $1462($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   $5_1 = $1464($3_1 | 0) | 0;
   $0_1 = $1462($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
   if (!$5_1) {
    break label$1
   }
   $1465($3_1 | 0);
  }
  label$3 : {
   if (($0_1 | 0) != ($4_1 | 0)) {
    break label$3
   }
   return ($1_1 ? $2_1 : 0) | 0;
  }
  return ($0_1 >>> 0) / ($1_1 >>> 0) | 0 | 0;
 }
 
 function $1464($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1465($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1466($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = $0_1;
  label$1 : {
   label$2 : {
    if (!($1_1 & 3 | 0)) {
     break label$2
    }
    $1_1 = $0_1;
    label$3 : while (1) {
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$1
     }
     $1_1 = $1_1 + 1 | 0;
     if ($1_1 & 3 | 0) {
      continue label$3
     }
     break label$3;
    };
   }
   label$4 : while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$4
    }
    break label$4;
   };
   label$5 : {
    if ($3_1 & 255 | 0) {
     break label$5
    }
    return $2_1 - $0_1 | 0 | 0;
   }
   label$6 : while (1) {
    $3_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
    $1_1 = $2_1 + 1 | 0;
    $2_1 = $1_1;
    if ($3_1) {
     continue label$6
    }
    break label$6;
   };
  }
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1467() {
  return global$0 | 0;
 }
 
 function $1468($0_1) {
  $0_1 = $0_1 | 0;
  global$0 = $0_1;
 }
 
 function $1469($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
  global$0 = $1_1;
  return $1_1 | 0;
 }
 
 function $1470() {
  global$2 = 5263584;
  global$1 = (20692 + 15 | 0) & -16 | 0;
 }
 
 function $1471() {
  return global$0 - global$1 | 0 | 0;
 }
 
 function $1472() {
  return global$1 | 0;
 }
 
 function $1473($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $5$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, i64toi32_i32$0) | 0 | 0;
 }
 
 function $1474($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $5$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, i64toi32_i32$0, $6_1, $6$hi) | 0 | 0;
 }
 
 function $1475($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $6$hi, $7_1, $7$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  $7_1 = $7_1 | 0;
  $7$hi = $7$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = $6$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1, i64toi32_i32$0, $7_1, $7$hi) | 0 | 0;
 }
 
 function $1476($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $3$hi;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, i64toi32_i32$0, $4_1, $5_1);
 }
 
 function $1477($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1478($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $20_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $13$hi = 0, $16$hi = 0;
  $7_1 = $0_1;
  $8_1 = $1_1;
  $9_1 = $2_1;
  $10_1 = $3_1;
  $11_1 = $4_1;
  i64toi32_i32$0 = 0;
  $13_1 = $5_1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $16$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $13$hi;
  i64toi32_i32$0 = $13_1;
  i64toi32_i32$2 = $16$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  return $1473($7_1 | 0, $8_1 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $1479($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $29_1 = 0, $30_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $15_1 = 0, $15$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $21_1 = 0, $21$hi = 0, $24$hi = 0, $25_1 = 0, $25$hi = 0;
  $9_1 = $0_1;
  $10_1 = $1_1;
  $11_1 = $2_1;
  $12_1 = $3_1;
  $13_1 = $4_1;
  i64toi32_i32$0 = 0;
  $15_1 = $5_1;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $29_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $29_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$0 = $15_1;
  i64toi32_i32$2 = $18$hi;
  i64toi32_i32$3 = $29_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $19_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $19$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $21_1 = $7_1;
  $21$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $8_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $30_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $30_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $24$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$2 = $21_1;
  i64toi32_i32$1 = $24$hi;
  i64toi32_i32$3 = $30_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $25_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $25$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$2 = $25$hi;
  return $1474($9_1 | 0, $10_1 | 0, $11_1 | 0, $12_1 | 0, $13_1 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $25_1 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $1480($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $31_1 = 0, $32_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $17_1 = 0, $17$hi = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $23_1 = 0, $23$hi = 0, $26$hi = 0, $27_1 = 0, $27$hi = 0;
  $10_1 = $0_1;
  $11_1 = $1_1;
  $12_1 = $2_1;
  $13_1 = $3_1;
  $14_1 = $4_1;
  $15_1 = $5_1;
  i64toi32_i32$0 = 0;
  $17_1 = $6_1;
  $17$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $31_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $31_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $17$hi;
  i64toi32_i32$0 = $17_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $31_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $21$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $23_1 = $8_1;
  $23$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $9_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $32_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $32_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $26$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $23$hi;
  i64toi32_i32$2 = $23_1;
  i64toi32_i32$1 = $26$hi;
  i64toi32_i32$3 = $32_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $27_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $27$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$2 = $27$hi;
  return $1475($10_1 | 0, $11_1 | 0, $12_1 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $27_1 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $1481($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $18_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $11$hi = 0, $14$hi = 0;
  $7_1 = $0_1;
  $8_1 = $1_1;
  $9_1 = $2_1;
  i64toi32_i32$0 = 0;
  $11_1 = $3_1;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $18_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $11$hi;
  i64toi32_i32$0 = $11_1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$3 = $18_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $1476($7_1 | 0, $8_1 | 0, $9_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $5_1 | 0, $6_1 | 0);
 }
 
 function $1482($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0, $5_1 = 0, $5$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  i64toi32_i32$0 = 0;
  $9_1 = $2_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = $1477($6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  fimport$10($18_1 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5_1 | 0;
 }
 
 function $1483($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  $4_1 = $0_1;
  i64toi32_i32$0 = $1$hi;
  $6_1 = $1_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return fimport$11($4_1 | 0, $6_1 | 0, $12_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              block : {
               i64toi32_i32$1 = var$1$hi;
               var$3 = var$1;
               if (!var$3) {
                break label$11
               }
               i64toi32_i32$1 = var$1$hi;
               i64toi32_i32$0 = var$1;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               var$4 = $38_1;
               if (!var$4) {
                break label$9
               }
               var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
               if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
               }
               break label$2;
              }
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41_1;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      block3 : {
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$1 = var$1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       var$8 = i64toi32_i32$4;
       var$8$hi = i64toi32_i32$5;
       label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $45_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
         $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140_1 = $45_1;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = 0;
         $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
         $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140_1;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $46_1;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144_1 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
         $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $47_1;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144_1;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151_1;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $48_1;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(env);
 var FUNCTION_TABLE = Table([null, $46, $47, $82, $83, $86, $141, $168, $169, $1419, $1449, $522, $814, $822, $920, $923, $927, $930, $933, $936, $938, $940, $942, $944, $946, $948, $950, $952, $797, $802, $818, $841, $842, $843, $844, $845, $846, $847, $848, $849, $850, $685, $862, $863, $866, $869, $870, $873, $874, $876, $899, $900, $903, $905, $907, $909, $913, $901, $902, $904, $906, $908, $910, $914, $187, $817, $824, $825, $827, $828, $829, $830, $832, $833, $835, $836, $837, $838, $839, $851, $852, $853, $854, $855, $856, $857, $860, $877, $878, $880, $882, $883, $884, $885, $887, $888, $889, $891, $893, $894, $895, $896, $898, $186, $188, $189, $190, $193, $194, $195, $196, $197, $201, $960, $202, $219, $231, $234, $237, $240, $243, $246, $251, $254, $257, $961, $270, $285, $290, $292, $294, $296, $298, $300, $304, $306, $308, $962, $324, $336, $343, $344, $345, $346, $357, $358, $963, $359, $374, $382, $383, $384, $385, $393, $394, $964, $966, $400, $401, $402, $403, $405, $407, $410, $918, $925, $931, $945, $949, $937, $941, $967, $969, $426, $427, $428, $435, $437, $439, $442, $921, $928, $934, $947, $951, $939, $943, $971, $970, $455, $973, $972, $463, $974, $472, $475, $476, $477, $478, $479, $480, $481, $482, $975, $483, $484, $485, $486, $487, $488, $489, $490, $491, $976, $492, $495, $496, $497, $500, $501, $502, $503, $504, $977, $505, $506, $507, $508, $509, $510, $511, $512, $513, $978, $521, $542, $979, $588, $605, $980, $645, $657, $981, $658, $669, $982, $679, $680, $681, $983, $682, $683, $684, $1217, $1218, $1220, $1221, $1222, $1224, $1225, $1226, $1227, $1233, $1234, $1235, $1236, $1237, $1238, $1239, $1241, $1242, $1243, $1244, $1245, $1246, $1247, $1251, $1252, $1253, $1254, $1255, $1257, $1259, $1258, $1260, $1269, $1271, $1270, $1272, $1283, $1285, $1284, $1286, $1288, $1290, $1289, $1291, $1213, $1214, $1215, $1216, $1210, $1208, $1206, $1305, $1207, $1306, $1332, $1333, $1334, $1335, $1337, $1338, $1343, $1344, $1346, $1348, $1349, $1352, $1353, $1354, $1355, $1356, $1357, $1358, $1359, $1361, $1362, $1421, $1424, $1422, $1423, $1429, $1446, $1443, $1432, $1425, $1445, $1442, $1433, $1426, $1444, $1439, $1436]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "__wasm_call_ctors": $0, 
  "main": $39, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "fflush": $1211, 
  "__errno_location": $57, 
  "stackSave": $1467, 
  "stackRestore": $1468, 
  "stackAlloc": $1469, 
  "emscripten_stack_init": $1470, 
  "emscripten_stack_get_free": $1471, 
  "emscripten_stack_get_end": $1472, 
  "dynCall_iiiiij": $1478, 
  "dynCall_iiiiijj": $1479, 
  "dynCall_iiiiiijj": $1480, 
  "dynCall_viijii": $1481, 
  "dynCall_jiji": $1482
 };
}

  return asmFunc(asmLibraryArg);
}

)(asmLibraryArg);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];

// end include: wasm2js.js
if (typeof WebAssembly !== 'object') {
  abort('no native wasm support detected');
}

// include: runtime_safe_heap.js


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
      case 'i1': HEAP8[((ptr)>>0)] = value; break;
      case 'i8': HEAP8[((ptr)>>0)] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

// end include: runtime_safe_heap.js
// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  function onDone(ret) {
    if (stack !== 0) stackRestore(stack);
    return convertReturnValue(ret);
  }

  ret = onDone(ret);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.
function _malloc() {
  abort("malloc() called but not included in the build - add '_malloc' to EXPORTED_FUNCTIONS");
}
function _free() {
  // Show a helpful error since we used to include free by default in the past.
  abort("free() called but not included in the build - add '_free' to EXPORTED_FUNCTIONS");
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((Uint8Array|Array<number>), number)} */
function allocate(slab, allocator) {
  var ret;
  assert(typeof allocator === 'number', 'allocate no longer takes a type argument')
  assert(typeof slab !== 'number', 'allocate no longer takes a number as arg0')

  if (allocator == ALLOC_STACK) {
    ret = stackAlloc(slab.length);
  } else {
    ret = abort('malloc was not included, but is needed in allocate. Adding "_malloc" to EXPORTED_FUNCTIONS should fix that. This may be a bug in the compiler, please file an issue.');;
  }

  if (slab.subarray || slab.slice) {
    HEAPU8.set(/** @type {!Uint8Array} */(slab), ret);
  } else {
    HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
}

// include: runtime_strings.js


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u > 0x10FFFF) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}

// end include: runtime_strings.js
// include: runtime_strings_extra.js


// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var str = '';

    // If maxBytesToRead is not passed explicitly, it will be undefined, and the for-loop's condition
    // will always evaluate to true. The loop is then terminated on the first null char.
    for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) break;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }

    return str;
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)] = codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)] = codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = abort('malloc was not included, but is needed in allocateUTF8. Adding "_malloc" to EXPORTED_FUNCTIONS should fix that. This may be a bug in the compiler, please file an issue.');;
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)] = str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)] = 0;
}

// end include: runtime_strings_extra.js
// Memory management

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;
if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) {
  Object.defineProperty(Module, 'INITIAL_MEMORY', {
    configurable: true,
    get: function() {
      abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

assert(INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js


// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_MEMORY / 65536,
      'maximum': INITIAL_MEMORY / 65536
    });
  }

if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_MEMORY % 65536 === 0);
updateGlobalBufferAndViews(buffer);

// end include: runtime_init_memory.js

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // The stack grows downwards
  HEAPU32[(max >> 2)+1] = 0x2135467;
  HEAPU32[(max >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  var cookie1 = HEAPU32[(max >> 2)+1];
  var cookie2 = HEAPU32[(max >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

// end include: runtime_stack_check.js
// include: runtime_assertions.js


// Endianness check
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -s SUPPORT_BIG_ENDIAN=1 to bypass)';
})();

// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;
var runtimeKeepaliveCounter = 0;

function keepRuntimeAlive() {
  return noExitRuntime || runtimeKeepaliveCounter > 0;
}

function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  
if (!Module["noFSInit"] && !FS.init.initialized)
  FS.init();
FS.ignorePermissions = false;

TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  {
    if (Module['onAbort']) {
      Module['onAbort'](what);
    }
  }

  what = 'Aborted(' + what + ')';
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// {{MEM_INITIALIZER}}

// include: memoryprofiler.js


// end include: memoryprofiler.js
// include: URIUtils.js


// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  // Prefix of data URIs emitted by SINGLE_FILE and related options.
  return filename.startsWith(dataURIPrefix);
}

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return filename.startsWith('file://');
}

// end include: URIUtils.js
function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    assert(!runtimeExited, 'native function `' + displayName + '` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

var wasmBinaryFile;
  wasmBinaryFile = 'wmp-index.wasm';
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, try to to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch === 'function'
      && !isFileURI(wasmBinaryFile)
    ) {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
          return getBinary(wasmBinaryFile);
      });
    }
    else {
      if (readAsync) {
        // fetch is not available or url is file => try XHR (readAsync uses XHR internally)
        return new Promise(function(resolve, reject) {
          readAsync(wasmBinaryFile, function(response) { resolve(new Uint8Array(/** @type{!ArrayBuffer} */(response))) }, reject)
        });
      }
    }
  }

  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");

    addOnInit(Module['asm']['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(result['instance']);
  }

  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(function (instance) {
      return instance;
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);

      // Warn on some common problems.
      if (isFileURI(wasmBinaryFile)) {
        err('warning: Loading from a file URI (' + wasmBinaryFile + ') is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing');
      }
      abort(reason);
    });
  }

  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
        !isFileURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);

        return result.then(
          receiveInstantiationResult,
          function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            return instantiateArrayBuffer(receiveInstantiationResult);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiationResult);
    }
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};






  function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback(Module); // Pass the module as the first argument.
          continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
          if (callback.arg === undefined) {
            wasmTable.get(func)();
          } else {
            wasmTable.get(func)(callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function handleException(e) {
      // Certain exception types we do not treat as errors since they are used for
      // internal control flow.
      // 1. ExitStatus, which is thrown by exit()
      // 2. "unwind", which is thrown by emscripten_unwind_to_js_event_loop() and others
      //    that wish to return to JS event loop.
      if (e instanceof ExitStatus || e == 'unwind') {
        return EXITSTATUS;
      }
      quit_(1, e);
    }

  function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function _atexit(func, arg) {
    }
  function ___cxa_atexit(a0,a1
  ) {
  return _atexit(a0,a1);
  }

  function _abort() {
      abort('native code called abort()');
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s INITIAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }
  function _emscripten_resize_heap(requestedSize) {
      var oldSize = HEAPU8.length;
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }

  var ENV = {};
  
  function getExecutableName() {
      return thisProgram || './this.program';
    }
  function getEnvStrings() {
      if (!getEnvStrings.strings) {
        // Default values.
        // Browser language detection #8751
        var lang = ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          'LANG': lang,
          '_': getExecutableName()
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          // x is a key in ENV; if ENV[x] is undefined, that means it was
          // explicitly set to be so. We allow user code to do that to
          // force variables with default values to remain unset.
          if (ENV[x] === undefined) delete env[x];
          else env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(x + '=' + env[x]);
        }
        getEnvStrings.strings = strings;
      }
      return getEnvStrings.strings;
    }
  
  var PATH = {splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        path = PATH.normalize(path);
        path = path.replace(/\/$/, "");
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  function getRandomDevice() {
      if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
        // for modern web browsers
        var randomBuffer = new Uint8Array(1);
        return function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
      } else
      if (ENVIRONMENT_IS_NODE) {
        // for nodejs with or without crypto support included
        try {
          var crypto_module = require('crypto');
          // nodejs has crypto support
          return function() { return crypto_module['randomBytes'](1)[0]; };
        } catch (e) {
          // nodejs doesn't have crypto support
        }
      }
      // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
      return function() { abort("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
    }
  
  var PATH_FS = {resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY = {ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().includes('EOF')) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  function zeroMemory(address, size) {
      HEAPU8.fill(0, address, address + size);
    }
  
  function alignMemory(size, alignment) {
      assert(alignment, "alignment argument is required");
      return Math.ceil(size / alignment) * alignment;
    }
  function mmapAlloc(size) {
      abort('internal error: mmapAlloc called but `memalign` native symbol not exported');
    }
  var MEMFS = {ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
          parent.timestamp = node.timestamp;
        }
        return node;
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
        } else {
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
        }
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.parent.timestamp = Date.now()
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          new_dir.timestamp = old_node.parent.timestamp;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, address, length, position, prot, flags) {
          if (address !== 0) {
            // We don't currently support location hints for the address of the mapping
            throw new FS.ErrnoError(28);
          }
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents.buffer === buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  function asyncLoad(url, onload, onerror, noRunDep) {
      var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
      readAsync(url, function(arrayBuffer) {
        assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
        onload(new Uint8Array(arrayBuffer));
        if (dep) removeRunDependency(dep);
      }, function(event) {
        if (onerror) {
          onerror();
        } else {
          throw 'Loading data file "' + url + '" failed.';
        }
      });
      if (dep) addRunDependency(dep);
    }
  
  var ERRNO_MESSAGES = {0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES = {};
  var FS = {root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        assert(typeof parent === 'object')
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"r+":2,"w":577,"w+":578,"a":1089,"a+":1090},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.includes('r') && !(node.mode & 292)) {
          return 2;
        } else if (perms.includes('w') && !(node.mode & 146)) {
          return 2;
        } else if (perms.includes('x') && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function(){};
          FS.FSStream.prototype = {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.includes(current.mount)) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existant directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
          }
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, address, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 0;
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 577;
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using err() rather than out()
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device = getRandomDevice();
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
        // name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        var proc_self = FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode(proc_self, 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 0);
        var stdout = FS.open('/dev/stdout', 1);
        var stderr = FS.open('/dev/stderr', 1);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 577);
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            FS.forceLoadFile(node);
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          FS.forceLoadFile(node);
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },absolutePath:function() {
        abort('FS.absolutePath has been removed; use PATH_FS.resolve instead');
      },createFolder:function() {
        abort('FS.createFolder has been removed; use FS.mkdir instead');
      },createLink:function() {
        abort('FS.createLink has been removed; use FS.symlink instead');
      },joinPath:function() {
        abort('FS.joinPath has been removed; use PATH.join instead');
      },mmapAlloc:function() {
        abort('FS.mmapAlloc has been replaced by the top level function mmapAlloc');
      },standardizePath:function() {
        abort('FS.standardizePath has been removed; use PATH.normalize instead');
      }};
  var SYSCALLS = {mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd, path, allowEmpty) {
        if (path[0] === '/') {
          return path;
        }
        // relative path
        var dir;
        if (dirfd === -100) {
          dir = FS.cwd();
        } else {
          var dirstream = FS.getStream(dirfd);
          if (!dirstream) throw new FS.ErrnoError(8);
          dir = dirstream.path;
        }
        if (path.length == 0) {
          if (!allowEmpty) {
            throw new FS.ErrnoError(44);;
          }
          return dir;
        }
        return PATH.join2(dir, path);
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)] = stat.dev;
        HEAP32[(((buf)+(4))>>2)] = 0;
        HEAP32[(((buf)+(8))>>2)] = stat.ino;
        HEAP32[(((buf)+(12))>>2)] = stat.mode;
        HEAP32[(((buf)+(16))>>2)] = stat.nlink;
        HEAP32[(((buf)+(20))>>2)] = stat.uid;
        HEAP32[(((buf)+(24))>>2)] = stat.gid;
        HEAP32[(((buf)+(28))>>2)] = stat.rdev;
        HEAP32[(((buf)+(32))>>2)] = 0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)] = tempI64[0],HEAP32[(((buf)+(44))>>2)] = tempI64[1]);
        HEAP32[(((buf)+(48))>>2)] = 4096;
        HEAP32[(((buf)+(52))>>2)] = stat.blocks;
        HEAP32[(((buf)+(56))>>2)] = (stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)] = 0;
        HEAP32[(((buf)+(64))>>2)] = (stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)] = 0;
        HEAP32[(((buf)+(72))>>2)] = (stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)] = 0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)] = tempI64[0],HEAP32[(((buf)+(84))>>2)] = tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};
  function _environ_get(__environ, environ_buf) {
      var bufSize = 0;
      getEnvStrings().forEach(function(string, i) {
        var ptr = environ_buf + bufSize;
        HEAP32[(((__environ)+(i * 4))>>2)] = ptr;
        writeAsciiToMemory(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    }

  function _environ_sizes_get(penviron_count, penviron_buf_size) {
      var strings = getEnvStrings();
      HEAP32[((penviron_count)>>2)] = strings.length;
      var bufSize = 0;
      strings.forEach(function(string) {
        bufSize += string.length + 1;
      });
      HEAP32[((penviron_buf_size)>>2)] = bufSize;
      return 0;
    }

  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)] = num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)] = tempI64[0],HEAP32[(((newOffset)+(4))>>2)] = tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)] = num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _setTempRet0(val) {
      setTempRet0(val);
    }

  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]) {
        // no-op
      }
      return sum;
    }
  
  var __MONTH_DAYS_LEAP = [31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR = [31,28,31,30,31,30,31,31,30,31,30,31];
  function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while (days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }
  function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
      };
  
      var pattern = UTF8ToString(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate time representation
        // Modified Conversion Specifiers
        '%Ec': '%c',                      // Replaced by the locale's alternative appropriate date and time representation.
        '%EC': '%C',                      // Replaced by the name of the base year (period) in the locale's alternative representation.
        '%Ex': '%m/%d/%y',                // Replaced by the locale's alternative date representation.
        '%EX': '%H:%M:%S',                // Replaced by the locale's alternative time representation.
        '%Ey': '%y',                      // Replaced by the offset from %EC (year only) in the locale's alternative representation.
        '%EY': '%Y',                      // Replaced by the full alternative year representation.
        '%Od': '%d',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.
        '%Oe': '%e',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.
        '%OH': '%H',                      // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.
        '%OI': '%I',                      // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.
        '%Om': '%m',                      // Replaced by the month using the locale's alternative numeric symbols.
        '%OM': '%M',                      // Replaced by the minutes using the locale's alternative numeric symbols.
        '%OS': '%S',                      // Replaced by the seconds using the locale's alternative numeric symbols.
        '%Ou': '%u',                      // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).
        '%OU': '%U',                      // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.
        '%OV': '%V',                      // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.
        '%Ow': '%w',                      // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.
        '%OW': '%W',                      // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.
        '%Oy': '%y',                      // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      }
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      }
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        }
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      }
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      }
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      }
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          return date.tm_wday || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          return date.tm_wday;
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.includes(rule)) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }
  function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();;
ERRNO_CODES = {
      'EPERM': 63,
      'ENOENT': 44,
      'ESRCH': 71,
      'EINTR': 27,
      'EIO': 29,
      'ENXIO': 60,
      'E2BIG': 1,
      'ENOEXEC': 45,
      'EBADF': 8,
      'ECHILD': 12,
      'EAGAIN': 6,
      'EWOULDBLOCK': 6,
      'ENOMEM': 48,
      'EACCES': 2,
      'EFAULT': 21,
      'ENOTBLK': 105,
      'EBUSY': 10,
      'EEXIST': 20,
      'EXDEV': 75,
      'ENODEV': 43,
      'ENOTDIR': 54,
      'EISDIR': 31,
      'EINVAL': 28,
      'ENFILE': 41,
      'EMFILE': 33,
      'ENOTTY': 59,
      'ETXTBSY': 74,
      'EFBIG': 22,
      'ENOSPC': 51,
      'ESPIPE': 70,
      'EROFS': 69,
      'EMLINK': 34,
      'EPIPE': 64,
      'EDOM': 18,
      'ERANGE': 68,
      'ENOMSG': 49,
      'EIDRM': 24,
      'ECHRNG': 106,
      'EL2NSYNC': 156,
      'EL3HLT': 107,
      'EL3RST': 108,
      'ELNRNG': 109,
      'EUNATCH': 110,
      'ENOCSI': 111,
      'EL2HLT': 112,
      'EDEADLK': 16,
      'ENOLCK': 46,
      'EBADE': 113,
      'EBADR': 114,
      'EXFULL': 115,
      'ENOANO': 104,
      'EBADRQC': 103,
      'EBADSLT': 102,
      'EDEADLOCK': 16,
      'EBFONT': 101,
      'ENOSTR': 100,
      'ENODATA': 116,
      'ETIME': 117,
      'ENOSR': 118,
      'ENONET': 119,
      'ENOPKG': 120,
      'EREMOTE': 121,
      'ENOLINK': 47,
      'EADV': 122,
      'ESRMNT': 123,
      'ECOMM': 124,
      'EPROTO': 65,
      'EMULTIHOP': 36,
      'EDOTDOT': 125,
      'EBADMSG': 9,
      'ENOTUNIQ': 126,
      'EBADFD': 127,
      'EREMCHG': 128,
      'ELIBACC': 129,
      'ELIBBAD': 130,
      'ELIBSCN': 131,
      'ELIBMAX': 132,
      'ELIBEXEC': 133,
      'ENOSYS': 52,
      'ENOTEMPTY': 55,
      'ENAMETOOLONG': 37,
      'ELOOP': 32,
      'EOPNOTSUPP': 138,
      'EPFNOSUPPORT': 139,
      'ECONNRESET': 15,
      'ENOBUFS': 42,
      'EAFNOSUPPORT': 5,
      'EPROTOTYPE': 67,
      'ENOTSOCK': 57,
      'ENOPROTOOPT': 50,
      'ESHUTDOWN': 140,
      'ECONNREFUSED': 14,
      'EADDRINUSE': 3,
      'ECONNABORTED': 13,
      'ENETUNREACH': 40,
      'ENETDOWN': 38,
      'ETIMEDOUT': 73,
      'EHOSTDOWN': 142,
      'EHOSTUNREACH': 23,
      'EINPROGRESS': 26,
      'EALREADY': 7,
      'EDESTADDRREQ': 17,
      'EMSGSIZE': 35,
      'EPROTONOSUPPORT': 66,
      'ESOCKTNOSUPPORT': 137,
      'EADDRNOTAVAIL': 4,
      'ENETRESET': 39,
      'EISCONN': 30,
      'ENOTCONN': 53,
      'ETOOMANYREFS': 141,
      'EUSERS': 136,
      'EDQUOT': 19,
      'ESTALE': 72,
      'ENOTSUP': 138,
      'ENOMEDIUM': 148,
      'EILSEQ': 25,
      'EOVERFLOW': 61,
      'ECANCELED': 11,
      'ENOTRECOVERABLE': 56,
      'EOWNERDEAD': 62,
      'ESTRPIPE': 135,
    };;
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf = Buffer.from(s, 'base64');
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


var asmLibraryArg = {
  "__cxa_atexit": ___cxa_atexit,
  "abort": _abort,
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "environ_get": _environ_get,
  "environ_sizes_get": _environ_sizes_get,
  "fd_close": _fd_close,
  "fd_read": _fd_read,
  "fd_seek": _fd_seek,
  "fd_write": _fd_write,
  "getTempRet0": getTempRet0,
  "memory": wasmMemory,
  "setTempRet0": setTempRet0,
  "strftime_l": _strftime_l
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");

/** @type {function(...*):?} */
var _main = Module["_main"] = createExportWrapper("main");

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush");

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location");

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave");

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore");

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc");

/** @type {function(...*):?} */
var _emscripten_stack_init = Module["_emscripten_stack_init"] = function() {
  return (_emscripten_stack_init = Module["_emscripten_stack_init"] = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = function() {
  return (_emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = function() {
  return (_emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_iiiiij = Module["dynCall_iiiiij"] = createExportWrapper("dynCall_iiiiij");

/** @type {function(...*):?} */
var dynCall_iiiiijj = Module["dynCall_iiiiijj"] = createExportWrapper("dynCall_iiiiijj");

/** @type {function(...*):?} */
var dynCall_iiiiiijj = Module["dynCall_iiiiiijj"] = createExportWrapper("dynCall_iiiiiijj");

/** @type {function(...*):?} */
var dynCall_viijii = Module["dynCall_viijii"] = createExportWrapper("dynCall_viijii");

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");





// === Auto-generated postamble setup entry stuff ===

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "keepRuntimeAlive")) Module["keepRuntimeAlive"] = function() { abort("'keepRuntimeAlive' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "zeroMemory")) Module["zeroMemory"] = function() { abort("'zeroMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setFileTime")) Module["setFileTime"] = function() { abort("'setFileTime' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortOnCannotGrowMemory")) Module["abortOnCannotGrowMemory"] = function() { abort("'abortOnCannotGrowMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetPton4")) Module["inetPton4"] = function() { abort("'inetPton4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetNtop4")) Module["inetNtop4"] = function() { abort("'inetNtop4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetPton6")) Module["inetPton6"] = function() { abort("'inetPton6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetNtop6")) Module["inetNtop6"] = function() { abort("'inetNtop6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readSockaddr")) Module["readSockaddr"] = function() { abort("'readSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeSockaddr")) Module["writeSockaddr"] = function() { abort("'writeSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getHostByName")) Module["getHostByName"] = function() { abort("'getHostByName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getRandomDevice")) Module["getRandomDevice"] = function() { abort("'getRandomDevice' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "traverseStack")) Module["traverseStack"] = function() { abort("'traverseStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgsArray")) Module["readAsmConstArgsArray"] = function() { abort("'readAsmConstArgsArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mainThreadEM_ASM")) Module["mainThreadEM_ASM"] = function() { abort("'mainThreadEM_ASM' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getExecutableName")) Module["getExecutableName"] = function() { abort("'getExecutableName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "listenOnce")) Module["listenOnce"] = function() { abort("'listenOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext")) Module["autoResumeAudioContext"] = function() { abort("'autoResumeAudioContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCallLegacy")) Module["dynCallLegacy"] = function() { abort("'dynCallLegacy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getDynCaller")) Module["getDynCaller"] = function() { abort("'getDynCaller' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callRuntimeCallbacks")) Module["callRuntimeCallbacks"] = function() { abort("'callRuntimeCallbacks' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "handleException")) Module["handleException"] = function() { abort("'handleException' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepalivePush")) Module["runtimeKeepalivePush"] = function() { abort("'runtimeKeepalivePush' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepalivePop")) Module["runtimeKeepalivePop"] = function() { abort("'runtimeKeepalivePop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callUserCallback")) Module["callUserCallback"] = function() { abort("'callUserCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeExit")) Module["maybeExit"] = function() { abort("'maybeExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "safeSetTimeout")) Module["safeSetTimeout"] = function() { abort("'safeSetTimeout' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "asmjsMangle")) Module["asmjsMangle"] = function() { abort("'asmjsMangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "asyncLoad")) Module["asyncLoad"] = function() { abort("'asyncLoad' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignMemory")) Module["alignMemory"] = function() { abort("'alignMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mmapAlloc")) Module["mmapAlloc"] = function() { abort("'mmapAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unSign")) Module["unSign"] = function() { abort("'unSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reSign")) Module["reSign"] = function() { abort("'reSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketFromFD")) Module["getSocketFromFD"] = function() { abort("'getSocketFromFD' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketAddress")) Module["getSocketAddress"] = function() { abort("'getSocketAddress' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerKeyEventCallback")) Module["registerKeyEventCallback"] = function() { abort("'registerKeyEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeCStringToJsString")) Module["maybeCStringToJsString"] = function() { abort("'maybeCStringToJsString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findEventTarget")) Module["findEventTarget"] = function() { abort("'findEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findCanvasEventTarget")) Module["findCanvasEventTarget"] = function() { abort("'findCanvasEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBoundingClientRect")) Module["getBoundingClientRect"] = function() { abort("'getBoundingClientRect' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillMouseEventData")) Module["fillMouseEventData"] = function() { abort("'fillMouseEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerMouseEventCallback")) Module["registerMouseEventCallback"] = function() { abort("'registerMouseEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerWheelEventCallback")) Module["registerWheelEventCallback"] = function() { abort("'registerWheelEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerUiEventCallback")) Module["registerUiEventCallback"] = function() { abort("'registerUiEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFocusEventCallback")) Module["registerFocusEventCallback"] = function() { abort("'registerFocusEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceOrientationEventData")) Module["fillDeviceOrientationEventData"] = function() { abort("'fillDeviceOrientationEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceOrientationEventCallback")) Module["registerDeviceOrientationEventCallback"] = function() { abort("'registerDeviceOrientationEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceMotionEventData")) Module["fillDeviceMotionEventData"] = function() { abort("'fillDeviceMotionEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceMotionEventCallback")) Module["registerDeviceMotionEventCallback"] = function() { abort("'registerDeviceMotionEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "screenOrientation")) Module["screenOrientation"] = function() { abort("'screenOrientation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillOrientationChangeEventData")) Module["fillOrientationChangeEventData"] = function() { abort("'fillOrientationChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerOrientationChangeEventCallback")) Module["registerOrientationChangeEventCallback"] = function() { abort("'registerOrientationChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillFullscreenChangeEventData")) Module["fillFullscreenChangeEventData"] = function() { abort("'fillFullscreenChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFullscreenChangeEventCallback")) Module["registerFullscreenChangeEventCallback"] = function() { abort("'registerFullscreenChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerRestoreOldStyle")) Module["registerRestoreOldStyle"] = function() { abort("'registerRestoreOldStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "hideEverythingExceptGivenElement")) Module["hideEverythingExceptGivenElement"] = function() { abort("'hideEverythingExceptGivenElement' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreHiddenElements")) Module["restoreHiddenElements"] = function() { abort("'restoreHiddenElements' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setLetterbox")) Module["setLetterbox"] = function() { abort("'setLetterbox' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "currentFullscreenStrategy")) Module["currentFullscreenStrategy"] = function() { abort("'currentFullscreenStrategy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreOldWindowedStyle")) Module["restoreOldWindowedStyle"] = function() { abort("'restoreOldWindowedStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "softFullscreenResizeWebGLRenderTarget")) Module["softFullscreenResizeWebGLRenderTarget"] = function() { abort("'softFullscreenResizeWebGLRenderTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "doRequestFullscreen")) Module["doRequestFullscreen"] = function() { abort("'doRequestFullscreen' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillPointerlockChangeEventData")) Module["fillPointerlockChangeEventData"] = function() { abort("'fillPointerlockChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockChangeEventCallback")) Module["registerPointerlockChangeEventCallback"] = function() { abort("'registerPointerlockChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockErrorEventCallback")) Module["registerPointerlockErrorEventCallback"] = function() { abort("'registerPointerlockErrorEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requestPointerLock")) Module["requestPointerLock"] = function() { abort("'requestPointerLock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillVisibilityChangeEventData")) Module["fillVisibilityChangeEventData"] = function() { abort("'fillVisibilityChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerVisibilityChangeEventCallback")) Module["registerVisibilityChangeEventCallback"] = function() { abort("'registerVisibilityChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerTouchEventCallback")) Module["registerTouchEventCallback"] = function() { abort("'registerTouchEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillGamepadEventData")) Module["fillGamepadEventData"] = function() { abort("'fillGamepadEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerGamepadEventCallback")) Module["registerGamepadEventCallback"] = function() { abort("'registerGamepadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBeforeUnloadEventCallback")) Module["registerBeforeUnloadEventCallback"] = function() { abort("'registerBeforeUnloadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillBatteryEventData")) Module["fillBatteryEventData"] = function() { abort("'fillBatteryEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "battery")) Module["battery"] = function() { abort("'battery' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBatteryEventCallback")) Module["registerBatteryEventCallback"] = function() { abort("'registerBatteryEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setCanvasElementSize")) Module["setCanvasElementSize"] = function() { abort("'setCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCanvasElementSize")) Module["getCanvasElementSize"] = function() { abort("'getCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setImmediateWrapped")) Module["setImmediateWrapped"] = function() { abort("'setImmediateWrapped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "clearImmediateWrapped")) Module["clearImmediateWrapped"] = function() { abort("'clearImmediateWrapped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "polyfillSetImmediate")) Module["polyfillSetImmediate"] = function() { abort("'polyfillSetImmediate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() { abort("'checkWasiClock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "uncaughtExceptionCount")) Module["uncaughtExceptionCount"] = function() { abort("'uncaughtExceptionCount' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionLast")) Module["exceptionLast"] = function() { abort("'exceptionLast' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionCaught")) Module["exceptionCaught"] = function() { abort("'exceptionCaught' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfo")) Module["ExceptionInfo"] = function() { abort("'ExceptionInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "CatchInfo")) Module["CatchInfo"] = function() { abort("'CatchInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_addRef")) Module["exception_addRef"] = function() { abort("'exception_addRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_decRef")) Module["exception_decRef"] = function() { abort("'exception_decRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "funcWrappers")) Module["funcWrappers"] = function() { abort("'funcWrappers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setMainLoop")) Module["setMainLoop"] = function() { abort("'setMainLoop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "wget")) Module["wget"] = function() { abort("'wget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "_setNetworkCallback")) Module["_setNetworkCallback"] = function() { abort("'_setNetworkCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tempFixedLengthArray")) Module["tempFixedLengthArray"] = function() { abort("'tempFixedLengthArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "miniTempWebGLFloatBuffers")) Module["miniTempWebGLFloatBuffers"] = function() { abort("'miniTempWebGLFloatBuffers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapObjectForWebGLType")) Module["heapObjectForWebGLType"] = function() { abort("'heapObjectForWebGLType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapAccessShiftForWebGLHeap")) Module["heapAccessShiftForWebGLHeap"] = function() { abort("'heapAccessShiftForWebGLHeap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "computeUnpackAlignedImageSize")) Module["computeUnpackAlignedImageSize"] = function() { abort("'computeUnpackAlignedImageSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglGetUniformLocation")) Module["webglGetUniformLocation"] = function() { abort("'webglGetUniformLocation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglPrepareUniformLocationsBeforeFirstUse")) Module["webglPrepareUniformLocationsBeforeFirstUse"] = function() { abort("'webglPrepareUniformLocationsBeforeFirstUse' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglGetLeftBracePos")) Module["webglGetLeftBracePos"] = function() { abort("'webglGetLeftBracePos' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeGLArray")) Module["writeGLArray"] = function() { abort("'writeGLArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  var entryFunction = Module['_main'];

  args = args || [];

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(thisProgram);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;

  try {

    var ret = entryFunction(argc, argv);

    // In PROXY_TO_PTHREAD builds, we should never exit the runtime below, as
    // execution is asynchronously handed off to a pthread.
    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
    return ret;
  }
  catch (e) {
    return handleException(e);
  } finally {
    calledMain = true;

  }
}

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  _emscripten_stack_init();
  writeStackCookie();
}

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (shouldRunNow) callMain(args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  EXITSTATUS = status;

  checkUnflushedContent();

  if (keepRuntimeAlive()) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
      err(msg);
    }
  } else {
    exitRuntime();
  }

  procExit(status);
}

function procExit(code) {
  EXITSTATUS = code;
  if (!keepRuntimeAlive()) {
    if (Module['onExit']) Module['onExit'](code);
    ABORT = true;
  }
  quit_(code, new ExitStatus(code));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;

if (Module['noInitialRun']) shouldRunNow = false;

run();





